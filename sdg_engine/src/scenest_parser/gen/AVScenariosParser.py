# Generated from /home/ronaldo/Desktop/projects/Scenest/src/scenest/grammar/AVScenarios.g4 by ANTLR 4.8
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3^")
        buf.write("\u0597\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\3\2\3\2\5\2\u012b")
        buf.write("\n\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\4\3\4\3\4\3\4\5\4\u0143\n\4\3")
        buf.write("\5\3\5\3\5\3\5\5\5\u0149\n\5\3\6\3\6\3\6\3\6\5\6\u014f")
        buf.write("\n\6\3\7\3\7\3\7\3\7\5\7\u0155\n\7\3\b\3\b\3\b\3\b\3\b")
        buf.write("\3\b\3\b\3\b\3\b\3\b\5\b\u0161\n\b\3\t\3\t\3\n\3\n\5\n")
        buf.write("\u0167\n\n\3\13\3\13\3\13\3\13\3\13\3\f\3\f\3\f\3\f\3")
        buf.write("\f\5\f\u0173\n\f\3\r\3\r\5\r\u0177\n\r\3\16\3\16\3\16")
        buf.write("\3\16\3\16\3\16\3\16\3\16\5\16\u0181\n\16\3\16\3\16\5")
        buf.write("\16\u0185\n\16\3\16\3\16\5\16\u0189\n\16\3\17\5\17\u018c")
        buf.write("\n\17\3\17\3\17\3\20\3\20\3\20\5\20\u0193\n\20\3\21\3")
        buf.write("\21\5\21\u0197\n\21\3\22\3\22\5\22\u019b\n\22\3\23\3\23")
        buf.write("\3\24\5\24\u01a0\n\24\3\24\3\24\3\25\3\25\5\25\u01a6\n")
        buf.write("\25\3\26\3\26\3\27\3\27\3\27\5\27\u01ad\n\27\3\30\3\30")
        buf.write("\3\30\3\30\3\30\3\30\3\30\5\30\u01b6\n\30\3\30\3\30\3")
        buf.write("\30\3\30\3\30\3\30\5\30\u01be\n\30\3\31\3\31\5\31\u01c2")
        buf.write("\n\31\3\32\3\32\3\33\3\33\5\33\u01c8\n\33\3\34\3\34\3")
        buf.write("\34\3\34\5\34\u01ce\n\34\3\35\3\35\5\35\u01d2\n\35\3\36")
        buf.write("\3\36\5\36\u01d6\n\36\3\37\3\37\3\37\5\37\u01db\n\37\3")
        buf.write(" \3 \3 \3 \3 \3 \5 \u01e3\n \3 \3 \3 \3 \3 \3 \3 \3 \3")
        buf.write(" \3 \3 \5 \u01f0\n \3 \3 \5 \u01f4\n \3!\3!\5!\u01f8\n")
        buf.write("!\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\5\"\u0202\n\"\3\"\3")
        buf.write("\"\5\"\u0206\n\"\3#\3#\5#\u020a\n#\3$\3$\5$\u020e\n$\3")
        buf.write("%\3%\3&\3&\3&\3&\3&\3&\3&\5&\u0219\n&\3\'\3\'\5\'\u021d")
        buf.write("\n\'\3(\3(\5(\u0221\n(\3)\3)\3)\3)\3)\5)\u0228\n)\3*\3")
        buf.write("*\3+\3+\3+\3+\3,\3,\3,\3,\3,\3,\7,\u0236\n,\f,\16,\u0239")
        buf.write("\13,\3-\3-\3-\3-\3-\3.\3.\5.\u0242\n.\3/\3/\3/\3/\3/\3")
        buf.write("/\3/\3/\5/\u024c\n/\3/\3/\5/\u0250\n/\3/\3/\5/\u0254\n")
        buf.write("/\5/\u0256\n/\3\60\3\60\5\60\u025a\n\60\3\61\3\61\5\61")
        buf.write("\u025e\n\61\3\62\3\62\3\62\3\62\3\62\3\63\3\63\3\63\3")
        buf.write("\63\5\63\u0269\n\63\3\64\3\64\3\64\3\64\3\64\3\65\3\65")
        buf.write("\5\65\u0272\n\65\3\66\3\66\3\66\3\66\3\67\3\67\3\67\3")
        buf.write("\67\3\67\3\67\7\67\u027e\n\67\f\67\16\67\u0281\13\67\3")
        buf.write("8\38\38\38\38\38\58\u0289\n8\39\39\39\39\3:\3:\3:\3:\3")
        buf.write(":\3:\7:\u0295\n:\f:\16:\u0298\13:\3;\3;\5;\u029c\n;\3")
        buf.write("<\3<\3<\3<\3<\3=\3=\3=\3=\3=\3=\3=\3=\5=\u02ab\n=\3=\3")
        buf.write("=\5=\u02af\n=\3=\3=\5=\u02b3\n=\5=\u02b5\n=\3>\3>\5>\u02b9")
        buf.write("\n>\3?\3?\5?\u02bd\n?\3@\3@\5@\u02c1\n@\3A\3A\3A\3A\3")
        buf.write("A\3A\3B\3B\5B\u02cb\nB\3C\3C\3D\3D\3D\3D\3E\3E\3E\3E\3")
        buf.write("E\3E\7E\u02d9\nE\fE\16E\u02dc\13E\3F\3F\5F\u02e0\nF\3")
        buf.write("G\3G\3G\3G\3G\3H\3H\3H\5H\u02ea\nH\3I\3I\5I\u02ee\nI\3")
        buf.write("J\3J\3J\3J\5J\u02f4\nJ\3K\3K\3K\3K\3K\3K\3L\3L\3L\3L\3")
        buf.write("L\3L\3L\3L\3L\3L\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3N\3N\3")
        buf.write("N\3N\3N\3N\3N\3N\3N\3N\3O\3O\3O\3O\5O\u031e\nO\3P\3P\3")
        buf.write("P\3P\3P\3Q\3Q\3Q\3Q\3R\3R\5R\u032b\nR\3S\3S\5S\u032f\n")
        buf.write("S\3T\3T\3U\3U\3U\3U\3V\3V\3V\3V\3V\3V\7V\u033d\nV\fV\16")
        buf.write("V\u0340\13V\3W\3W\5W\u0344\nW\3X\3X\3X\3X\3X\3X\3X\3X")
        buf.write("\5X\u034e\nX\3Y\3Y\3Y\3Y\3Y\5Y\u0355\nY\3Z\3Z\5Z\u0359")
        buf.write("\nZ\3[\3[\5[\u035d\n[\3\\\3\\\3\\\5\\\u0362\n\\\3]\3]")
        buf.write("\3]\3]\3^\3^\3^\3^\3_\3_\3_\7_\u036f\n_\f_\16_\u0372\13")
        buf.write("_\3`\3`\5`\u0376\n`\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3")
        buf.write("b\3b\5b\u0385\nb\3c\5c\u0388\nc\3c\3c\3d\3d\3d\3d\3d\3")
        buf.write("d\7d\u0392\nd\fd\16d\u0395\13d\3e\3e\5e\u0399\ne\3f\3")
        buf.write("f\3f\3f\3f\3f\3f\3g\3g\5g\u03a4\ng\3h\3h\3h\3h\3h\3h\3")
        buf.write("i\3i\3i\3i\3i\3i\3i\3i\3j\3j\3k\3k\3k\3k\3k\3l\3l\3l\3")
        buf.write("l\3l\3l\7l\u03c1\nl\fl\16l\u03c4\13l\3m\3m\5m\u03c8\n")
        buf.write("m\3n\3n\3n\3n\3o\3o\3o\3o\3p\3p\5p\u03d4\np\3q\3q\3q\3")
        buf.write("q\3q\3q\3q\3r\3r\5r\u03df\nr\3s\3s\3s\3s\3s\3t\3t\5t\u03e8")
        buf.write("\nt\3u\3u\3u\3u\3u\3u\3u\3u\3v\3v\3v\3v\3v\3w\3w\3x\3")
        buf.write("x\3x\3x\3y\3y\3z\3z\5z\u0401\nz\3{\3{\3{\3{\3{\3{\3{\3")
        buf.write("|\3|\5|\u040c\n|\3}\3}\3}\3}\3}\3}\3}\3}\3~\3~\3~\3~\3")
        buf.write("~\3~\3~\3~\3~\3\177\3\177\3\177\3\177\3\177\3\177\3\177")
        buf.write("\3\177\3\177\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3")
        buf.write("\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\7\u0081")
        buf.write("\u0433\n\u0081\f\u0081\16\u0081\u0436\13\u0081\3\u0082")
        buf.write("\3\u0082\3\u0082\3\u0082\3\u0083\3\u0083\3\u0083\3\u0083")
        buf.write("\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0084\3\u0084")
        buf.write("\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0086\3\u0086")
        buf.write("\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086\3\u0087\3\u0087")
        buf.write("\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087")
        buf.write("\3\u0087\3\u0087\3\u0087\3\u0088\3\u0088\3\u0088\3\u0088")
        buf.write("\3\u0088\3\u0088\3\u0088\3\u0089\3\u0089\3\u0089\3\u0089")
        buf.write("\3\u0089\3\u0089\3\u0089\3\u008a\3\u008a\3\u008a\3\u008a")
        buf.write("\3\u008a\3\u008b\3\u008b\3\u008c\3\u008c\3\u008c\3\u008c")
        buf.write("\3\u008c\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d")
        buf.write("\3\u008d\3\u008d\3\u008d\3\u008e\3\u008e\3\u008e\3\u008e")
        buf.write("\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008f")
        buf.write("\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u0090")
        buf.write("\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090")
        buf.write("\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090")
        buf.write("\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\5\u0090\u04a7")
        buf.write("\n\u0090\3\u0091\3\u0091\3\u0092\3\u0092\3\u0092\7\u0092")
        buf.write("\u04ae\n\u0092\f\u0092\16\u0092\u04b1\13\u0092\3\u0093")
        buf.write("\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093")
        buf.write("\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093")
        buf.write("\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093")
        buf.write("\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093")
        buf.write("\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093")
        buf.write("\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093")
        buf.write("\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093")
        buf.write("\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093")
        buf.write("\3\u0093\3\u0093\5\u0093\u04ee\n\u0093\3\u0093\3\u0093")
        buf.write("\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\5\u0093\u04f7")
        buf.write("\n\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\5\u0093")
        buf.write("\u04fe\n\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093")
        buf.write("\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093")
        buf.write("\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093")
        buf.write("\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093")
        buf.write("\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093")
        buf.write("\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\7\u0093\u0526")
        buf.write("\n\u0093\f\u0093\16\u0093\u0529\13\u0093\3\u0093\3\u0093")
        buf.write("\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093")
        buf.write("\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093")
        buf.write("\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093")
        buf.write("\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093")
        buf.write("\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093")
        buf.write("\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093")
        buf.write("\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093")
        buf.write("\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093")
        buf.write("\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093")
        buf.write("\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093")
        buf.write("\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093")
        buf.write("\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093")
        buf.write("\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093")
        buf.write("\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093")
        buf.write("\3\u0093\3\u0093\3\u0093\3\u0093\5\u0093\u0593\n\u0093")
        buf.write("\3\u0094\3\u0094\3\u0094\2\nVlr\u0088\u00aa\u00c6\u00d6")
        buf.write("\u0100\u0095\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"")
        buf.write("$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz")
        buf.write("|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090")
        buf.write("\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2")
        buf.write("\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4")
        buf.write("\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6")
        buf.write("\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8")
        buf.write("\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea")
        buf.write("\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc")
        buf.write("\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e")
        buf.write("\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120")
        buf.write("\u0122\u0124\u0126\2\4\3\2\17\20\20\2\3\3\7\7\n\n\f\16")
        buf.write("\23\35#/\64\64>?BBDDGGKNRSWW\2\u05b2\2\u0128\3\2\2\2\4")
        buf.write("\u012c\3\2\2\2\6\u0142\3\2\2\2\b\u0148\3\2\2\2\n\u014e")
        buf.write("\3\2\2\2\f\u0154\3\2\2\2\16\u0160\3\2\2\2\20\u0162\3\2")
        buf.write("\2\2\22\u0166\3\2\2\2\24\u0168\3\2\2\2\26\u016d\3\2\2")
        buf.write("\2\30\u0176\3\2\2\2\32\u0188\3\2\2\2\34\u018b\3\2\2\2")
        buf.write("\36\u0192\3\2\2\2 \u0196\3\2\2\2\"\u019a\3\2\2\2$\u019c")
        buf.write("\3\2\2\2&\u019f\3\2\2\2(\u01a5\3\2\2\2*\u01a7\3\2\2\2")
        buf.write(",\u01ac\3\2\2\2.\u01bd\3\2\2\2\60\u01c1\3\2\2\2\62\u01c3")
        buf.write("\3\2\2\2\64\u01c7\3\2\2\2\66\u01c9\3\2\2\28\u01d1\3\2")
        buf.write("\2\2:\u01d5\3\2\2\2<\u01da\3\2\2\2>\u01f3\3\2\2\2@\u01f7")
        buf.write("\3\2\2\2B\u0205\3\2\2\2D\u0209\3\2\2\2F\u020d\3\2\2\2")
        buf.write("H\u020f\3\2\2\2J\u0218\3\2\2\2L\u021c\3\2\2\2N\u0220\3")
        buf.write("\2\2\2P\u0227\3\2\2\2R\u0229\3\2\2\2T\u022b\3\2\2\2V\u022f")
        buf.write("\3\2\2\2X\u023a\3\2\2\2Z\u0241\3\2\2\2\\\u0255\3\2\2\2")
        buf.write("^\u0259\3\2\2\2`\u025d\3\2\2\2b\u025f\3\2\2\2d\u0268\3")
        buf.write("\2\2\2f\u026a\3\2\2\2h\u0271\3\2\2\2j\u0273\3\2\2\2l\u0277")
        buf.write("\3\2\2\2n\u0288\3\2\2\2p\u028a\3\2\2\2r\u028e\3\2\2\2")
        buf.write("t\u029b\3\2\2\2v\u029d\3\2\2\2x\u02b4\3\2\2\2z\u02b8\3")
        buf.write("\2\2\2|\u02bc\3\2\2\2~\u02c0\3\2\2\2\u0080\u02c2\3\2\2")
        buf.write("\2\u0082\u02ca\3\2\2\2\u0084\u02cc\3\2\2\2\u0086\u02ce")
        buf.write("\3\2\2\2\u0088\u02d2\3\2\2\2\u008a\u02df\3\2\2\2\u008c")
        buf.write("\u02e1\3\2\2\2\u008e\u02e6\3\2\2\2\u0090\u02ed\3\2\2\2")
        buf.write("\u0092\u02f3\3\2\2\2\u0094\u02f5\3\2\2\2\u0096\u02fb\3")
        buf.write("\2\2\2\u0098\u0305\3\2\2\2\u009a\u030f\3\2\2\2\u009c\u031d")
        buf.write("\3\2\2\2\u009e\u031f\3\2\2\2\u00a0\u0324\3\2\2\2\u00a2")
        buf.write("\u032a\3\2\2\2\u00a4\u032e\3\2\2\2\u00a6\u0330\3\2\2\2")
        buf.write("\u00a8\u0332\3\2\2\2\u00aa\u0336\3\2\2\2\u00ac\u0343\3")
        buf.write("\2\2\2\u00ae\u034d\3\2\2\2\u00b0\u0354\3\2\2\2\u00b2\u0358")
        buf.write("\3\2\2\2\u00b4\u035c\3\2\2\2\u00b6\u0361\3\2\2\2\u00b8")
        buf.write("\u0363\3\2\2\2\u00ba\u0367\3\2\2\2\u00bc\u036b\3\2\2\2")
        buf.write("\u00be\u0375\3\2\2\2\u00c0\u0377\3\2\2\2\u00c2\u0384\3")
        buf.write("\2\2\2\u00c4\u0387\3\2\2\2\u00c6\u038b\3\2\2\2\u00c8\u0398")
        buf.write("\3\2\2\2\u00ca\u039a\3\2\2\2\u00cc\u03a3\3\2\2\2\u00ce")
        buf.write("\u03a5\3\2\2\2\u00d0\u03ab\3\2\2\2\u00d2\u03b3\3\2\2\2")
        buf.write("\u00d4\u03b5\3\2\2\2\u00d6\u03ba\3\2\2\2\u00d8\u03c7\3")
        buf.write("\2\2\2\u00da\u03c9\3\2\2\2\u00dc\u03cd\3\2\2\2\u00de\u03d3")
        buf.write("\3\2\2\2\u00e0\u03d5\3\2\2\2\u00e2\u03de\3\2\2\2\u00e4")
        buf.write("\u03e0\3\2\2\2\u00e6\u03e7\3\2\2\2\u00e8\u03e9\3\2\2\2")
        buf.write("\u00ea\u03f1\3\2\2\2\u00ec\u03f6\3\2\2\2\u00ee\u03f8\3")
        buf.write("\2\2\2\u00f0\u03fc\3\2\2\2\u00f2\u0400\3\2\2\2\u00f4\u0402")
        buf.write("\3\2\2\2\u00f6\u040b\3\2\2\2\u00f8\u040d\3\2\2\2\u00fa")
        buf.write("\u0415\3\2\2\2\u00fc\u041e\3\2\2\2\u00fe\u0427\3\2\2\2")
        buf.write("\u0100\u042c\3\2\2\2\u0102\u0437\3\2\2\2\u0104\u043b\3")
        buf.write("\2\2\2\u0106\u0444\3\2\2\2\u0108\u0446\3\2\2\2\u010a\u044b")
        buf.write("\3\2\2\2\u010c\u0452\3\2\2\2\u010e\u045e\3\2\2\2\u0110")
        buf.write("\u0465\3\2\2\2\u0112\u046c\3\2\2\2\u0114\u0471\3\2\2\2")
        buf.write("\u0116\u0473\3\2\2\2\u0118\u0478\3\2\2\2\u011a\u0481\3")
        buf.write("\2\2\2\u011c\u048b\3\2\2\2\u011e\u04a6\3\2\2\2\u0120\u04a8")
        buf.write("\3\2\2\2\u0122\u04af\3\2\2\2\u0124\u0592\3\2\2\2\u0126")
        buf.write("\u0594\3\2\2\2\u0128\u012a\5\u0122\u0092\2\u0129\u012b")
        buf.write("\7\2\2\3\u012a\u0129\3\2\2\2\u012a\u012b\3\2\2\2\u012b")
        buf.write("\3\3\2\2\2\u012c\u012d\7\3\2\2\u012d\u012e\7\4\2\2\u012e")
        buf.write("\u012f\5\16\b\2\u012f\u0130\7\5\2\2\u0130\u0131\5\22\n")
        buf.write("\2\u0131\u0132\7\5\2\2\u0132\u0133\5\6\4\2\u0133\u0134")
        buf.write("\7\5\2\2\u0134\u0135\5\b\5\2\u0135\u0136\7\5\2\2\u0136")
        buf.write("\u0137\5\n\6\2\u0137\u0138\7\5\2\2\u0138\u0139\5\u009c")
        buf.write("O\2\u0139\u013a\7\5\2\2\u013a\u013b\5\f\7\2\u013b\u013c")
        buf.write("\7\5\2\2\u013c\u013d\7\6\2\2\u013d\5\3\2\2\2\u013e\u0143")
        buf.write("\5\u0126\u0094\2\u013f\u0143\5T+\2\u0140\u0141\7\4\2\2")
        buf.write("\u0141\u0143\7\6\2\2\u0142\u013e\3\2\2\2\u0142\u013f\3")
        buf.write("\2\2\2\u0142\u0140\3\2\2\2\u0143\7\3\2\2\2\u0144\u0149")
        buf.write("\5\u0126\u0094\2\u0145\u0149\5p9\2\u0146\u0147\7\4\2\2")
        buf.write("\u0147\u0149\7\6\2\2\u0148\u0144\3\2\2\2\u0148\u0145\3")
        buf.write("\2\2\2\u0148\u0146\3\2\2\2\u0149\t\3\2\2\2\u014a\u014f")
        buf.write("\5\u0126\u0094\2\u014b\u014f\5\u0086D\2\u014c\u014d\7")
        buf.write("\4\2\2\u014d\u014f\7\6\2\2\u014e\u014a\3\2\2\2\u014e\u014b")
        buf.write("\3\2\2\2\u014e\u014c\3\2\2\2\u014f\13\3\2\2\2\u0150\u0155")
        buf.write("\5\u0126\u0094\2\u0151\u0155\5\u00b8]\2\u0152\u0153\7")
        buf.write("\4\2\2\u0153\u0155\7\6\2\2\u0154\u0150\3\2\2\2\u0154\u0151")
        buf.write("\3\2\2\2\u0154\u0152\3\2\2\2\u0155\r\3\2\2\2\u0156\u0157")
        buf.write("\7\7\2\2\u0157\u0158\7\b\2\2\u0158\u0159\5\20\t\2\u0159")
        buf.write("\u015a\7\t\2\2\u015a\u0161\3\2\2\2\u015b\u015c\7\7\2\2")
        buf.write("\u015c\u015d\7\b\2\2\u015d\u015e\5\u0126\u0094\2\u015e")
        buf.write("\u015f\7\t\2\2\u015f\u0161\3\2\2\2\u0160\u0156\3\2\2\2")
        buf.write("\u0160\u015b\3\2\2\2\u0161\17\3\2\2\2\u0162\u0163\7U\2")
        buf.write("\2\u0163\21\3\2\2\2\u0164\u0167\5\24\13\2\u0165\u0167")
        buf.write("\5\u0126\u0094\2\u0166\u0164\3\2\2\2\u0166\u0165\3\2\2")
        buf.write("\2\u0167\23\3\2\2\2\u0168\u0169\7\n\2\2\u0169\u016a\7")
        buf.write("\b\2\2\u016a\u016b\5\26\f\2\u016b\u016c\7\t\2\2\u016c")
        buf.write("\25\3\2\2\2\u016d\u016e\5\30\r\2\u016e\u016f\7\13\2\2")
        buf.write("\u016f\u0172\5\30\r\2\u0170\u0171\7\13\2\2\u0171\u0173")
        buf.write("\5@!\2\u0172\u0170\3\2\2\2\u0172\u0173\3\2\2\2\u0173\27")
        buf.write("\3\2\2\2\u0174\u0177\5\32\16\2\u0175\u0177\5\u0126\u0094")
        buf.write("\2\u0176\u0174\3\2\2\2\u0176\u0175\3\2\2\2\u0177\31\3")
        buf.write("\2\2\2\u0178\u0179\7\b\2\2\u0179\u017a\5 \21\2\u017a\u017b")
        buf.write("\7\t\2\2\u017b\u0189\3\2\2\2\u017c\u017d\7\b\2\2\u017d")
        buf.write("\u017e\5 \21\2\u017e\u0180\7\13\2\2\u017f\u0181\5\64\33")
        buf.write("\2\u0180\u017f\3\2\2\2\u0180\u0181\3\2\2\2\u0181\u0184")
        buf.write("\3\2\2\2\u0182\u0183\7\13\2\2\u0183\u0185\5\"\22\2\u0184")
        buf.write("\u0182\3\2\2\2\u0184\u0185\3\2\2\2\u0185\u0186\3\2\2\2")
        buf.write("\u0186\u0187\7\t\2\2\u0187\u0189\3\2\2\2\u0188\u0178\3")
        buf.write("\2\2\2\u0188\u017c\3\2\2\2\u0189\33\3\2\2\2\u018a\u018c")
        buf.write("\5\36\20\2\u018b\u018a\3\2\2\2\u018b\u018c\3\2\2\2\u018c")
        buf.write("\u018d\3\2\2\2\u018d\u018e\5.\30\2\u018e\35\3\2\2\2\u018f")
        buf.write("\u0193\7\f\2\2\u0190\u0193\7\r\2\2\u0191\u0193\7\16\2")
        buf.write("\2\u0192\u018f\3\2\2\2\u0192\u0190\3\2\2\2\u0192\u0191")
        buf.write("\3\2\2\2\u0193\37\3\2\2\2\u0194\u0197\5\34\17\2\u0195")
        buf.write("\u0197\5\u0126\u0094\2\u0196\u0194\3\2\2\2\u0196\u0195")
        buf.write("\3\2\2\2\u0197!\3\2\2\2\u0198\u019b\5$\23\2\u0199\u019b")
        buf.write("\5\u0126\u0094\2\u019a\u0198\3\2\2\2\u019a\u0199\3\2\2")
        buf.write("\2\u019b#\3\2\2\2\u019c\u019d\5&\24\2\u019d%\3\2\2\2\u019e")
        buf.write("\u01a0\7V\2\2\u019f\u019e\3\2\2\2\u019f\u01a0\3\2\2\2")
        buf.write("\u01a0\u01a1\3\2\2\2\u01a1\u01a2\5(\25\2\u01a2\'\3\2\2")
        buf.write("\2\u01a3\u01a6\5*\26\2\u01a4\u01a6\5,\27\2\u01a5\u01a3")
        buf.write("\3\2\2\2\u01a5\u01a4\3\2\2\2\u01a6)\3\2\2\2\u01a7\u01a8")
        buf.write("\7Z\2\2\u01a8+\3\2\2\2\u01a9\u01ad\7[\2\2\u01aa\u01ad")
        buf.write("\7\17\2\2\u01ab\u01ad\7\20\2\2\u01ac\u01a9\3\2\2\2\u01ac")
        buf.write("\u01aa\3\2\2\2\u01ac\u01ab\3\2\2\2\u01ad-\3\2\2\2\u01ae")
        buf.write("\u01af\7\b\2\2\u01af\u01b0\5&\24\2\u01b0\u01b1\7\13\2")
        buf.write("\2\u01b1\u01b5\5&\24\2\u01b2\u01b3\7\13\2\2\u01b3\u01b4")
        buf.write("\7V\2\2\u01b4\u01b6\5&\24\2\u01b5\u01b2\3\2\2\2\u01b5")
        buf.write("\u01b6\3\2\2\2\u01b6\u01b7\3\2\2\2\u01b7\u01b8\7\t\2\2")
        buf.write("\u01b8\u01be\3\2\2\2\u01b9\u01ba\5\60\31\2\u01ba\u01bb")
        buf.write("\7\21\2\2\u01bb\u01bc\5&\24\2\u01bc\u01be\3\2\2\2\u01bd")
        buf.write("\u01ae\3\2\2\2\u01bd\u01b9\3\2\2\2\u01be/\3\2\2\2\u01bf")
        buf.write("\u01c2\5\u0126\u0094\2\u01c0\u01c2\5\62\32\2\u01c1\u01bf")
        buf.write("\3\2\2\2\u01c1\u01c0\3\2\2\2\u01c2\61\3\2\2\2\u01c3\u01c4")
        buf.write("\7U\2\2\u01c4\63\3\2\2\2\u01c5\u01c8\5\u0126\u0094\2\u01c6")
        buf.write("\u01c8\5\66\34\2\u01c7\u01c5\3\2\2\2\u01c7\u01c6\3\2\2")
        buf.write("\2\u01c8\65\3\2\2\2\u01c9\u01ca\5&\24\2\u01ca\u01cd\5")
        buf.write("8\35\2\u01cb\u01cc\7\22\2\2\u01cc\u01ce\5:\36\2\u01cd")
        buf.write("\u01cb\3\2\2\2\u01cd\u01ce\3\2\2\2\u01ce\67\3\2\2\2\u01cf")
        buf.write("\u01d2\7\23\2\2\u01d0\u01d2\7\24\2\2\u01d1\u01cf\3\2\2")
        buf.write("\2\u01d1\u01d0\3\2\2\2\u01d29\3\2\2\2\u01d3\u01d6\5<\37")
        buf.write("\2\u01d4\u01d6\5> \2\u01d5\u01d3\3\2\2\2\u01d5\u01d4\3")
        buf.write("\2\2\2\u01d6;\3\2\2\2\u01d7\u01d8\7\25\2\2\u01d8\u01db")
        buf.write("\5\60\31\2\u01d9\u01db\7\26\2\2\u01da\u01d7\3\2\2\2\u01da")
        buf.write("\u01d9\3\2\2\2\u01db=\3\2\2\2\u01dc\u01dd\7\b\2\2\u01dd")
        buf.write("\u01de\5&\24\2\u01de\u01df\7\13\2\2\u01df\u01e2\5&\24")
        buf.write("\2\u01e0\u01e1\7\13\2\2\u01e1\u01e3\5\36\20\2\u01e2\u01e0")
        buf.write("\3\2\2\2\u01e2\u01e3\3\2\2\2\u01e3\u01e4\3\2\2\2\u01e4")
        buf.write("\u01e5\7\t\2\2\u01e5\u01f4\3\2\2\2\u01e6\u01e7\7\b\2\2")
        buf.write("\u01e7\u01e8\5&\24\2\u01e8\u01e9\7\13\2\2\u01e9\u01ea")
        buf.write("\5&\24\2\u01ea\u01eb\7\13\2\2\u01eb\u01ec\7V\2\2\u01ec")
        buf.write("\u01ef\5&\24\2\u01ed\u01ee\7\13\2\2\u01ee\u01f0\5\36\20")
        buf.write("\2\u01ef\u01ed\3\2\2\2\u01ef\u01f0\3\2\2\2\u01f0\u01f1")
        buf.write("\3\2\2\2\u01f1\u01f2\7\t\2\2\u01f2\u01f4\3\2\2\2\u01f3")
        buf.write("\u01dc\3\2\2\2\u01f3\u01e6\3\2\2\2\u01f4?\3\2\2\2\u01f5")
        buf.write("\u01f8\5\u0126\u0094\2\u01f6\u01f8\5B\"\2\u01f7\u01f5")
        buf.write("\3\2\2\2\u01f7\u01f6\3\2\2\2\u01f8A\3\2\2\2\u01f9\u01fa")
        buf.write("\7\b\2\2\u01fa\u01fb\5D#\2\u01fb\u01fc\7\t\2\2\u01fc\u0206")
        buf.write("\3\2\2\2\u01fd\u01fe\7\b\2\2\u01fe\u01ff\5D#\2\u01ff\u0201")
        buf.write("\7\13\2\2\u0200\u0202\5L\'\2\u0201\u0200\3\2\2\2\u0201")
        buf.write("\u0202\3\2\2\2\u0202\u0203\3\2\2\2\u0203\u0204\7\t\2\2")
        buf.write("\u0204\u0206\3\2\2\2\u0205\u01f9\3\2\2\2\u0205\u01fd\3")
        buf.write("\2\2\2\u0206C\3\2\2\2\u0207\u020a\5\u0126\u0094\2\u0208")
        buf.write("\u020a\5F$\2\u0209\u0207\3\2\2\2\u0209\u0208\3\2\2\2\u020a")
        buf.write("E\3\2\2\2\u020b\u020e\5H%\2\u020c\u020e\5J&\2\u020d\u020b")
        buf.write("\3\2\2\2\u020d\u020c\3\2\2\2\u020eG\3\2\2\2\u020f\u0210")
        buf.write("\7U\2\2\u0210I\3\2\2\2\u0211\u0219\7\27\2\2\u0212\u0219")
        buf.write("\7\30\2\2\u0213\u0219\7\31\2\2\u0214\u0219\7\32\2\2\u0215")
        buf.write("\u0219\7\33\2\2\u0216\u0219\7\34\2\2\u0217\u0219\7\35")
        buf.write("\2\2\u0218\u0211\3\2\2\2\u0218\u0212\3\2\2\2\u0218\u0213")
        buf.write("\3\2\2\2\u0218\u0214\3\2\2\2\u0218\u0215\3\2\2\2\u0218")
        buf.write("\u0216\3\2\2\2\u0218\u0217\3\2\2\2\u0219K\3\2\2\2\u021a")
        buf.write("\u021d\5\u0126\u0094\2\u021b\u021d\5N(\2\u021c\u021a\3")
        buf.write("\2\2\2\u021c\u021b\3\2\2\2\u021dM\3\2\2\2\u021e\u0221")
        buf.write("\5P)\2\u021f\u0221\5R*\2\u0220\u021e\3\2\2\2\u0220\u021f")
        buf.write("\3\2\2\2\u0221O\3\2\2\2\u0222\u0228\7\36\2\2\u0223\u0228")
        buf.write("\7\37\2\2\u0224\u0228\7 \2\2\u0225\u0228\7!\2\2\u0226")
        buf.write("\u0228\7\"\2\2\u0227\u0222\3\2\2\2\u0227\u0223\3\2\2\2")
        buf.write("\u0227\u0224\3\2\2\2\u0227\u0225\3\2\2\2\u0227\u0226\3")
        buf.write("\2\2\2\u0228Q\3\2\2\2\u0229\u022a\7Y\2\2\u022aS\3\2\2")
        buf.write("\2\u022b\u022c\7\4\2\2\u022c\u022d\5V,\2\u022d\u022e\7")
        buf.write("\6\2\2\u022eU\3\2\2\2\u022f\u0230\b,\1\2\u0230\u0231\5")
        buf.write("Z.\2\u0231\u0237\3\2\2\2\u0232\u0233\f\3\2\2\u0233\u0234")
        buf.write("\7\13\2\2\u0234\u0236\5Z.\2\u0235\u0232\3\2\2\2\u0236")
        buf.write("\u0239\3\2\2\2\u0237\u0235\3\2\2\2\u0237\u0238\3\2\2\2")
        buf.write("\u0238W\3\2\2\2\u0239\u0237\3\2\2\2\u023a\u023b\7#\2\2")
        buf.write("\u023b\u023c\7\b\2\2\u023c\u023d\5\\/\2\u023d\u023e\7")
        buf.write("\t\2\2\u023eY\3\2\2\2\u023f\u0242\5X-\2\u0240\u0242\5")
        buf.write("\u0126\u0094\2\u0241\u023f\3\2\2\2\u0241\u0240\3\2\2\2")
        buf.write("\u0242[\3\2\2\2\u0243\u0256\5\30\r\2\u0244\u0245\5\30")
        buf.write("\r\2\u0245\u0246\7\13\2\2\u0246\u0247\5^\60\2\u0247\u0256")
        buf.write("\3\2\2\2\u0248\u0249\5\30\r\2\u0249\u024b\7\13\2\2\u024a")
        buf.write("\u024c\5^\60\2\u024b\u024a\3\2\2\2\u024b\u024c\3\2\2\2")
        buf.write("\u024c\u024d\3\2\2\2\u024d\u024f\7\13\2\2\u024e\u0250")
        buf.write("\5\30\r\2\u024f\u024e\3\2\2\2\u024f\u0250\3\2\2\2\u0250")
        buf.write("\u0253\3\2\2\2\u0251\u0252\7\13\2\2\u0252\u0254\5@!\2")
        buf.write("\u0253\u0251\3\2\2\2\u0253\u0254\3\2\2\2\u0254\u0256\3")
        buf.write("\2\2\2\u0255\u0243\3\2\2\2\u0255\u0244\3\2\2\2\u0255\u0248")
        buf.write("\3\2\2\2\u0256]\3\2\2\2\u0257\u025a\5`\61\2\u0258\u025a")
        buf.write("\5\u0126\u0094\2\u0259\u0257\3\2\2\2\u0259\u0258\3\2\2")
        buf.write("\2\u025a_\3\2\2\2\u025b\u025e\5b\62\2\u025c\u025e\5f\64")
        buf.write("\2\u025d\u025b\3\2\2\2\u025d\u025c\3\2\2\2\u025ea\3\2")
        buf.write("\2\2\u025f\u0260\5d\63\2\u0260\u0261\7\b\2\2\u0261\u0262")
        buf.write("\5\30\r\2\u0262\u0263\7\t\2\2\u0263c\3\2\2\2\u0264\u0269")
        buf.write("\7$\2\2\u0265\u0269\7%\2\2\u0266\u0269\7&\2\2\u0267\u0269")
        buf.write("\7\'\2\2\u0268\u0264\3\2\2\2\u0268\u0265\3\2\2\2\u0268")
        buf.write("\u0266\3\2\2\2\u0268\u0267\3\2\2\2\u0269e\3\2\2\2\u026a")
        buf.write("\u026b\5n8\2\u026b\u026c\7\b\2\2\u026c\u026d\5h\65\2\u026d")
        buf.write("\u026e\7\t\2\2\u026eg\3\2\2\2\u026f\u0272\5\u0126\u0094")
        buf.write("\2\u0270\u0272\5j\66\2\u0271\u026f\3\2\2\2\u0271\u0270")
        buf.write("\3\2\2\2\u0272i\3\2\2\2\u0273\u0274\7\b\2\2\u0274\u0275")
        buf.write("\5l\67\2\u0275\u0276\7\t\2\2\u0276k\3\2\2\2\u0277\u0278")
        buf.write("\b\67\1\2\u0278\u0279\5\30\r\2\u0279\u027f\3\2\2\2\u027a")
        buf.write("\u027b\f\4\2\2\u027b\u027c\7\13\2\2\u027c\u027e\5\30\r")
        buf.write("\2\u027d\u027a\3\2\2\2\u027e\u0281\3\2\2\2\u027f\u027d")
        buf.write("\3\2\2\2\u027f\u0280\3\2\2\2\u0280m\3\2\2\2\u0281\u027f")
        buf.write("\3\2\2\2\u0282\u0289\7(\2\2\u0283\u0289\7)\2\2\u0284\u0289")
        buf.write("\7*\2\2\u0285\u0289\7+\2\2\u0286\u0289\7,\2\2\u0287\u0289")
        buf.write("\7-\2\2\u0288\u0282\3\2\2\2\u0288\u0283\3\2\2\2\u0288")
        buf.write("\u0284\3\2\2\2\u0288\u0285\3\2\2\2\u0288\u0286\3\2\2\2")
        buf.write("\u0288\u0287\3\2\2\2\u0289o\3\2\2\2\u028a\u028b\7\4\2")
        buf.write("\2\u028b\u028c\5r:\2\u028c\u028d\7\6\2\2\u028dq\3\2\2")
        buf.write("\2\u028e\u028f\b:\1\2\u028f\u0290\5t;\2\u0290\u0296\3")
        buf.write("\2\2\2\u0291\u0292\f\3\2\2\u0292\u0293\7\13\2\2\u0293")
        buf.write("\u0295\5t;\2\u0294\u0291\3\2\2\2\u0295\u0298\3\2\2\2\u0296")
        buf.write("\u0294\3\2\2\2\u0296\u0297\3\2\2\2\u0297s\3\2\2\2\u0298")
        buf.write("\u0296\3\2\2\2\u0299\u029c\5v<\2\u029a\u029c\5\u0126\u0094")
        buf.write("\2\u029b\u0299\3\2\2\2\u029b\u029a\3\2\2\2\u029cu\3\2")
        buf.write("\2\2\u029d\u029e\7.\2\2\u029e\u029f\7\b\2\2\u029f\u02a0")
        buf.write("\5x=\2\u02a0\u02a1\7\t\2\2\u02a1w\3\2\2\2\u02a2\u02b5")
        buf.write("\5\30\r\2\u02a3\u02a4\5\30\r\2\u02a4\u02a5\7\13\2\2\u02a5")
        buf.write("\u02a6\5z>\2\u02a6\u02b5\3\2\2\2\u02a7\u02a8\5\30\r\2")
        buf.write("\u02a8\u02aa\7\13\2\2\u02a9\u02ab\5z>\2\u02aa\u02a9\3")
        buf.write("\2\2\2\u02aa\u02ab\3\2\2\2\u02ab\u02ac\3\2\2\2\u02ac\u02ae")
        buf.write("\7\13\2\2\u02ad\u02af\5\30\r\2\u02ae\u02ad\3\2\2\2\u02ae")
        buf.write("\u02af\3\2\2\2\u02af\u02b2\3\2\2\2\u02b0\u02b1\7\13\2")
        buf.write("\2\u02b1\u02b3\5~@\2\u02b2\u02b0\3\2\2\2\u02b2\u02b3\3")
        buf.write("\2\2\2\u02b3\u02b5\3\2\2\2\u02b4\u02a2\3\2\2\2\u02b4\u02a3")
        buf.write("\3\2\2\2\u02b4\u02a7\3\2\2\2\u02b5y\3\2\2\2\u02b6\u02b9")
        buf.write("\5|?\2\u02b7\u02b9\5\u0126\u0094\2\u02b8\u02b6\3\2\2\2")
        buf.write("\u02b8\u02b7\3\2\2\2\u02b9{\3\2\2\2\u02ba\u02bd\5b\62")
        buf.write("\2\u02bb\u02bd\5f\64\2\u02bc\u02ba\3\2\2\2\u02bc\u02bb")
        buf.write("\3\2\2\2\u02bd}\3\2\2\2\u02be\u02c1\5\u0080A\2\u02bf\u02c1")
        buf.write("\5\u0126\u0094\2\u02c0\u02be\3\2\2\2\u02c0\u02bf\3\2\2")
        buf.write("\2\u02c1\177\3\2\2\2\u02c2\u02c3\7\b\2\2\u02c3\u02c4\5")
        buf.write("\u0082B\2\u02c4\u02c5\7\13\2\2\u02c5\u02c6\5L\'\2\u02c6")
        buf.write("\u02c7\7\t\2\2\u02c7\u0081\3\2\2\2\u02c8\u02cb\5\u0126")
        buf.write("\u0094\2\u02c9\u02cb\5\u0084C\2\u02ca\u02c8\3\2\2\2\u02ca")
        buf.write("\u02c9\3\2\2\2\u02cb\u0083\3\2\2\2\u02cc\u02cd\5&\24\2")
        buf.write("\u02cd\u0085\3\2\2\2\u02ce\u02cf\7\4\2\2\u02cf\u02d0\5")
        buf.write("\u0088E\2\u02d0\u02d1\7\6\2\2\u02d1\u0087\3\2\2\2\u02d2")
        buf.write("\u02d3\bE\1\2\u02d3\u02d4\5\u008aF\2\u02d4\u02da\3\2\2")
        buf.write("\2\u02d5\u02d6\f\3\2\2\u02d6\u02d7\7\13\2\2\u02d7\u02d9")
        buf.write("\5\u008aF\2\u02d8\u02d5\3\2\2\2\u02d9\u02dc\3\2\2\2\u02da")
        buf.write("\u02d8\3\2\2\2\u02da\u02db\3\2\2\2\u02db\u0089\3\2\2\2")
        buf.write("\u02dc\u02da\3\2\2\2\u02dd\u02e0\5\u008cG\2\u02de\u02e0")
        buf.write("\5\u0126\u0094\2\u02df\u02dd\3\2\2\2\u02df\u02de\3\2\2")
        buf.write("\2\u02e0\u008b\3\2\2\2\u02e1\u02e2\7/\2\2\u02e2\u02e3")
        buf.write("\7\b\2\2\u02e3\u02e4\5\u008eH\2\u02e4\u02e5\7\t\2\2\u02e5")
        buf.write("\u008d\3\2\2\2\u02e6\u02e9\5 \21\2\u02e7\u02e8\7\13\2")
        buf.write("\2\u02e8\u02ea\5\u0090I\2\u02e9\u02e7\3\2\2\2\u02e9\u02ea")
        buf.write("\3\2\2\2\u02ea\u008f\3\2\2\2\u02eb\u02ee\5\u0126\u0094")
        buf.write("\2\u02ec\u02ee\5\u0092J\2\u02ed\u02eb\3\2\2\2\u02ed\u02ec")
        buf.write("\3\2\2\2\u02ee\u0091\3\2\2\2\u02ef\u02f4\5\u0094K\2\u02f0")
        buf.write("\u02f4\5\u0096L\2\u02f1\u02f4\5\u0098M\2\u02f2\u02f4\5")
        buf.write("\u009aN\2\u02f3\u02ef\3\2\2\2\u02f3\u02f0\3\2\2\2\u02f3")
        buf.write("\u02f1\3\2\2\2\u02f3\u02f2\3\2\2\2\u02f4\u0093\3\2\2\2")
        buf.write("\u02f5\u02f6\7\b\2\2\u02f6\u02f7\7\60\2\2\u02f7\u02f8")
        buf.write("\7\13\2\2\u02f8\u02f9\5(\25\2\u02f9\u02fa\7\t\2\2\u02fa")
        buf.write("\u0095\3\2\2\2\u02fb\u02fc\7\b\2\2\u02fc\u02fd\7\61\2")
        buf.write("\2\u02fd\u02fe\7\13\2\2\u02fe\u02ff\5(\25\2\u02ff\u0300")
        buf.write("\7\13\2\2\u0300\u0301\5(\25\2\u0301\u0302\7\13\2\2\u0302")
        buf.write("\u0303\5(\25\2\u0303\u0304\7\t\2\2\u0304\u0097\3\2\2\2")
        buf.write("\u0305\u0306\7\b\2\2\u0306\u0307\7\62\2\2\u0307\u0308")
        buf.write("\7\13\2\2\u0308\u0309\5(\25\2\u0309\u030a\7\13\2\2\u030a")
        buf.write("\u030b\5(\25\2\u030b\u030c\7\13\2\2\u030c\u030d\5(\25")
        buf.write("\2\u030d\u030e\7\t\2\2\u030e\u0099\3\2\2\2\u030f\u0310")
        buf.write("\7\b\2\2\u0310\u0311\7\63\2\2\u0311\u0312\7\13\2\2\u0312")
        buf.write("\u0313\5(\25\2\u0313\u0314\7\13\2\2\u0314\u0315\5(\25")
        buf.write("\2\u0315\u0316\7\13\2\2\u0316\u0317\5(\25\2\u0317\u0318")
        buf.write("\7\t\2\2\u0318\u009b\3\2\2\2\u0319\u031e\5\u0126\u0094")
        buf.write("\2\u031a\u031e\5\u009eP\2\u031b\u031c\7\4\2\2\u031c\u031e")
        buf.write("\7\6\2\2\u031d\u0319\3\2\2\2\u031d\u031a\3\2\2\2\u031d")
        buf.write("\u031b\3\2\2\2\u031e\u009d\3\2\2\2\u031f\u0320\7\64\2")
        buf.write("\2\u0320\u0321\7\b\2\2\u0321\u0322\5\u00a0Q\2\u0322\u0323")
        buf.write("\7\t\2\2\u0323\u009f\3\2\2\2\u0324\u0325\5\u00a4S\2\u0325")
        buf.write("\u0326\7\13\2\2\u0326\u0327\5\u00a2R\2\u0327\u00a1\3\2")
        buf.write("\2\2\u0328\u032b\5\u0126\u0094\2\u0329\u032b\5\u00a8U")
        buf.write("\2\u032a\u0328\3\2\2\2\u032a\u0329\3\2\2\2\u032b\u00a3")
        buf.write("\3\2\2\2\u032c\u032f\5\u00a6T\2\u032d\u032f\5\u0126\u0094")
        buf.write("\2\u032e\u032c\3\2\2\2\u032e\u032d\3\2\2\2\u032f\u00a5")
        buf.write("\3\2\2\2\u0330\u0331\7X\2\2\u0331\u00a7\3\2\2\2\u0332")
        buf.write("\u0333\7\4\2\2\u0333\u0334\5\u00aaV\2\u0334\u0335\7\6")
        buf.write("\2\2\u0335\u00a9\3\2\2\2\u0336\u0337\bV\1\2\u0337\u0338")
        buf.write("\5\u00acW\2\u0338\u033e\3\2\2\2\u0339\u033a\f\3\2\2\u033a")
        buf.write("\u033b\7\13\2\2\u033b\u033d\5\u00acW\2\u033c\u0339\3\2")
        buf.write("\2\2\u033d\u0340\3\2\2\2\u033e\u033c\3\2\2\2\u033e\u033f")
        buf.write("\3\2\2\2\u033f\u00ab\3\2\2\2\u0340\u033e\3\2\2\2\u0341")
        buf.write("\u0344\5\u0126\u0094\2\u0342\u0344\5\u00aeX\2\u0343\u0341")
        buf.write("\3\2\2\2\u0343\u0342\3\2\2\2\u0344\u00ad\3\2\2\2\u0345")
        buf.write("\u0346\5\u00b0Y\2\u0346\u0347\7\65\2\2\u0347\u0348\5\u00b2")
        buf.write("Z\2\u0348\u034e\3\2\2\2\u0349\u034a\5\u00b0Y\2\u034a\u034b")
        buf.write("\7\65\2\2\u034b\u034c\5\u00b4[\2\u034c\u034e\3\2\2\2\u034d")
        buf.write("\u0345\3\2\2\2\u034d\u0349\3\2\2\2\u034e\u00af\3\2\2\2")
        buf.write("\u034f\u0355\7\66\2\2\u0350\u0355\7\67\2\2\u0351\u0355")
        buf.write("\78\2\2\u0352\u0355\79\2\2\u0353\u0355\7:\2\2\u0354\u034f")
        buf.write("\3\2\2\2\u0354\u0350\3\2\2\2\u0354\u0351\3\2\2\2\u0354")
        buf.write("\u0352\3\2\2\2\u0354\u0353\3\2\2\2\u0355\u00b1\3\2\2\2")
        buf.write("\u0356\u0359\5*\26\2\u0357\u0359\5\u0126\u0094\2\u0358")
        buf.write("\u0356\3\2\2\2\u0358\u0357\3\2\2\2\u0359\u00b3\3\2\2\2")
        buf.write("\u035a\u035d\5\u00b6\\\2\u035b\u035d\5\u0126\u0094\2\u035c")
        buf.write("\u035a\3\2\2\2\u035c\u035b\3\2\2\2\u035d\u00b5\3\2\2\2")
        buf.write("\u035e\u0362\7;\2\2\u035f\u0362\7<\2\2\u0360\u0362\7=")
        buf.write("\2\2\u0361\u035e\3\2\2\2\u0361\u035f\3\2\2\2\u0361\u0360")
        buf.write("\3\2\2\2\u0362\u00b7\3\2\2\2\u0363\u0364\7\4\2\2\u0364")
        buf.write("\u0365\5\u00ba^\2\u0365\u0366\7\6\2\2\u0366\u00b9\3\2")
        buf.write("\2\2\u0367\u0368\5\u00bc_\2\u0368\u0369\7\13\2\2\u0369")
        buf.write("\u036a\5\u00c6d\2\u036a\u00bb\3\2\2\2\u036b\u0370\5\u00be")
        buf.write("`\2\u036c\u036d\7\13\2\2\u036d\u036f\5\u00be`\2\u036e")
        buf.write("\u036c\3\2\2\2\u036f\u0372\3\2\2\2\u0370\u036e\3\2\2\2")
        buf.write("\u0370\u0371\3\2\2\2\u0371\u00bd\3\2\2\2\u0372\u0370\3")
        buf.write("\2\2\2\u0373\u0376\5\u0126\u0094\2\u0374\u0376\5\u00c0")
        buf.write("a\2\u0375\u0373\3\2\2\2\u0375\u0374\3\2\2\2\u0376\u00bf")
        buf.write("\3\2\2\2\u0377\u0378\7>\2\2\u0378\u0379\7\b\2\2\u0379")
        buf.write("\u037a\5\u00c2b\2\u037a\u037b\7\13\2\2\u037b\u037c\t\2")
        buf.write("\2\2\u037c\u037d\7\13\2\2\u037d\u037e\t\2\2\2\u037e\u037f")
        buf.write("\7\13\2\2\u037f\u0380\t\2\2\2\u0380\u0381\7\t\2\2\u0381")
        buf.write("\u00c1\3\2\2\2\u0382\u0385\5\u00c4c\2\u0383\u0385\5\u0126")
        buf.write("\u0094\2\u0384\u0382\3\2\2\2\u0384\u0383\3\2\2\2\u0385")
        buf.write("\u00c3\3\2\2\2\u0386\u0388\7V\2\2\u0387\u0386\3\2\2\2")
        buf.write("\u0387\u0388\3\2\2\2\u0388\u0389\3\2\2\2\u0389\u038a\5")
        buf.write(",\27\2\u038a\u00c5\3\2\2\2\u038b\u038c\bd\1\2\u038c\u038d")
        buf.write("\5\u00c8e\2\u038d\u0393\3\2\2\2\u038e\u038f\f\3\2\2\u038f")
        buf.write("\u0390\7\13\2\2\u0390\u0392\5\u00c8e\2\u0391\u038e\3\2")
        buf.write("\2\2\u0392\u0395\3\2\2\2\u0393\u0391\3\2\2\2\u0393\u0394")
        buf.write("\3\2\2\2\u0394\u00c7\3\2\2\2\u0395\u0393\3\2\2\2\u0396")
        buf.write("\u0399\5\u00caf\2\u0397\u0399\5\u0126\u0094\2\u0398\u0396")
        buf.write("\3\2\2\2\u0398\u0397\3\2\2\2\u0399\u00c9\3\2\2\2\u039a")
        buf.write("\u039b\7?\2\2\u039b\u039c\7\b\2\2\u039c\u039d\5\60\31")
        buf.write("\2\u039d\u039e\7\13\2\2\u039e\u039f\5\u00ccg\2\u039f\u03a0")
        buf.write("\7\t\2\2\u03a0\u00cb\3\2\2\2\u03a1\u03a4\5\u0126\u0094")
        buf.write("\2\u03a2\u03a4\5\u00ceh\2\u03a3\u03a1\3\2\2\2\u03a3\u03a2")
        buf.write("\3\2\2\2\u03a4\u00cd\3\2\2\2\u03a5\u03a6\7\b\2\2\u03a6")
        buf.write("\u03a7\5(\25\2\u03a7\u03a8\7\13\2\2\u03a8\u03a9\5(\25")
        buf.write("\2\u03a9\u03aa\7\t\2\2\u03aa\u00cf\3\2\2\2\u03ab\u03ac")
        buf.write("\7@\2\2\u03ac\u03ad\5\u00d2j\2\u03ad\u03ae\7A\2\2\u03ae")
        buf.write("\u03af\7B\2\2\u03af\u03b0\7\b\2\2\u03b0\u03b1\5\u0126")
        buf.write("\u0094\2\u03b1\u03b2\7\t\2\2\u03b2\u00d1\3\2\2\2\u03b3")
        buf.write("\u03b4\5\u0126\u0094\2\u03b4\u00d3\3\2\2\2\u03b5\u03b6")
        buf.write("\5\u00d2j\2\u03b6\u03b7\7C\2\2\u03b7\u03b8\7D\2\2\u03b8")
        buf.write("\u03b9\5\u00d6l\2\u03b9\u00d5\3\2\2\2\u03ba\u03bb\bl\1")
        buf.write("\2\u03bb\u03bc\5\u00d8m\2\u03bc\u03c2\3\2\2\2\u03bd\u03be")
        buf.write("\f\3\2\2\u03be\u03bf\7E\2\2\u03bf\u03c1\5\u00d8m\2\u03c0")
        buf.write("\u03bd\3\2\2\2\u03c1\u03c4\3\2\2\2\u03c2\u03c0\3\2\2\2")
        buf.write("\u03c2\u03c3\3\2\2\2\u03c3\u00d7\3\2\2\2\u03c4\u03c2\3")
        buf.write("\2\2\2\u03c5\u03c8\5\u00dan\2\u03c6\u03c8\5\u00fa~\2\u03c7")
        buf.write("\u03c5\3\2\2\2\u03c7\u03c6\3\2\2\2\u03c8\u00d9\3\2\2\2")
        buf.write("\u03c9\u03ca\5\u00dco\2\u03ca\u03cb\7E\2\2\u03cb\u03cc")
        buf.write("\5\u00eex\2\u03cc\u00db\3\2\2\2\u03cd\u03ce\5\u00dep\2")
        buf.write("\u03ce\u03cf\7F\2\2\u03cf\u03d0\5\u00ecw\2\u03d0\u00dd")
        buf.write("\3\2\2\2\u03d1\u03d4\5\u0126\u0094\2\u03d2\u03d4\5\u00e0")
        buf.write("q\2\u03d3\u03d1\3\2\2\2\u03d3\u03d2\3\2\2\2\u03d4\u00df")
        buf.write("\3\2\2\2\u03d5\u03d6\7G\2\2\u03d6\u03d7\7\b\2\2\u03d7")
        buf.write("\u03d8\5\u00e2r\2\u03d8\u03d9\7\13\2\2\u03d9\u03da\5\u00e6")
        buf.write("t\2\u03da\u03db\7\t\2\2\u03db\u00e1\3\2\2\2\u03dc\u03df")
        buf.write("\5\u0126\u0094\2\u03dd\u03df\5\u00e4s\2\u03de\u03dc\3")
        buf.write("\2\2\2\u03de\u03dd\3\2\2\2\u03df\u00e3\3\2\2\2\u03e0\u03e1")
        buf.write("\5\u00eav\2\u03e1\u03e2\7H\2\2\u03e2\u03e3\7I\2\2\u03e3")
        buf.write("\u03e4\7J\2\2\u03e4\u00e5\3\2\2\2\u03e5\u03e8\5\u0126")
        buf.write("\u0094\2\u03e6\u03e8\5\u00e8u\2\u03e7\u03e5\3\2\2\2\u03e7")
        buf.write("\u03e6\3\2\2\2\u03e8\u00e7\3\2\2\2\u03e9\u03ea\5\u00ea")
        buf.write("v\2\u03ea\u03eb\7H\2\2\u03eb\u03ec\7K\2\2\u03ec\u03ed")
        buf.write("\7J\2\2\u03ed\u03ee\7H\2\2\u03ee\u03ef\5\u0126\u0094\2")
        buf.write("\u03ef\u03f0\7J\2\2\u03f0\u00e9\3\2\2\2\u03f1\u03f2\5")
        buf.write("\u00d2j\2\u03f2\u03f3\7H\2\2\u03f3\u03f4\5,\27\2\u03f4")
        buf.write("\u03f5\7J\2\2\u03f5\u00eb\3\2\2\2\u03f6\u03f7\5(\25\2")
        buf.write("\u03f7\u00ed\3\2\2\2\u03f8\u03f9\5\u00f2z\2\u03f9\u03fa")
        buf.write("\7F\2\2\u03fa\u03fb\5\u00f0y\2\u03fb\u00ef\3\2\2\2\u03fc")
        buf.write("\u03fd\5(\25\2\u03fd\u00f1\3\2\2\2\u03fe\u0401\5\u0126")
        buf.write("\u0094\2\u03ff\u0401\5\u00f4{\2\u0400\u03fe\3\2\2\2\u0400")
        buf.write("\u03ff\3\2\2\2\u0401\u00f3\3\2\2\2\u0402\u0403\7L\2\2")
        buf.write("\u0403\u0404\7\b\2\2\u0404\u0405\5\u00f6|\2\u0405\u0406")
        buf.write("\7\13\2\2\u0406\u0407\5\u00e6t\2\u0407\u0408\7\t\2\2\u0408")
        buf.write("\u00f5\3\2\2\2\u0409\u040c\5\u0126\u0094\2\u040a\u040c")
        buf.write("\5\u00f8}\2\u040b\u0409\3\2\2\2\u040b\u040a\3\2\2\2\u040c")
        buf.write("\u00f7\3\2\2\2\u040d\u040e\5\u00eav\2\u040e\u040f\7H\2")
        buf.write("\2\u040f\u0410\7M\2\2\u0410\u0411\7J\2\2\u0411\u0412\7")
        buf.write("H\2\2\u0412\u0413\5\u0126\u0094\2\u0413\u0414\7J\2\2\u0414")
        buf.write("\u00f9\3\2\2\2\u0415\u0416\5\u00eav\2\u0416\u0417\7H\2")
        buf.write("\2\u0417\u0418\7M\2\2\u0418\u0419\7J\2\2\u0419\u041a\7")
        buf.write("H\2\2\u041a\u041b\7N\2\2\u041b\u041c\7J\2\2\u041c\u041d")
        buf.write("\5\u00fc\177\2\u041d\u00fb\3\2\2\2\u041e\u041f\7O\2\2")
        buf.write("\u041f\u0420\5\u00eav\2\u0420\u0421\7H\2\2\u0421\u0422")
        buf.write("\7K\2\2\u0422\u0423\7J\2\2\u0423\u0424\7H\2\2\u0424\u0425")
        buf.write("\7N\2\2\u0425\u0426\7J\2\2\u0426\u00fd\3\2\2\2\u0427\u0428")
        buf.write("\5\u00d2j\2\u0428\u0429\7C\2\2\u0429\u042a\7D\2\2\u042a")
        buf.write("\u042b\5\u0100\u0081\2\u042b\u00ff\3\2\2\2\u042c\u042d")
        buf.write("\b\u0081\1\2\u042d\u042e\5\u0102\u0082\2\u042e\u0434\3")
        buf.write("\2\2\2\u042f\u0430\f\3\2\2\u0430\u0431\7E\2\2\u0431\u0433")
        buf.write("\5\u0102\u0082\2\u0432\u042f\3\2\2\2\u0433\u0436\3\2\2")
        buf.write("\2\u0434\u0432\3\2\2\2\u0434\u0435\3\2\2\2\u0435\u0101")
        buf.write("\3\2\2\2\u0436\u0434\3\2\2\2\u0437\u0438\5\u00dan\2\u0438")
        buf.write("\u0439\7E\2\2\u0439\u043a\5\u0104\u0083\2\u043a\u0103")
        buf.write("\3\2\2\2\u043b\u043c\7G\2\2\u043c\u043d\7\b\2\2\u043d")
        buf.write("\u043e\5\u00e2r\2\u043e\u043f\7\13\2\2\u043f\u0440\5\u00f6")
        buf.write("|\2\u0440\u0441\7\t\2\2\u0441\u0442\7P\2\2\u0442\u0443")
        buf.write("\5\u0106\u0084\2\u0443\u0105\3\2\2\2\u0444\u0445\5*\26")
        buf.write("\2\u0445\u0107\3\2\2\2\u0446\u0447\5\u00d2j\2\u0447\u0448")
        buf.write("\7C\2\2\u0448\u0449\7D\2\2\u0449\u044a\5\u010a\u0086\2")
        buf.write("\u044a\u0109\3\2\2\2\u044b\u044c\7\b\2\2\u044c\u044d\5")
        buf.write("\u00fa~\2\u044d\u044e\7E\2\2\u044e\u044f\5\u010e\u0088")
        buf.write("\2\u044f\u0450\7\t\2\2\u0450\u0451\5\u010c\u0087\2\u0451")
        buf.write("\u010b\3\2\2\2\u0452\u0453\7\21\2\2\u0453\u0454\7\b\2")
        buf.write("\2\u0454\u0455\7Q\2\2\u0455\u0456\5\u0112\u008a\2\u0456")
        buf.write("\u0457\7&\2\2\u0457\u0458\7\b\2\2\u0458\u0459\5\u00fa")
        buf.write("~\2\u0459\u045a\7E\2\2\u045a\u045b\5\u0110\u0089\2\u045b")
        buf.write("\u045c\7\t\2\2\u045c\u045d\7\t\2\2\u045d\u010d\3\2\2\2")
        buf.write("\u045e\u045f\5\u00eav\2\u045f\u0460\7H\2\2\u0460\u0461")
        buf.write("\7N\2\2\u0461\u0462\7J\2\2\u0462\u0463\7O\2\2\u0463\u0464")
        buf.write("\7\36\2\2\u0464\u010f\3\2\2\2\u0465\u0466\5\u00eav\2\u0466")
        buf.write("\u0467\7H\2\2\u0467\u0468\7N\2\2\u0468\u0469\7J\2\2\u0469")
        buf.write("\u046a\7O\2\2\u046a\u046b\7\37\2\2\u046b\u0111\3\2\2\2")
        buf.write("\u046c\u046d\7R\2\2\u046d\u046e\7\b\2\2\u046e\u046f\5")
        buf.write("\u0114\u008b\2\u046f\u0470\7\t\2\2\u0470\u0113\3\2\2\2")
        buf.write("\u0471\u0472\5.\30\2\u0472\u0115\3\2\2\2\u0473\u0474\5")
        buf.write("\u00d2j\2\u0474\u0475\7C\2\2\u0475\u0476\7D\2\2\u0476")
        buf.write("\u0477\5\u0118\u008d\2\u0477\u0117\3\2\2\2\u0478\u0479")
        buf.write("\7\b\2\2\u0479\u047a\5\u00fa~\2\u047a\u047b\7E\2\2\u047b")
        buf.write("\u047c\5\u011c\u008f\2\u047c\u047d\7E\2\2\u047d\u047e")
        buf.write("\5\u011e\u0090\2\u047e\u047f\7\t\2\2\u047f\u0480\5\u011a")
        buf.write("\u008e\2\u0480\u0119\3\2\2\2\u0481\u0482\7\21\2\2\u0482")
        buf.write("\u0483\7S\2\2\u0483\u0484\7H\2\2\u0484\u0485\7\17\2\2")
        buf.write("\u0485\u0486\7\13\2\2\u0486\u0487\5\u0120\u0091\2\u0487")
        buf.write("\u0488\7J\2\2\u0488\u0489\7Q\2\2\u0489\u048a\5\u011e\u0090")
        buf.write("\2\u048a\u011b\3\2\2\2\u048b\u048c\5\u00eav\2\u048c\u048d")
        buf.write("\7H\2\2\u048d\u048e\7N\2\2\u048e\u048f\7J\2\2\u048f\u0490")
        buf.write("\7O\2\2\u0490\u0491\5\u00ccg\2\u0491\u011d\3\2\2\2\u0492")
        buf.write("\u0493\5\"\22\2\u0493\u0494\7T\2\2\u0494\u0495\5\u00ea")
        buf.write("v\2\u0495\u0496\7H\2\2\u0496\u0497\7N\2\2\u0497\u0498")
        buf.write("\7J\2\2\u0498\u0499\7H\2\2\u0499\u049a\7\17\2\2\u049a")
        buf.write("\u049b\7J\2\2\u049b\u04a7\3\2\2\2\u049c\u049d\5\"\22\2")
        buf.write("\u049d\u049e\7T\2\2\u049e\u049f\5\u00eav\2\u049f\u04a0")
        buf.write("\7H\2\2\u04a0\u04a1\7N\2\2\u04a1\u04a2\7J\2\2\u04a2\u04a3")
        buf.write("\7H\2\2\u04a3\u04a4\7\20\2\2\u04a4\u04a5\7J\2\2\u04a5")
        buf.write("\u04a7\3\2\2\2\u04a6\u0492\3\2\2\2\u04a6\u049c\3\2\2\2")
        buf.write("\u04a7\u011f\3\2\2\2\u04a8\u04a9\5(\25\2\u04a9\u0121\3")
        buf.write("\2\2\2\u04aa\u04ab\5\u0124\u0093\2\u04ab\u04ac\7\5\2\2")
        buf.write("\u04ac\u04ae\3\2\2\2\u04ad\u04aa\3\2\2\2\u04ae\u04b1\3")
        buf.write("\2\2\2\u04af\u04ad\3\2\2\2\u04af\u04b0\3\2\2\2\u04b0\u0123")
        buf.write("\3\2\2\2\u04b1\u04af\3\2\2\2\u04b2\u04b3\5\u0126\u0094")
        buf.write("\2\u04b3\u04b4\7A\2\2\u04b4\u04b5\5\4\3\2\u04b5\u0593")
        buf.write("\3\2\2\2\u04b6\u04b7\5\u0126\u0094\2\u04b7\u04b8\7A\2")
        buf.write("\2\u04b8\u04b9\5&\24\2\u04b9\u0593\3\2\2\2\u04ba\u04bb")
        buf.write("\5\u0126\u0094\2\u04bb\u04bc\7A\2\2\u04bc\u04bd\7U\2\2")
        buf.write("\u04bd\u0593\3\2\2\2\u04be\u04bf\5\u0126\u0094\2\u04bf")
        buf.write("\u04c0\7A\2\2\u04c0\u04c1\5\24\13\2\u04c1\u0593\3\2\2")
        buf.write("\2\u04c2\u04c3\5\u0126\u0094\2\u04c3\u04c4\7A\2\2\u04c4")
        buf.write("\u04c5\7\b\2\2\u04c5\u04c6\5\u0126\u0094\2\u04c6\u04c7")
        buf.write("\7\t\2\2\u04c7\u0593\3\2\2\2\u04c8\u04c9\5\u0126\u0094")
        buf.write("\2\u04c9\u04ca\7A\2\2\u04ca\u04cb\7\b\2\2\u04cb\u04cc")
        buf.write("\5\u0126\u0094\2\u04cc\u04cd\7\13\2\2\u04cd\u04ce\5\u0126")
        buf.write("\u0094\2\u04ce\u04cf\7\t\2\2\u04cf\u0593\3\2\2\2\u04d0")
        buf.write("\u04d1\5\u0126\u0094\2\u04d1\u04d2\7A\2\2\u04d2\u04d3")
        buf.write("\7\b\2\2\u04d3\u04d4\5\u0126\u0094\2\u04d4\u04d5\7\13")
        buf.write("\2\2\u04d5\u04d6\5\u0126\u0094\2\u04d6\u04d7\7\13\2\2")
        buf.write("\u04d7\u04d8\5\u0126\u0094\2\u04d8\u04d9\7\t\2\2\u04d9")
        buf.write("\u0593\3\2\2\2\u04da\u04db\5\u0126\u0094\2\u04db\u04dc")
        buf.write("\7A\2\2\u04dc\u04dd\5\32\16\2\u04dd\u0593\3\2\2\2\u04de")
        buf.write("\u04df\5\u0126\u0094\2\u04df\u04e0\7A\2\2\u04e0\u04e1")
        buf.write("\5B\"\2\u04e1\u0593\3\2\2\2\u04e2\u04e3\5\u0126\u0094")
        buf.write("\2\u04e3\u04e4\7A\2\2\u04e4\u04e5\5j\66\2\u04e5\u0593")
        buf.write("\3\2\2\2\u04e6\u04e7\5\u0126\u0094\2\u04e7\u04e8\7A\2")
        buf.write("\2\u04e8\u04e9\5\u0080A\2\u04e9\u0593\3\2\2\2\u04ea\u04eb")
        buf.write("\5\u0126\u0094\2\u04eb\u04ed\7A\2\2\u04ec\u04ee\5\36\20")
        buf.write("\2\u04ed\u04ec\3\2\2\2\u04ed\u04ee\3\2\2\2\u04ee\u04ef")
        buf.write("\3\2\2\2\u04ef\u04f0\7\b\2\2\u04f0\u04f1\5&\24\2\u04f1")
        buf.write("\u04f2\7\13\2\2\u04f2\u04f6\5&\24\2\u04f3\u04f4\7\13\2")
        buf.write("\2\u04f4\u04f5\7V\2\2\u04f5\u04f7\5&\24\2\u04f6\u04f3")
        buf.write("\3\2\2\2\u04f6\u04f7\3\2\2\2\u04f7\u04f8\3\2\2\2\u04f8")
        buf.write("\u04f9\7\t\2\2\u04f9\u0593\3\2\2\2\u04fa\u04fb\5\u0126")
        buf.write("\u0094\2\u04fb\u04fd\7A\2\2\u04fc\u04fe\5\36\20\2\u04fd")
        buf.write("\u04fc\3\2\2\2\u04fd\u04fe\3\2\2\2\u04fe\u04ff\3\2\2\2")
        buf.write("\u04ff\u0500\5\60\31\2\u0500\u0501\7\21\2\2\u0501\u0502")
        buf.write("\5&\24\2\u0502\u0593\3\2\2\2\u0503\u0504\5\u0126\u0094")
        buf.write("\2\u0504\u0505\7A\2\2\u0505\u0506\5\66\34\2\u0506\u0593")
        buf.write("\3\2\2\2\u0507\u0508\5\u0126\u0094\2\u0508\u0509\7A\2")
        buf.write("\2\u0509\u050a\5J&\2\u050a\u0593\3\2\2\2\u050b\u050c\5")
        buf.write("\u0126\u0094\2\u050c\u050d\7A\2\2\u050d\u050e\5N(\2\u050e")
        buf.write("\u0593\3\2\2\2\u050f\u0510\5\u0126\u0094\2\u0510\u0511")
        buf.write("\7A\2\2\u0511\u0512\5X-\2\u0512\u0593\3\2\2\2\u0513\u0514")
        buf.write("\5\u0126\u0094\2\u0514\u0515\7A\2\2\u0515\u0516\5b\62")
        buf.write("\2\u0516\u0593\3\2\2\2\u0517\u0518\5\u0126\u0094\2\u0518")
        buf.write("\u0519\7A\2\2\u0519\u051a\5f\64\2\u051a\u0593\3\2\2\2")
        buf.write("\u051b\u051c\5\u0126\u0094\2\u051c\u051d\7A\2\2\u051d")
        buf.write("\u051e\5j\66\2\u051e\u0593\3\2\2\2\u051f\u0520\5\u0126")
        buf.write("\u0094\2\u0520\u0521\7A\2\2\u0521\u0522\7\4\2\2\u0522")
        buf.write("\u0527\5\u0126\u0094\2\u0523\u0524\7\13\2\2\u0524\u0526")
        buf.write("\5\u0126\u0094\2\u0525\u0523\3\2\2\2\u0526\u0529\3\2\2")
        buf.write("\2\u0527\u0525\3\2\2\2\u0527\u0528\3\2\2\2\u0528\u052a")
        buf.write("\3\2\2\2\u0529\u0527\3\2\2\2\u052a\u052b\7\6\2\2\u052b")
        buf.write("\u0593\3\2\2\2\u052c\u052d\5\u0126\u0094\2\u052d\u052e")
        buf.write("\7A\2\2\u052e\u052f\5p9\2\u052f\u0593\3\2\2\2\u0530\u0531")
        buf.write("\5\u0126\u0094\2\u0531\u0532\7A\2\2\u0532\u0533\5T+\2")
        buf.write("\u0533\u0593\3\2\2\2\u0534\u0535\5\u0126\u0094\2\u0535")
        buf.write("\u0536\7A\2\2\u0536\u0537\5\u0086D\2\u0537\u0593\3\2\2")
        buf.write("\2\u0538\u0539\5\u0126\u0094\2\u0539\u053a\7A\2\2\u053a")
        buf.write("\u053b\5\u00a8U\2\u053b\u0593\3\2\2\2\u053c\u053d\5\u0126")
        buf.write("\u0094\2\u053d\u053e\7A\2\2\u053e\u053f\5\u00b8]\2\u053f")
        buf.write("\u0593\3\2\2\2\u0540\u0541\5\u0126\u0094\2\u0541\u0542")
        buf.write("\7A\2\2\u0542\u0543\5v<\2\u0543\u0593\3\2\2\2\u0544\u0545")
        buf.write("\5\u0126\u0094\2\u0545\u0546\7A\2\2\u0546\u0547\5\u008c")
        buf.write("G\2\u0547\u0593\3\2\2\2\u0548\u0549\5\u0126\u0094\2\u0549")
        buf.write("\u054a\7A\2\2\u054a\u054b\5\u0092J\2\u054b\u0593\3\2\2")
        buf.write("\2\u054c\u054d\5\u0126\u0094\2\u054d\u054e\7A\2\2\u054e")
        buf.write("\u054f\5\u009eP\2\u054f\u0593\3\2\2\2\u0550\u0551\5\u0126")
        buf.write("\u0094\2\u0551\u0552\7A\2\2\u0552\u0553\5\u00a6T\2\u0553")
        buf.write("\u0593\3\2\2\2\u0554\u0555\5\u0126\u0094\2\u0555\u0556")
        buf.write("\7A\2\2\u0556\u0557\5\u00aeX\2\u0557\u0593\3\2\2\2\u0558")
        buf.write("\u0559\5\u0126\u0094\2\u0559\u055a\7A\2\2\u055a\u055b")
        buf.write("\5\u00b6\\\2\u055b\u0593\3\2\2\2\u055c\u055d\5\u0126\u0094")
        buf.write("\2\u055d\u055e\7A\2\2\u055e\u055f\5\u00c0a\2\u055f\u0593")
        buf.write("\3\2\2\2\u0560\u0561\5\u0126\u0094\2\u0561\u0562\7A\2")
        buf.write("\2\u0562\u0563\5\u00caf\2\u0563\u0593\3\2\2\2\u0564\u0593")
        buf.write("\5\u00d0i\2\u0565\u0566\5\u00d2j\2\u0566\u0567\7C\2\2")
        buf.write("\u0567\u0568\7D\2\2\u0568\u0569\5\u0126\u0094\2\u0569")
        buf.write("\u0593\3\2\2\2\u056a\u0593\5\u00d4k\2\u056b\u0593\5\u00fe")
        buf.write("\u0080\2\u056c\u0593\5\u0108\u0085\2\u056d\u0593\5\u0116")
        buf.write("\u008c\2\u056e\u056f\5\u0126\u0094\2\u056f\u0570\7A\2")
        buf.write("\2\u0570\u0571\5\u00d6l\2\u0571\u0593\3\2\2\2\u0572\u0573")
        buf.write("\5\u0126\u0094\2\u0573\u0574\7A\2\2\u0574\u0575\5\u0100")
        buf.write("\u0081\2\u0575\u0593\3\2\2\2\u0576\u0577\5\u0126\u0094")
        buf.write("\2\u0577\u0578\7A\2\2\u0578\u0579\5\u010a\u0086\2\u0579")
        buf.write("\u0593\3\2\2\2\u057a\u057b\5\u0126\u0094\2\u057b\u057c")
        buf.write("\7A\2\2\u057c\u057d\5\u0118\u008d\2\u057d\u0593\3\2\2")
        buf.write("\2\u057e\u057f\5\u0126\u0094\2\u057f\u0580\7A\2\2\u0580")
        buf.write("\u0581\5\u00e8u\2\u0581\u0593\3\2\2\2\u0582\u0583\5\u0126")
        buf.write("\u0094\2\u0583\u0584\7A\2\2\u0584\u0585\5\u00e0q\2\u0585")
        buf.write("\u0593\3\2\2\2\u0586\u0587\5\u0126\u0094\2\u0587\u0588")
        buf.write("\7A\2\2\u0588\u0589\5\u00e4s\2\u0589\u0593\3\2\2\2\u058a")
        buf.write("\u058b\5\u0126\u0094\2\u058b\u058c\7A\2\2\u058c\u058d")
        buf.write("\5\u00f4{\2\u058d\u0593\3\2\2\2\u058e\u058f\5\u0126\u0094")
        buf.write("\2\u058f\u0590\7A\2\2\u0590\u0591\5\u00f8}\2\u0591\u0593")
        buf.write("\3\2\2\2\u0592\u04b2\3\2\2\2\u0592\u04b6\3\2\2\2\u0592")
        buf.write("\u04ba\3\2\2\2\u0592\u04be\3\2\2\2\u0592\u04c2\3\2\2\2")
        buf.write("\u0592\u04c8\3\2\2\2\u0592\u04d0\3\2\2\2\u0592\u04da\3")
        buf.write("\2\2\2\u0592\u04de\3\2\2\2\u0592\u04e2\3\2\2\2\u0592\u04e6")
        buf.write("\3\2\2\2\u0592\u04ea\3\2\2\2\u0592\u04fa\3\2\2\2\u0592")
        buf.write("\u0503\3\2\2\2\u0592\u0507\3\2\2\2\u0592\u050b\3\2\2\2")
        buf.write("\u0592\u050f\3\2\2\2\u0592\u0513\3\2\2\2\u0592\u0517\3")
        buf.write("\2\2\2\u0592\u051b\3\2\2\2\u0592\u051f\3\2\2\2\u0592\u052c")
        buf.write("\3\2\2\2\u0592\u0530\3\2\2\2\u0592\u0534\3\2\2\2\u0592")
        buf.write("\u0538\3\2\2\2\u0592\u053c\3\2\2\2\u0592\u0540\3\2\2\2")
        buf.write("\u0592\u0544\3\2\2\2\u0592\u0548\3\2\2\2\u0592\u054c\3")
        buf.write("\2\2\2\u0592\u0550\3\2\2\2\u0592\u0554\3\2\2\2\u0592\u0558")
        buf.write("\3\2\2\2\u0592\u055c\3\2\2\2\u0592\u0560\3\2\2\2\u0592")
        buf.write("\u0564\3\2\2\2\u0592\u0565\3\2\2\2\u0592\u056a\3\2\2\2")
        buf.write("\u0592\u056b\3\2\2\2\u0592\u056c\3\2\2\2\u0592\u056d\3")
        buf.write("\2\2\2\u0592\u056e\3\2\2\2\u0592\u0572\3\2\2\2\u0592\u0576")
        buf.write("\3\2\2\2\u0592\u057a\3\2\2\2\u0592\u057e\3\2\2\2\u0592")
        buf.write("\u0582\3\2\2\2\u0592\u0586\3\2\2\2\u0592\u058a\3\2\2\2")
        buf.write("\u0592\u058e\3\2\2\2\u0593\u0125\3\2\2\2\u0594\u0595\t")
        buf.write("\3\2\2\u0595\u0127\3\2\2\2d\u012a\u0142\u0148\u014e\u0154")
        buf.write("\u0160\u0166\u0172\u0176\u0180\u0184\u0188\u018b\u0192")
        buf.write("\u0196\u019a\u019f\u01a5\u01ac\u01b5\u01bd\u01c1\u01c7")
        buf.write("\u01cd\u01d1\u01d5\u01da\u01e2\u01ef\u01f3\u01f7\u0201")
        buf.write("\u0205\u0209\u020d\u0218\u021c\u0220\u0227\u0237\u0241")
        buf.write("\u024b\u024f\u0253\u0255\u0259\u025d\u0268\u0271\u027f")
        buf.write("\u0288\u0296\u029b\u02aa\u02ae\u02b2\u02b4\u02b8\u02bc")
        buf.write("\u02c0\u02ca\u02da\u02df\u02e9\u02ed\u02f3\u031d\u032a")
        buf.write("\u032e\u033e\u0343\u034d\u0354\u0358\u035c\u0361\u0370")
        buf.write("\u0375\u0384\u0387\u0393\u0398\u03a3\u03c2\u03c7\u03d3")
        buf.write("\u03de\u03e7\u0400\u040b\u0434\u04a6\u04af\u04ed\u04f6")
        buf.write("\u04fd\u0527\u0592")
        return buf.getvalue()


class AVScenariosParser ( Parser ):

    grammarFileName = "AVScenarios.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'CreateScenario'", "'{'", "';'", "'}'", 
                     "'load'", "'('", "')'", "'AV'", "','", "'IMU'", "'ENU'", 
                     "'WGS84'", "'0'", "'1'", "'->'", "'related to'", "'deg'", 
                     "'rad'", "'lane'", "'EGO'", "'car'", "'bus'", "'Van'", 
                     "'truck'", "'bicycle'", "'motorbicycle'", "'tricycle'", 
                     "'red'", "'green'", "'blue'", "'black'", "'white'", 
                     "'Vehicle'", "'uniform'", "'Uniform'", "'U'", "'u'", 
                     "'Waypoint'", "'W'", "'WP'", "'waypoint'", "'w'", "'wp'", 
                     "'Pedestrian'", "'Obstacle'", "'sphere'", "'box'", 
                     "'cone'", "'cylinder'", "'Environment'", "':'", "'sunny'", 
                     "'rain'", "'snow'", "'fog'", "'wetness'", "'light'", 
                     "'middle'", "'heavy'", "'Intersection'", "'SpeedLimit'", 
                     "'Trace'", "'='", "'EXE'", "'|='", "'G'", "'&'", "'<='", 
                     "'dis'", "'['", "'ego'", "']'", "'truth'", "'diff'", 
                     "'perception'", "'traffic'", "'=='", "'>='", "'~'", 
                     "'norm'", "'F'", "'<'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "String", "Signal", 
                      "Variable_name", "Time", "Rgb_color", "Non_negative_value", 
                      "Non_negative_number", "WS", "LINE_COMMENT", "BLOCK_COMMENT" ]

    RULE_scenarios = 0
    RULE_scenario = 1
    RULE_npc_vehicles_parameter = 2
    RULE_pedestrians_parameter = 3
    RULE_obstacles_parameter = 4
    RULE_traffic_parameter = 5
    RULE_map_parameter = 6
    RULE_map_name = 7
    RULE_ego_parameter = 8
    RULE_ego_vehicle = 9
    RULE_parameter_list_ego = 10
    RULE_state_parameter = 11
    RULE_state_ = 12
    RULE_position = 13
    RULE_coordinate_frame = 14
    RULE_position_parameter = 15
    RULE_speed_parameter = 16
    RULE_speed = 17
    RULE_real_value = 18
    RULE_non_negative_real_value = 19
    RULE_float_value = 20
    RULE_number_value = 21
    RULE_coordinate = 22
    RULE_laneID_parameter = 23
    RULE_laneID = 24
    RULE_heading_parameter = 25
    RULE_heading = 26
    RULE_unit = 27
    RULE_direction = 28
    RULE_predefined_direction = 29
    RULE_customized_direction = 30
    RULE_vehicle_type_parameter = 31
    RULE_vehicle_type = 32
    RULE_type_parameter = 33
    RULE_type_ = 34
    RULE_specific_type = 35
    RULE_general_type = 36
    RULE_color_parameter = 37
    RULE_color = 38
    RULE_color_list = 39
    RULE_rgb_color = 40
    RULE_npc_vehicles = 41
    RULE_multi_npc_vehicles = 42
    RULE_npc_vehicle = 43
    RULE_npc_vehicle_parameter = 44
    RULE_parameter_list_npc = 45
    RULE_vehicle_motion_parameter = 46
    RULE_vehicle_motion = 47
    RULE_uniform_motion = 48
    RULE_uniform_index = 49
    RULE_waypoint_motion = 50
    RULE_state_list_parameter = 51
    RULE_state_list = 52
    RULE_multi_states = 53
    RULE_waypoint_index = 54
    RULE_pedestrians = 55
    RULE_multiple_pedestrians = 56
    RULE_pedestrian_parameter = 57
    RULE_pedestrian = 58
    RULE_parameter_list_ped = 59
    RULE_pedestrian_motion_parameter = 60
    RULE_pedestrian_motion = 61
    RULE_pedestrian_type_parameter = 62
    RULE_pedestrian_type = 63
    RULE_height_parameter = 64
    RULE_height = 65
    RULE_obstacles = 66
    RULE_multiple_obstacles = 67
    RULE_obstacle_parameter = 68
    RULE_obstacle = 69
    RULE_parameter_list_obs = 70
    RULE_shape_parameter = 71
    RULE_shape = 72
    RULE_sphere = 73
    RULE_box = 74
    RULE_cone = 75
    RULE_cylinder = 76
    RULE_env_parameter = 77
    RULE_env = 78
    RULE_parameter_list_env = 79
    RULE_weather_parameter = 80
    RULE_time_parameter = 81
    RULE_time = 82
    RULE_weather = 83
    RULE_multi_weathers = 84
    RULE_weather_statement_parameter = 85
    RULE_weather_statement = 86
    RULE_kind = 87
    RULE_weather_continuous_index_parameter = 88
    RULE_weather_discrete_level_parameter = 89
    RULE_weather_discrete_level = 90
    RULE_traffic = 91
    RULE_traffic_statement = 92
    RULE_intersection_traffic = 93
    RULE_meta_intersection_traffic_parameter = 94
    RULE_meta_intersection_traffic = 95
    RULE_intersection_ID_parameter = 96
    RULE_intersection_ID = 97
    RULE_lane_traffic = 98
    RULE_speed_limitation_parameter = 99
    RULE_speed_limitation = 100
    RULE_speed_range_parameter = 101
    RULE_speed_range = 102
    RULE_trace_assignment = 103
    RULE_trace_identifier = 104
    RULE_detection_assertion = 105
    RULE_detection_statement = 106
    RULE_single_detection = 107
    RULE_agent_detection = 108
    RULE_agent_visible_statement = 109
    RULE_agent_ground_distance_parameter = 110
    RULE_agent_ground_distance = 111
    RULE_ego_state_parameter = 112
    RULE_ego_state = 113
    RULE_agent_ground_truth_parameter = 114
    RULE_agent_ground_truth = 115
    RULE_trace_state = 116
    RULE_sensing_range = 117
    RULE_agent_error_statement = 118
    RULE_error_threshold = 119
    RULE_agent_error_parameter = 120
    RULE_agent_error = 121
    RULE_agent_state_parameter = 122
    RULE_agent_state = 123
    RULE_traffic_detection = 124
    RULE_trace_detection_right = 125
    RULE_safety_assertion = 126
    RULE_safety_statement = 127
    RULE_single_safety_statement = 128
    RULE_agent_safety_statement = 129
    RULE_safety_radius = 130
    RULE_intersection_assertion = 131
    RULE_red_light_statement = 132
    RULE_red_light_statement_right = 133
    RULE_red_light = 134
    RULE_green_light = 135
    RULE_ego_speed = 136
    RULE_ego_velocity = 137
    RULE_speed_constraint_assertion = 138
    RULE_speed_statement = 139
    RULE_speed_statement_right = 140
    RULE_speed_limitation_checking = 141
    RULE_speed_violation = 142
    RULE_time_duration = 143
    RULE_assignment_statements = 144
    RULE_assignment_statement = 145
    RULE_identifier = 146

    ruleNames =  [ "scenarios", "scenario", "npc_vehicles_parameter", "pedestrians_parameter", 
                   "obstacles_parameter", "traffic_parameter", "map_parameter", 
                   "map_name", "ego_parameter", "ego_vehicle", "parameter_list_ego", 
                   "state_parameter", "state_", "position", "coordinate_frame", 
                   "position_parameter", "speed_parameter", "speed", "real_value", 
                   "non_negative_real_value", "float_value", "number_value", 
                   "coordinate", "laneID_parameter", "laneID", "heading_parameter", 
                   "heading", "unit", "direction", "predefined_direction", 
                   "customized_direction", "vehicle_type_parameter", "vehicle_type", 
                   "type_parameter", "type_", "specific_type", "general_type", 
                   "color_parameter", "color", "color_list", "rgb_color", 
                   "npc_vehicles", "multi_npc_vehicles", "npc_vehicle", 
                   "npc_vehicle_parameter", "parameter_list_npc", "vehicle_motion_parameter", 
                   "vehicle_motion", "uniform_motion", "uniform_index", 
                   "waypoint_motion", "state_list_parameter", "state_list", 
                   "multi_states", "waypoint_index", "pedestrians", "multiple_pedestrians", 
                   "pedestrian_parameter", "pedestrian", "parameter_list_ped", 
                   "pedestrian_motion_parameter", "pedestrian_motion", "pedestrian_type_parameter", 
                   "pedestrian_type", "height_parameter", "height", "obstacles", 
                   "multiple_obstacles", "obstacle_parameter", "obstacle", 
                   "parameter_list_obs", "shape_parameter", "shape", "sphere", 
                   "box", "cone", "cylinder", "env_parameter", "env", "parameter_list_env", 
                   "weather_parameter", "time_parameter", "time", "weather", 
                   "multi_weathers", "weather_statement_parameter", "weather_statement", 
                   "kind", "weather_continuous_index_parameter", "weather_discrete_level_parameter", 
                   "weather_discrete_level", "traffic", "traffic_statement", 
                   "intersection_traffic", "meta_intersection_traffic_parameter", 
                   "meta_intersection_traffic", "intersection_ID_parameter", 
                   "intersection_ID", "lane_traffic", "speed_limitation_parameter", 
                   "speed_limitation", "speed_range_parameter", "speed_range", 
                   "trace_assignment", "trace_identifier", "detection_assertion", 
                   "detection_statement", "single_detection", "agent_detection", 
                   "agent_visible_statement", "agent_ground_distance_parameter", 
                   "agent_ground_distance", "ego_state_parameter", "ego_state", 
                   "agent_ground_truth_parameter", "agent_ground_truth", 
                   "trace_state", "sensing_range", "agent_error_statement", 
                   "error_threshold", "agent_error_parameter", "agent_error", 
                   "agent_state_parameter", "agent_state", "traffic_detection", 
                   "trace_detection_right", "safety_assertion", "safety_statement", 
                   "single_safety_statement", "agent_safety_statement", 
                   "safety_radius", "intersection_assertion", "red_light_statement", 
                   "red_light_statement_right", "red_light", "green_light", 
                   "ego_speed", "ego_velocity", "speed_constraint_assertion", 
                   "speed_statement", "speed_statement_right", "speed_limitation_checking", 
                   "speed_violation", "time_duration", "assignment_statements", 
                   "assignment_statement", "identifier" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    String=83
    Signal=84
    Variable_name=85
    Time=86
    Rgb_color=87
    Non_negative_value=88
    Non_negative_number=89
    WS=90
    LINE_COMMENT=91
    BLOCK_COMMENT=92

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.8")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ScenariosContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_scenarios

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class EntryContext(ScenariosContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.ScenariosContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def assignment_statements(self):
            return self.getTypedRuleContext(AVScenariosParser.Assignment_statementsContext,0)

        def EOF(self):
            return self.getToken(AVScenariosParser.EOF, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEntry" ):
                listener.enterEntry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEntry" ):
                listener.exitEntry(self)



    def scenarios(self):

        localctx = AVScenariosParser.ScenariosContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_scenarios)
        try:
            localctx = AVScenariosParser.EntryContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 294
            self.assignment_statements()
            self.state = 296
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.state = 295
                self.match(AVScenariosParser.EOF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScenarioContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_scenario

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Create_scenarioContext(ScenarioContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.ScenarioContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def map_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.Map_parameterContext,0)

        def ego_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.Ego_parameterContext,0)

        def npc_vehicles_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.Npc_vehicles_parameterContext,0)

        def pedestrians_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.Pedestrians_parameterContext,0)

        def obstacles_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.Obstacles_parameterContext,0)

        def env_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.Env_parameterContext,0)

        def traffic_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.Traffic_parameterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_scenario" ):
                listener.enterCreate_scenario(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_scenario" ):
                listener.exitCreate_scenario(self)



    def scenario(self):

        localctx = AVScenariosParser.ScenarioContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_scenario)
        try:
            localctx = AVScenariosParser.Create_scenarioContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 298
            self.match(AVScenariosParser.T__0)
            self.state = 299
            self.match(AVScenariosParser.T__1)
            self.state = 300
            self.map_parameter()
            self.state = 301
            self.match(AVScenariosParser.T__2)
            self.state = 302
            self.ego_parameter()
            self.state = 303
            self.match(AVScenariosParser.T__2)
            self.state = 304
            self.npc_vehicles_parameter()
            self.state = 305
            self.match(AVScenariosParser.T__2)
            self.state = 306
            self.pedestrians_parameter()
            self.state = 307
            self.match(AVScenariosParser.T__2)
            self.state = 308
            self.obstacles_parameter()
            self.state = 309
            self.match(AVScenariosParser.T__2)
            self.state = 310
            self.env_parameter()
            self.state = 311
            self.match(AVScenariosParser.T__2)
            self.state = 312
            self.traffic_parameter()
            self.state = 313
            self.match(AVScenariosParser.T__2)
            self.state = 314
            self.match(AVScenariosParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Npc_vehicles_parameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_npc_vehicles_parameter

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Npc_varContext(Npc_vehicles_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Npc_vehicles_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNpc_var" ):
                listener.enterNpc_var(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNpc_var" ):
                listener.exitNpc_var(self)


    class Npc_emptyContext(Npc_vehicles_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Npc_vehicles_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNpc_empty" ):
                listener.enterNpc_empty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNpc_empty" ):
                listener.exitNpc_empty(self)


    class Npc_npcContext(Npc_vehicles_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Npc_vehicles_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def npc_vehicles(self):
            return self.getTypedRuleContext(AVScenariosParser.Npc_vehiclesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNpc_npc" ):
                listener.enterNpc_npc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNpc_npc" ):
                listener.exitNpc_npc(self)



    def npc_vehicles_parameter(self):

        localctx = AVScenariosParser.Npc_vehicles_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_npc_vehicles_parameter)
        try:
            self.state = 320
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                localctx = AVScenariosParser.Npc_varContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 316
                self.identifier()
                pass

            elif la_ == 2:
                localctx = AVScenariosParser.Npc_npcContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 317
                self.npc_vehicles()
                pass

            elif la_ == 3:
                localctx = AVScenariosParser.Npc_emptyContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 318
                self.match(AVScenariosParser.T__1)
                self.state = 319
                self.match(AVScenariosParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pedestrians_parameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_pedestrians_parameter

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Pedestrians_emptyContext(Pedestrians_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Pedestrians_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPedestrians_empty" ):
                listener.enterPedestrians_empty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPedestrians_empty" ):
                listener.exitPedestrians_empty(self)


    class Pedestrians_pedContext(Pedestrians_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Pedestrians_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def pedestrians(self):
            return self.getTypedRuleContext(AVScenariosParser.PedestriansContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPedestrians_ped" ):
                listener.enterPedestrians_ped(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPedestrians_ped" ):
                listener.exitPedestrians_ped(self)


    class Pedestrians_varContext(Pedestrians_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Pedestrians_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPedestrians_var" ):
                listener.enterPedestrians_var(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPedestrians_var" ):
                listener.exitPedestrians_var(self)



    def pedestrians_parameter(self):

        localctx = AVScenariosParser.Pedestrians_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_pedestrians_parameter)
        try:
            self.state = 326
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                localctx = AVScenariosParser.Pedestrians_varContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 322
                self.identifier()
                pass

            elif la_ == 2:
                localctx = AVScenariosParser.Pedestrians_pedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 323
                self.pedestrians()
                pass

            elif la_ == 3:
                localctx = AVScenariosParser.Pedestrians_emptyContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 324
                self.match(AVScenariosParser.T__1)
                self.state = 325
                self.match(AVScenariosParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Obstacles_parameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_obstacles_parameter

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Obstacles_emptyContext(Obstacles_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Obstacles_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObstacles_empty" ):
                listener.enterObstacles_empty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObstacles_empty" ):
                listener.exitObstacles_empty(self)


    class Obstacles_obsContext(Obstacles_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Obstacles_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def obstacles(self):
            return self.getTypedRuleContext(AVScenariosParser.ObstaclesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObstacles_obs" ):
                listener.enterObstacles_obs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObstacles_obs" ):
                listener.exitObstacles_obs(self)


    class Obstacles_varContext(Obstacles_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Obstacles_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObstacles_var" ):
                listener.enterObstacles_var(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObstacles_var" ):
                listener.exitObstacles_var(self)



    def obstacles_parameter(self):

        localctx = AVScenariosParser.Obstacles_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_obstacles_parameter)
        try:
            self.state = 332
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                localctx = AVScenariosParser.Obstacles_varContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 328
                self.identifier()
                pass

            elif la_ == 2:
                localctx = AVScenariosParser.Obstacles_obsContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 329
                self.obstacles()
                pass

            elif la_ == 3:
                localctx = AVScenariosParser.Obstacles_emptyContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 330
                self.match(AVScenariosParser.T__1)
                self.state = 331
                self.match(AVScenariosParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Traffic_parameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_traffic_parameter

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Traffic_traContext(Traffic_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Traffic_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def traffic(self):
            return self.getTypedRuleContext(AVScenariosParser.TrafficContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraffic_tra" ):
                listener.enterTraffic_tra(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraffic_tra" ):
                listener.exitTraffic_tra(self)


    class Traffic_varContext(Traffic_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Traffic_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraffic_var" ):
                listener.enterTraffic_var(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraffic_var" ):
                listener.exitTraffic_var(self)


    class Traffic_emptyContext(Traffic_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Traffic_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraffic_empty" ):
                listener.enterTraffic_empty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraffic_empty" ):
                listener.exitTraffic_empty(self)



    def traffic_parameter(self):

        localctx = AVScenariosParser.Traffic_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_traffic_parameter)
        try:
            self.state = 338
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                localctx = AVScenariosParser.Traffic_varContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 334
                self.identifier()
                pass

            elif la_ == 2:
                localctx = AVScenariosParser.Traffic_traContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 335
                self.traffic()
                pass

            elif la_ == 3:
                localctx = AVScenariosParser.Traffic_emptyContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 336
                self.match(AVScenariosParser.T__1)
                self.state = 337
                self.match(AVScenariosParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Map_parameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_map_parameter

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Map_load_nameContext(Map_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Map_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def map_name(self):
            return self.getTypedRuleContext(AVScenariosParser.Map_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMap_load_name" ):
                listener.enterMap_load_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMap_load_name" ):
                listener.exitMap_load_name(self)


    class Map_load_varContext(Map_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Map_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMap_load_var" ):
                listener.enterMap_load_var(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMap_load_var" ):
                listener.exitMap_load_var(self)



    def map_parameter(self):

        localctx = AVScenariosParser.Map_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_map_parameter)
        try:
            self.state = 350
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                localctx = AVScenariosParser.Map_load_nameContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 340
                self.match(AVScenariosParser.T__4)
                self.state = 341
                self.match(AVScenariosParser.T__5)
                self.state = 342
                self.map_name()
                self.state = 343
                self.match(AVScenariosParser.T__6)
                pass

            elif la_ == 2:
                localctx = AVScenariosParser.Map_load_varContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 345
                self.match(AVScenariosParser.T__4)
                self.state = 346
                self.match(AVScenariosParser.T__5)
                self.state = 347
                self.identifier()
                self.state = 348
                self.match(AVScenariosParser.T__6)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Map_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_map_name

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Map_name_strContext(Map_nameContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Map_nameContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def String(self):
            return self.getToken(AVScenariosParser.String, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMap_name_str" ):
                listener.enterMap_name_str(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMap_name_str" ):
                listener.exitMap_name_str(self)



    def map_name(self):

        localctx = AVScenariosParser.Map_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_map_name)
        try:
            localctx = AVScenariosParser.Map_name_strContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 352
            self.match(AVScenariosParser.String)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ego_parameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_ego_parameter

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Ego_ego_vehicleContext(Ego_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Ego_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ego_vehicle(self):
            return self.getTypedRuleContext(AVScenariosParser.Ego_vehicleContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEgo_ego_vehicle" ):
                listener.enterEgo_ego_vehicle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEgo_ego_vehicle" ):
                listener.exitEgo_ego_vehicle(self)


    class Ego_ego_varContext(Ego_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Ego_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEgo_ego_var" ):
                listener.enterEgo_ego_var(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEgo_ego_var" ):
                listener.exitEgo_ego_var(self)



    def ego_parameter(self):

        localctx = AVScenariosParser.Ego_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_ego_parameter)
        try:
            self.state = 356
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                localctx = AVScenariosParser.Ego_ego_vehicleContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 354
                self.ego_vehicle()
                pass

            elif la_ == 2:
                localctx = AVScenariosParser.Ego_ego_varContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 355
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ego_vehicleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_ego_vehicle

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Ego_avContext(Ego_vehicleContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Ego_vehicleContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def parameter_list_ego(self):
            return self.getTypedRuleContext(AVScenariosParser.Parameter_list_egoContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEgo_av" ):
                listener.enterEgo_av(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEgo_av" ):
                listener.exitEgo_av(self)



    def ego_vehicle(self):

        localctx = AVScenariosParser.Ego_vehicleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_ego_vehicle)
        try:
            localctx = AVScenariosParser.Ego_avContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 358
            self.match(AVScenariosParser.T__7)
            self.state = 359
            self.match(AVScenariosParser.T__5)
            self.state = 360
            self.parameter_list_ego()
            self.state = 361
            self.match(AVScenariosParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_list_egoContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_parameter_list_ego

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Par_list_ego_Context(Parameter_list_egoContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Parameter_list_egoContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def state_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AVScenariosParser.State_parameterContext)
            else:
                return self.getTypedRuleContext(AVScenariosParser.State_parameterContext,i)

        def vehicle_type_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.Vehicle_type_parameterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPar_list_ego_" ):
                listener.enterPar_list_ego_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPar_list_ego_" ):
                listener.exitPar_list_ego_(self)



    def parameter_list_ego(self):

        localctx = AVScenariosParser.Parameter_list_egoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_parameter_list_ego)
        self._la = 0 # Token type
        try:
            localctx = AVScenariosParser.Par_list_ego_Context(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 363
            self.state_parameter()
            self.state = 364
            self.match(AVScenariosParser.T__8)
            self.state = 365
            self.state_parameter()
            self.state = 368
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==AVScenariosParser.T__8:
                self.state = 366
                self.match(AVScenariosParser.T__8)
                self.state = 367
                self.vehicle_type_parameter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class State_parameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_state_parameter

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class State_stateContext(State_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.State_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def state_(self):
            return self.getTypedRuleContext(AVScenariosParser.State_Context,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterState_state" ):
                listener.enterState_state(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitState_state" ):
                listener.exitState_state(self)


    class State_state_varContext(State_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.State_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterState_state_var" ):
                listener.enterState_state_var(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitState_state_var" ):
                listener.exitState_state_var(self)



    def state_parameter(self):

        localctx = AVScenariosParser.State_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_state_parameter)
        try:
            self.state = 372
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AVScenariosParser.T__5]:
                localctx = AVScenariosParser.State_stateContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 370
                self.state_()
                pass
            elif token in [AVScenariosParser.T__0, AVScenariosParser.T__4, AVScenariosParser.T__7, AVScenariosParser.T__9, AVScenariosParser.T__10, AVScenariosParser.T__11, AVScenariosParser.T__16, AVScenariosParser.T__17, AVScenariosParser.T__18, AVScenariosParser.T__19, AVScenariosParser.T__20, AVScenariosParser.T__21, AVScenariosParser.T__22, AVScenariosParser.T__23, AVScenariosParser.T__24, AVScenariosParser.T__25, AVScenariosParser.T__26, AVScenariosParser.T__32, AVScenariosParser.T__33, AVScenariosParser.T__34, AVScenariosParser.T__35, AVScenariosParser.T__36, AVScenariosParser.T__37, AVScenariosParser.T__38, AVScenariosParser.T__39, AVScenariosParser.T__40, AVScenariosParser.T__41, AVScenariosParser.T__42, AVScenariosParser.T__43, AVScenariosParser.T__44, AVScenariosParser.T__49, AVScenariosParser.T__59, AVScenariosParser.T__60, AVScenariosParser.T__63, AVScenariosParser.T__65, AVScenariosParser.T__68, AVScenariosParser.T__72, AVScenariosParser.T__73, AVScenariosParser.T__74, AVScenariosParser.T__75, AVScenariosParser.T__79, AVScenariosParser.T__80, AVScenariosParser.Variable_name]:
                localctx = AVScenariosParser.State_state_varContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 371
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class State_Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_state_

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class State_positionContext(State_Context):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.State_Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def position_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.Position_parameterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterState_position" ):
                listener.enterState_position(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitState_position" ):
                listener.exitState_position(self)


    class State_position_heading_speedContext(State_Context):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.State_Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def position_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.Position_parameterContext,0)

        def heading_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.Heading_parameterContext,0)

        def speed_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.Speed_parameterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterState_position_heading_speed" ):
                listener.enterState_position_heading_speed(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitState_position_heading_speed" ):
                listener.exitState_position_heading_speed(self)



    def state_(self):

        localctx = AVScenariosParser.State_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_state_)
        self._la = 0 # Token type
        try:
            self.state = 390
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                localctx = AVScenariosParser.State_positionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 374
                self.match(AVScenariosParser.T__5)
                self.state = 375
                self.position_parameter()
                self.state = 376
                self.match(AVScenariosParser.T__6)
                pass

            elif la_ == 2:
                localctx = AVScenariosParser.State_position_heading_speedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 378
                self.match(AVScenariosParser.T__5)
                self.state = 379
                self.position_parameter()
                self.state = 380
                self.match(AVScenariosParser.T__8)
                self.state = 382
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AVScenariosParser.T__0) | (1 << AVScenariosParser.T__4) | (1 << AVScenariosParser.T__7) | (1 << AVScenariosParser.T__9) | (1 << AVScenariosParser.T__10) | (1 << AVScenariosParser.T__11) | (1 << AVScenariosParser.T__12) | (1 << AVScenariosParser.T__13) | (1 << AVScenariosParser.T__16) | (1 << AVScenariosParser.T__17) | (1 << AVScenariosParser.T__18) | (1 << AVScenariosParser.T__19) | (1 << AVScenariosParser.T__20) | (1 << AVScenariosParser.T__21) | (1 << AVScenariosParser.T__22) | (1 << AVScenariosParser.T__23) | (1 << AVScenariosParser.T__24) | (1 << AVScenariosParser.T__25) | (1 << AVScenariosParser.T__26) | (1 << AVScenariosParser.T__32) | (1 << AVScenariosParser.T__33) | (1 << AVScenariosParser.T__34) | (1 << AVScenariosParser.T__35) | (1 << AVScenariosParser.T__36) | (1 << AVScenariosParser.T__37) | (1 << AVScenariosParser.T__38) | (1 << AVScenariosParser.T__39) | (1 << AVScenariosParser.T__40) | (1 << AVScenariosParser.T__41) | (1 << AVScenariosParser.T__42) | (1 << AVScenariosParser.T__43) | (1 << AVScenariosParser.T__44) | (1 << AVScenariosParser.T__49) | (1 << AVScenariosParser.T__59) | (1 << AVScenariosParser.T__60))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (AVScenariosParser.T__63 - 64)) | (1 << (AVScenariosParser.T__65 - 64)) | (1 << (AVScenariosParser.T__68 - 64)) | (1 << (AVScenariosParser.T__72 - 64)) | (1 << (AVScenariosParser.T__73 - 64)) | (1 << (AVScenariosParser.T__74 - 64)) | (1 << (AVScenariosParser.T__75 - 64)) | (1 << (AVScenariosParser.T__79 - 64)) | (1 << (AVScenariosParser.T__80 - 64)) | (1 << (AVScenariosParser.Signal - 64)) | (1 << (AVScenariosParser.Variable_name - 64)) | (1 << (AVScenariosParser.Non_negative_value - 64)) | (1 << (AVScenariosParser.Non_negative_number - 64)))) != 0):
                    self.state = 381
                    self.heading_parameter()


                self.state = 386
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AVScenariosParser.T__8:
                    self.state = 384
                    self.match(AVScenariosParser.T__8)
                    self.state = 385
                    self.speed_parameter()


                self.state = 388
                self.match(AVScenariosParser.T__6)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PositionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_position

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Pos_coor_coorContext(PositionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.PositionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def coordinate(self):
            return self.getTypedRuleContext(AVScenariosParser.CoordinateContext,0)

        def coordinate_frame(self):
            return self.getTypedRuleContext(AVScenariosParser.Coordinate_frameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPos_coor_coor" ):
                listener.enterPos_coor_coor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPos_coor_coor" ):
                listener.exitPos_coor_coor(self)



    def position(self):

        localctx = AVScenariosParser.PositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_position)
        try:
            localctx = AVScenariosParser.Pos_coor_coorContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 393
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 392
                self.coordinate_frame()


            self.state = 395
            self.coordinate()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coordinate_frameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_coordinate_frame

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Coor_imuContext(Coordinate_frameContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Coordinate_frameContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoor_imu" ):
                listener.enterCoor_imu(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoor_imu" ):
                listener.exitCoor_imu(self)


    class Coor_enuContext(Coordinate_frameContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Coordinate_frameContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoor_enu" ):
                listener.enterCoor_enu(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoor_enu" ):
                listener.exitCoor_enu(self)


    class Coor_wgs84Context(Coordinate_frameContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Coordinate_frameContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoor_wgs84" ):
                listener.enterCoor_wgs84(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoor_wgs84" ):
                listener.exitCoor_wgs84(self)



    def coordinate_frame(self):

        localctx = AVScenariosParser.Coordinate_frameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_coordinate_frame)
        try:
            self.state = 400
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AVScenariosParser.T__9]:
                localctx = AVScenariosParser.Coor_imuContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 397
                self.match(AVScenariosParser.T__9)
                pass
            elif token in [AVScenariosParser.T__10]:
                localctx = AVScenariosParser.Coor_enuContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 398
                self.match(AVScenariosParser.T__10)
                pass
            elif token in [AVScenariosParser.T__11]:
                localctx = AVScenariosParser.Coor_wgs84Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 399
                self.match(AVScenariosParser.T__11)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Position_parameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_position_parameter

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Pos_pos_varContext(Position_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Position_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPos_pos_var" ):
                listener.enterPos_pos_var(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPos_pos_var" ):
                listener.exitPos_pos_var(self)


    class Pos_posContext(Position_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Position_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def position(self):
            return self.getTypedRuleContext(AVScenariosParser.PositionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPos_pos" ):
                listener.enterPos_pos(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPos_pos" ):
                listener.exitPos_pos(self)



    def position_parameter(self):

        localctx = AVScenariosParser.Position_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_position_parameter)
        try:
            self.state = 404
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                localctx = AVScenariosParser.Pos_posContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 402
                self.position()
                pass

            elif la_ == 2:
                localctx = AVScenariosParser.Pos_pos_varContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 403
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Speed_parameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_speed_parameter

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Speed_speed_varContext(Speed_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Speed_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpeed_speed_var" ):
                listener.enterSpeed_speed_var(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpeed_speed_var" ):
                listener.exitSpeed_speed_var(self)


    class Speed_speedContext(Speed_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Speed_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def speed(self):
            return self.getTypedRuleContext(AVScenariosParser.SpeedContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpeed_speed" ):
                listener.enterSpeed_speed(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpeed_speed" ):
                listener.exitSpeed_speed(self)



    def speed_parameter(self):

        localctx = AVScenariosParser.Speed_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_speed_parameter)
        try:
            self.state = 408
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AVScenariosParser.T__12, AVScenariosParser.T__13, AVScenariosParser.Signal, AVScenariosParser.Non_negative_value, AVScenariosParser.Non_negative_number]:
                localctx = AVScenariosParser.Speed_speedContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 406
                self.speed()
                pass
            elif token in [AVScenariosParser.T__0, AVScenariosParser.T__4, AVScenariosParser.T__7, AVScenariosParser.T__9, AVScenariosParser.T__10, AVScenariosParser.T__11, AVScenariosParser.T__16, AVScenariosParser.T__17, AVScenariosParser.T__18, AVScenariosParser.T__19, AVScenariosParser.T__20, AVScenariosParser.T__21, AVScenariosParser.T__22, AVScenariosParser.T__23, AVScenariosParser.T__24, AVScenariosParser.T__25, AVScenariosParser.T__26, AVScenariosParser.T__32, AVScenariosParser.T__33, AVScenariosParser.T__34, AVScenariosParser.T__35, AVScenariosParser.T__36, AVScenariosParser.T__37, AVScenariosParser.T__38, AVScenariosParser.T__39, AVScenariosParser.T__40, AVScenariosParser.T__41, AVScenariosParser.T__42, AVScenariosParser.T__43, AVScenariosParser.T__44, AVScenariosParser.T__49, AVScenariosParser.T__59, AVScenariosParser.T__60, AVScenariosParser.T__63, AVScenariosParser.T__65, AVScenariosParser.T__68, AVScenariosParser.T__72, AVScenariosParser.T__73, AVScenariosParser.T__74, AVScenariosParser.T__75, AVScenariosParser.T__79, AVScenariosParser.T__80, AVScenariosParser.Variable_name]:
                localctx = AVScenariosParser.Speed_speed_varContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 407
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpeedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_speed

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Speed_rvContext(SpeedContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.SpeedContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def real_value(self):
            return self.getTypedRuleContext(AVScenariosParser.Real_valueContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpeed_rv" ):
                listener.enterSpeed_rv(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpeed_rv" ):
                listener.exitSpeed_rv(self)



    def speed(self):

        localctx = AVScenariosParser.SpeedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_speed)
        try:
            localctx = AVScenariosParser.Speed_rvContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 410
            self.real_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Real_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_real_value

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RvContext(Real_valueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Real_valueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def non_negative_real_value(self):
            return self.getTypedRuleContext(AVScenariosParser.Non_negative_real_valueContext,0)

        def Signal(self):
            return self.getToken(AVScenariosParser.Signal, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRv" ):
                listener.enterRv(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRv" ):
                listener.exitRv(self)



    def real_value(self):

        localctx = AVScenariosParser.Real_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_real_value)
        self._la = 0 # Token type
        try:
            localctx = AVScenariosParser.RvContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 413
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==AVScenariosParser.Signal:
                self.state = 412
                self.match(AVScenariosParser.Signal)


            self.state = 415
            self.non_negative_real_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Non_negative_real_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_non_negative_real_value

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Non_negative_rvContext(Non_negative_real_valueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Non_negative_real_valueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def float_value(self):
            return self.getTypedRuleContext(AVScenariosParser.Float_valueContext,0)

        def number_value(self):
            return self.getTypedRuleContext(AVScenariosParser.Number_valueContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNon_negative_rv" ):
                listener.enterNon_negative_rv(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNon_negative_rv" ):
                listener.exitNon_negative_rv(self)



    def non_negative_real_value(self):

        localctx = AVScenariosParser.Non_negative_real_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_non_negative_real_value)
        try:
            localctx = AVScenariosParser.Non_negative_rvContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 419
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AVScenariosParser.Non_negative_value]:
                self.state = 417
                self.float_value()
                pass
            elif token in [AVScenariosParser.T__12, AVScenariosParser.T__13, AVScenariosParser.Non_negative_number]:
                self.state = 418
                self.number_value()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Float_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_float_value

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Non_negative_floatContext(Float_valueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Float_valueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Non_negative_value(self):
            return self.getToken(AVScenariosParser.Non_negative_value, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNon_negative_float" ):
                listener.enterNon_negative_float(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNon_negative_float" ):
                listener.exitNon_negative_float(self)



    def float_value(self):

        localctx = AVScenariosParser.Float_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_float_value)
        try:
            localctx = AVScenariosParser.Non_negative_floatContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 421
            self.match(AVScenariosParser.Non_negative_value)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_number_value

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Non_negative_numberContext(Number_valueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Number_valueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Non_negative_number(self):
            return self.getToken(AVScenariosParser.Non_negative_number, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNon_negative_number" ):
                listener.enterNon_negative_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNon_negative_number" ):
                listener.exitNon_negative_number(self)


    class Non_negative_conflict_1Context(Number_valueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Number_valueContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNon_negative_conflict_1" ):
                listener.enterNon_negative_conflict_1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNon_negative_conflict_1" ):
                listener.exitNon_negative_conflict_1(self)


    class Non_negative_conflict_0Context(Number_valueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Number_valueContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNon_negative_conflict_0" ):
                listener.enterNon_negative_conflict_0(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNon_negative_conflict_0" ):
                listener.exitNon_negative_conflict_0(self)



    def number_value(self):

        localctx = AVScenariosParser.Number_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_number_value)
        try:
            self.state = 426
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AVScenariosParser.Non_negative_number]:
                localctx = AVScenariosParser.Non_negative_numberContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 423
                self.match(AVScenariosParser.Non_negative_number)
                pass
            elif token in [AVScenariosParser.T__12]:
                localctx = AVScenariosParser.Non_negative_conflict_0Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 424
                self.match(AVScenariosParser.T__12)
                pass
            elif token in [AVScenariosParser.T__13]:
                localctx = AVScenariosParser.Non_negative_conflict_1Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 425
                self.match(AVScenariosParser.T__13)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CoordinateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_coordinate

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Coor_rv_rvContext(CoordinateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.CoordinateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def real_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AVScenariosParser.Real_valueContext)
            else:
                return self.getTypedRuleContext(AVScenariosParser.Real_valueContext,i)

        def Signal(self):
            return self.getToken(AVScenariosParser.Signal, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoor_rv_rv" ):
                listener.enterCoor_rv_rv(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoor_rv_rv" ):
                listener.exitCoor_rv_rv(self)


    class Coor_laneID_rvContext(CoordinateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.CoordinateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def laneID_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.LaneID_parameterContext,0)

        def real_value(self):
            return self.getTypedRuleContext(AVScenariosParser.Real_valueContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoor_laneID_rv" ):
                listener.enterCoor_laneID_rv(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoor_laneID_rv" ):
                listener.exitCoor_laneID_rv(self)



    def coordinate(self):

        localctx = AVScenariosParser.CoordinateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_coordinate)
        self._la = 0 # Token type
        try:
            self.state = 443
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AVScenariosParser.T__5]:
                localctx = AVScenariosParser.Coor_rv_rvContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 428
                self.match(AVScenariosParser.T__5)
                self.state = 429
                self.real_value()
                self.state = 430
                self.match(AVScenariosParser.T__8)
                self.state = 431
                self.real_value()
                self.state = 435
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AVScenariosParser.T__8:
                    self.state = 432
                    self.match(AVScenariosParser.T__8)
                    self.state = 433
                    self.match(AVScenariosParser.Signal)
                    self.state = 434
                    self.real_value()


                self.state = 437
                self.match(AVScenariosParser.T__6)
                pass
            elif token in [AVScenariosParser.T__0, AVScenariosParser.T__4, AVScenariosParser.T__7, AVScenariosParser.T__9, AVScenariosParser.T__10, AVScenariosParser.T__11, AVScenariosParser.T__16, AVScenariosParser.T__17, AVScenariosParser.T__18, AVScenariosParser.T__19, AVScenariosParser.T__20, AVScenariosParser.T__21, AVScenariosParser.T__22, AVScenariosParser.T__23, AVScenariosParser.T__24, AVScenariosParser.T__25, AVScenariosParser.T__26, AVScenariosParser.T__32, AVScenariosParser.T__33, AVScenariosParser.T__34, AVScenariosParser.T__35, AVScenariosParser.T__36, AVScenariosParser.T__37, AVScenariosParser.T__38, AVScenariosParser.T__39, AVScenariosParser.T__40, AVScenariosParser.T__41, AVScenariosParser.T__42, AVScenariosParser.T__43, AVScenariosParser.T__44, AVScenariosParser.T__49, AVScenariosParser.T__59, AVScenariosParser.T__60, AVScenariosParser.T__63, AVScenariosParser.T__65, AVScenariosParser.T__68, AVScenariosParser.T__72, AVScenariosParser.T__73, AVScenariosParser.T__74, AVScenariosParser.T__75, AVScenariosParser.T__79, AVScenariosParser.T__80, AVScenariosParser.String, AVScenariosParser.Variable_name]:
                localctx = AVScenariosParser.Coor_laneID_rvContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 439
                self.laneID_parameter()
                self.state = 440
                self.match(AVScenariosParser.T__14)
                self.state = 441
                self.real_value()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LaneID_parameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_laneID_parameter

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class LaneID_laneIDContext(LaneID_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.LaneID_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def laneID(self):
            return self.getTypedRuleContext(AVScenariosParser.LaneIDContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLaneID_laneID" ):
                listener.enterLaneID_laneID(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLaneID_laneID" ):
                listener.exitLaneID_laneID(self)


    class LaneID_laneID_varContext(LaneID_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.LaneID_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLaneID_laneID_var" ):
                listener.enterLaneID_laneID_var(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLaneID_laneID_var" ):
                listener.exitLaneID_laneID_var(self)



    def laneID_parameter(self):

        localctx = AVScenariosParser.LaneID_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_laneID_parameter)
        try:
            self.state = 447
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AVScenariosParser.T__0, AVScenariosParser.T__4, AVScenariosParser.T__7, AVScenariosParser.T__9, AVScenariosParser.T__10, AVScenariosParser.T__11, AVScenariosParser.T__16, AVScenariosParser.T__17, AVScenariosParser.T__18, AVScenariosParser.T__19, AVScenariosParser.T__20, AVScenariosParser.T__21, AVScenariosParser.T__22, AVScenariosParser.T__23, AVScenariosParser.T__24, AVScenariosParser.T__25, AVScenariosParser.T__26, AVScenariosParser.T__32, AVScenariosParser.T__33, AVScenariosParser.T__34, AVScenariosParser.T__35, AVScenariosParser.T__36, AVScenariosParser.T__37, AVScenariosParser.T__38, AVScenariosParser.T__39, AVScenariosParser.T__40, AVScenariosParser.T__41, AVScenariosParser.T__42, AVScenariosParser.T__43, AVScenariosParser.T__44, AVScenariosParser.T__49, AVScenariosParser.T__59, AVScenariosParser.T__60, AVScenariosParser.T__63, AVScenariosParser.T__65, AVScenariosParser.T__68, AVScenariosParser.T__72, AVScenariosParser.T__73, AVScenariosParser.T__74, AVScenariosParser.T__75, AVScenariosParser.T__79, AVScenariosParser.T__80, AVScenariosParser.Variable_name]:
                localctx = AVScenariosParser.LaneID_laneID_varContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 445
                self.identifier()
                pass
            elif token in [AVScenariosParser.String]:
                localctx = AVScenariosParser.LaneID_laneIDContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 446
                self.laneID()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LaneIDContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_laneID

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class LaneID_strContext(LaneIDContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.LaneIDContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def String(self):
            return self.getToken(AVScenariosParser.String, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLaneID_str" ):
                listener.enterLaneID_str(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLaneID_str" ):
                listener.exitLaneID_str(self)



    def laneID(self):

        localctx = AVScenariosParser.LaneIDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_laneID)
        try:
            localctx = AVScenariosParser.LaneID_strContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 449
            self.match(AVScenariosParser.String)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Heading_parameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_heading_parameter

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Head_varContext(Heading_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Heading_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHead_var" ):
                listener.enterHead_var(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHead_var" ):
                listener.exitHead_var(self)


    class Head_headingContext(Heading_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Heading_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def heading(self):
            return self.getTypedRuleContext(AVScenariosParser.HeadingContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHead_heading" ):
                listener.enterHead_heading(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHead_heading" ):
                listener.exitHead_heading(self)



    def heading_parameter(self):

        localctx = AVScenariosParser.Heading_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_heading_parameter)
        try:
            self.state = 453
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AVScenariosParser.T__0, AVScenariosParser.T__4, AVScenariosParser.T__7, AVScenariosParser.T__9, AVScenariosParser.T__10, AVScenariosParser.T__11, AVScenariosParser.T__16, AVScenariosParser.T__17, AVScenariosParser.T__18, AVScenariosParser.T__19, AVScenariosParser.T__20, AVScenariosParser.T__21, AVScenariosParser.T__22, AVScenariosParser.T__23, AVScenariosParser.T__24, AVScenariosParser.T__25, AVScenariosParser.T__26, AVScenariosParser.T__32, AVScenariosParser.T__33, AVScenariosParser.T__34, AVScenariosParser.T__35, AVScenariosParser.T__36, AVScenariosParser.T__37, AVScenariosParser.T__38, AVScenariosParser.T__39, AVScenariosParser.T__40, AVScenariosParser.T__41, AVScenariosParser.T__42, AVScenariosParser.T__43, AVScenariosParser.T__44, AVScenariosParser.T__49, AVScenariosParser.T__59, AVScenariosParser.T__60, AVScenariosParser.T__63, AVScenariosParser.T__65, AVScenariosParser.T__68, AVScenariosParser.T__72, AVScenariosParser.T__73, AVScenariosParser.T__74, AVScenariosParser.T__75, AVScenariosParser.T__79, AVScenariosParser.T__80, AVScenariosParser.Variable_name]:
                localctx = AVScenariosParser.Head_varContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 451
                self.identifier()
                pass
            elif token in [AVScenariosParser.T__12, AVScenariosParser.T__13, AVScenariosParser.Signal, AVScenariosParser.Non_negative_value, AVScenariosParser.Non_negative_number]:
                localctx = AVScenariosParser.Head_headingContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 452
                self.heading()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HeadingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_heading

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Head_rvContext(HeadingContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.HeadingContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def real_value(self):
            return self.getTypedRuleContext(AVScenariosParser.Real_valueContext,0)

        def unit(self):
            return self.getTypedRuleContext(AVScenariosParser.UnitContext,0)

        def direction(self):
            return self.getTypedRuleContext(AVScenariosParser.DirectionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHead_rv" ):
                listener.enterHead_rv(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHead_rv" ):
                listener.exitHead_rv(self)



    def heading(self):

        localctx = AVScenariosParser.HeadingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_heading)
        self._la = 0 # Token type
        try:
            localctx = AVScenariosParser.Head_rvContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 455
            self.real_value()
            self.state = 456
            self.unit()
            self.state = 459
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==AVScenariosParser.T__15:
                self.state = 457
                self.match(AVScenariosParser.T__15)
                self.state = 458
                self.direction()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_unit

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Unit_degContext(UnitContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.UnitContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnit_deg" ):
                listener.enterUnit_deg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnit_deg" ):
                listener.exitUnit_deg(self)


    class Unit_radContext(UnitContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.UnitContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnit_rad" ):
                listener.enterUnit_rad(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnit_rad" ):
                listener.exitUnit_rad(self)



    def unit(self):

        localctx = AVScenariosParser.UnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_unit)
        try:
            self.state = 463
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AVScenariosParser.T__16]:
                localctx = AVScenariosParser.Unit_degContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 461
                self.match(AVScenariosParser.T__16)
                pass
            elif token in [AVScenariosParser.T__17]:
                localctx = AVScenariosParser.Unit_radContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 462
                self.match(AVScenariosParser.T__17)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_direction

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Direction_preContext(DirectionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.DirectionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predefined_direction(self):
            return self.getTypedRuleContext(AVScenariosParser.Predefined_directionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirection_pre" ):
                listener.enterDirection_pre(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirection_pre" ):
                listener.exitDirection_pre(self)


    class Direction_cusContext(DirectionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.DirectionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def customized_direction(self):
            return self.getTypedRuleContext(AVScenariosParser.Customized_directionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirection_cus" ):
                listener.enterDirection_cus(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirection_cus" ):
                listener.exitDirection_cus(self)



    def direction(self):

        localctx = AVScenariosParser.DirectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_direction)
        try:
            self.state = 467
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AVScenariosParser.T__18, AVScenariosParser.T__19]:
                localctx = AVScenariosParser.Direction_preContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 465
                self.predefined_direction()
                pass
            elif token in [AVScenariosParser.T__5]:
                localctx = AVScenariosParser.Direction_cusContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 466
                self.customized_direction()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Predefined_directionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_predefined_direction

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Pre_laneContext(Predefined_directionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Predefined_directionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def laneID_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.LaneID_parameterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_lane" ):
                listener.enterPre_lane(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_lane" ):
                listener.exitPre_lane(self)


    class Pre_egoContext(Predefined_directionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Predefined_directionContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_ego" ):
                listener.enterPre_ego(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_ego" ):
                listener.exitPre_ego(self)



    def predefined_direction(self):

        localctx = AVScenariosParser.Predefined_directionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_predefined_direction)
        try:
            self.state = 472
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AVScenariosParser.T__18]:
                localctx = AVScenariosParser.Pre_laneContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 469
                self.match(AVScenariosParser.T__18)
                self.state = 470
                self.laneID_parameter()
                pass
            elif token in [AVScenariosParser.T__19]:
                localctx = AVScenariosParser.Pre_egoContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 471
                self.match(AVScenariosParser.T__19)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Customized_directionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_customized_direction

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Cus_rv_rvContext(Customized_directionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Customized_directionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def real_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AVScenariosParser.Real_valueContext)
            else:
                return self.getTypedRuleContext(AVScenariosParser.Real_valueContext,i)

        def coordinate_frame(self):
            return self.getTypedRuleContext(AVScenariosParser.Coordinate_frameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCus_rv_rv" ):
                listener.enterCus_rv_rv(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCus_rv_rv" ):
                listener.exitCus_rv_rv(self)


    class Cus_rv_rv_rvContext(Customized_directionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Customized_directionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def real_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AVScenariosParser.Real_valueContext)
            else:
                return self.getTypedRuleContext(AVScenariosParser.Real_valueContext,i)

        def Signal(self):
            return self.getToken(AVScenariosParser.Signal, 0)
        def coordinate_frame(self):
            return self.getTypedRuleContext(AVScenariosParser.Coordinate_frameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCus_rv_rv_rv" ):
                listener.enterCus_rv_rv_rv(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCus_rv_rv_rv" ):
                listener.exitCus_rv_rv_rv(self)



    def customized_direction(self):

        localctx = AVScenariosParser.Customized_directionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_customized_direction)
        self._la = 0 # Token type
        try:
            self.state = 497
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                localctx = AVScenariosParser.Cus_rv_rvContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 474
                self.match(AVScenariosParser.T__5)
                self.state = 475
                self.real_value()
                self.state = 476
                self.match(AVScenariosParser.T__8)
                self.state = 477
                self.real_value()
                self.state = 480
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AVScenariosParser.T__8:
                    self.state = 478
                    self.match(AVScenariosParser.T__8)
                    self.state = 479
                    self.coordinate_frame()


                self.state = 482
                self.match(AVScenariosParser.T__6)
                pass

            elif la_ == 2:
                localctx = AVScenariosParser.Cus_rv_rv_rvContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 484
                self.match(AVScenariosParser.T__5)
                self.state = 485
                self.real_value()
                self.state = 486
                self.match(AVScenariosParser.T__8)
                self.state = 487
                self.real_value()
                self.state = 488
                self.match(AVScenariosParser.T__8)
                self.state = 489
                self.match(AVScenariosParser.Signal)
                self.state = 490
                self.real_value()
                self.state = 493
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AVScenariosParser.T__8:
                    self.state = 491
                    self.match(AVScenariosParser.T__8)
                    self.state = 492
                    self.coordinate_frame()


                self.state = 495
                self.match(AVScenariosParser.T__6)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vehicle_type_parameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_vehicle_type_parameter

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Vehicle_vehicle_type_varContext(Vehicle_type_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Vehicle_type_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVehicle_vehicle_type_var" ):
                listener.enterVehicle_vehicle_type_var(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVehicle_vehicle_type_var" ):
                listener.exitVehicle_vehicle_type_var(self)


    class Vehicle_vehicle_typeContext(Vehicle_type_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Vehicle_type_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def vehicle_type(self):
            return self.getTypedRuleContext(AVScenariosParser.Vehicle_typeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVehicle_vehicle_type" ):
                listener.enterVehicle_vehicle_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVehicle_vehicle_type" ):
                listener.exitVehicle_vehicle_type(self)



    def vehicle_type_parameter(self):

        localctx = AVScenariosParser.Vehicle_type_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_vehicle_type_parameter)
        try:
            self.state = 501
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AVScenariosParser.T__0, AVScenariosParser.T__4, AVScenariosParser.T__7, AVScenariosParser.T__9, AVScenariosParser.T__10, AVScenariosParser.T__11, AVScenariosParser.T__16, AVScenariosParser.T__17, AVScenariosParser.T__18, AVScenariosParser.T__19, AVScenariosParser.T__20, AVScenariosParser.T__21, AVScenariosParser.T__22, AVScenariosParser.T__23, AVScenariosParser.T__24, AVScenariosParser.T__25, AVScenariosParser.T__26, AVScenariosParser.T__32, AVScenariosParser.T__33, AVScenariosParser.T__34, AVScenariosParser.T__35, AVScenariosParser.T__36, AVScenariosParser.T__37, AVScenariosParser.T__38, AVScenariosParser.T__39, AVScenariosParser.T__40, AVScenariosParser.T__41, AVScenariosParser.T__42, AVScenariosParser.T__43, AVScenariosParser.T__44, AVScenariosParser.T__49, AVScenariosParser.T__59, AVScenariosParser.T__60, AVScenariosParser.T__63, AVScenariosParser.T__65, AVScenariosParser.T__68, AVScenariosParser.T__72, AVScenariosParser.T__73, AVScenariosParser.T__74, AVScenariosParser.T__75, AVScenariosParser.T__79, AVScenariosParser.T__80, AVScenariosParser.Variable_name]:
                localctx = AVScenariosParser.Vehicle_vehicle_type_varContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 499
                self.identifier()
                pass
            elif token in [AVScenariosParser.T__5]:
                localctx = AVScenariosParser.Vehicle_vehicle_typeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 500
                self.vehicle_type()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vehicle_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_vehicle_type

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Vehicle_type_colorContext(Vehicle_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Vehicle_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def type_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.Type_parameterContext,0)

        def color_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.Color_parameterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVehicle_type_color" ):
                listener.enterVehicle_type_color(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVehicle_type_color" ):
                listener.exitVehicle_type_color(self)


    class Vehicle_type_Context(Vehicle_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Vehicle_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def type_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.Type_parameterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVehicle_type_" ):
                listener.enterVehicle_type_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVehicle_type_" ):
                listener.exitVehicle_type_(self)



    def vehicle_type(self):

        localctx = AVScenariosParser.Vehicle_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_vehicle_type)
        self._la = 0 # Token type
        try:
            self.state = 515
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                localctx = AVScenariosParser.Vehicle_type_Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 503
                self.match(AVScenariosParser.T__5)
                self.state = 504
                self.type_parameter()
                self.state = 505
                self.match(AVScenariosParser.T__6)
                pass

            elif la_ == 2:
                localctx = AVScenariosParser.Vehicle_type_colorContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 507
                self.match(AVScenariosParser.T__5)
                self.state = 508
                self.type_parameter()
                self.state = 509
                self.match(AVScenariosParser.T__8)
                self.state = 511
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AVScenariosParser.T__0) | (1 << AVScenariosParser.T__4) | (1 << AVScenariosParser.T__7) | (1 << AVScenariosParser.T__9) | (1 << AVScenariosParser.T__10) | (1 << AVScenariosParser.T__11) | (1 << AVScenariosParser.T__16) | (1 << AVScenariosParser.T__17) | (1 << AVScenariosParser.T__18) | (1 << AVScenariosParser.T__19) | (1 << AVScenariosParser.T__20) | (1 << AVScenariosParser.T__21) | (1 << AVScenariosParser.T__22) | (1 << AVScenariosParser.T__23) | (1 << AVScenariosParser.T__24) | (1 << AVScenariosParser.T__25) | (1 << AVScenariosParser.T__26) | (1 << AVScenariosParser.T__27) | (1 << AVScenariosParser.T__28) | (1 << AVScenariosParser.T__29) | (1 << AVScenariosParser.T__30) | (1 << AVScenariosParser.T__31) | (1 << AVScenariosParser.T__32) | (1 << AVScenariosParser.T__33) | (1 << AVScenariosParser.T__34) | (1 << AVScenariosParser.T__35) | (1 << AVScenariosParser.T__36) | (1 << AVScenariosParser.T__37) | (1 << AVScenariosParser.T__38) | (1 << AVScenariosParser.T__39) | (1 << AVScenariosParser.T__40) | (1 << AVScenariosParser.T__41) | (1 << AVScenariosParser.T__42) | (1 << AVScenariosParser.T__43) | (1 << AVScenariosParser.T__44) | (1 << AVScenariosParser.T__49) | (1 << AVScenariosParser.T__59) | (1 << AVScenariosParser.T__60))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (AVScenariosParser.T__63 - 64)) | (1 << (AVScenariosParser.T__65 - 64)) | (1 << (AVScenariosParser.T__68 - 64)) | (1 << (AVScenariosParser.T__72 - 64)) | (1 << (AVScenariosParser.T__73 - 64)) | (1 << (AVScenariosParser.T__74 - 64)) | (1 << (AVScenariosParser.T__75 - 64)) | (1 << (AVScenariosParser.T__79 - 64)) | (1 << (AVScenariosParser.T__80 - 64)) | (1 << (AVScenariosParser.Variable_name - 64)) | (1 << (AVScenariosParser.Rgb_color - 64)))) != 0):
                    self.state = 510
                    self.color_parameter()


                self.state = 513
                self.match(AVScenariosParser.T__6)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_parameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_type_parameter

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Type_type_Context(Type_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Type_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def type_(self):
            return self.getTypedRuleContext(AVScenariosParser.Type_Context,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_type_" ):
                listener.enterType_type_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_type_" ):
                listener.exitType_type_(self)


    class Type_varContext(Type_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Type_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_var" ):
                listener.enterType_var(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_var" ):
                listener.exitType_var(self)



    def type_parameter(self):

        localctx = AVScenariosParser.Type_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_type_parameter)
        try:
            self.state = 519
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                localctx = AVScenariosParser.Type_varContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 517
                self.identifier()
                pass

            elif la_ == 2:
                localctx = AVScenariosParser.Type_type_Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 518
                self.type_()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_type_

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Type_generalContext(Type_Context):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Type_Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def general_type(self):
            return self.getTypedRuleContext(AVScenariosParser.General_typeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_general" ):
                listener.enterType_general(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_general" ):
                listener.exitType_general(self)


    class Type_specificContext(Type_Context):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Type_Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def specific_type(self):
            return self.getTypedRuleContext(AVScenariosParser.Specific_typeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_specific" ):
                listener.enterType_specific(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_specific" ):
                listener.exitType_specific(self)



    def type_(self):

        localctx = AVScenariosParser.Type_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_type_)
        try:
            self.state = 523
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AVScenariosParser.String]:
                localctx = AVScenariosParser.Type_specificContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 521
                self.specific_type()
                pass
            elif token in [AVScenariosParser.T__20, AVScenariosParser.T__21, AVScenariosParser.T__22, AVScenariosParser.T__23, AVScenariosParser.T__24, AVScenariosParser.T__25, AVScenariosParser.T__26]:
                localctx = AVScenariosParser.Type_generalContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 522
                self.general_type()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Specific_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_specific_type

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Specific_strContext(Specific_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Specific_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def String(self):
            return self.getToken(AVScenariosParser.String, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecific_str" ):
                listener.enterSpecific_str(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecific_str" ):
                listener.exitSpecific_str(self)



    def specific_type(self):

        localctx = AVScenariosParser.Specific_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_specific_type)
        try:
            localctx = AVScenariosParser.Specific_strContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 525
            self.match(AVScenariosParser.String)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class General_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_general_type

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class General_motorbicycleContext(General_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.General_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneral_motorbicycle" ):
                listener.enterGeneral_motorbicycle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneral_motorbicycle" ):
                listener.exitGeneral_motorbicycle(self)


    class General_truckContext(General_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.General_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneral_truck" ):
                listener.enterGeneral_truck(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneral_truck" ):
                listener.exitGeneral_truck(self)


    class General_bicycleContext(General_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.General_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneral_bicycle" ):
                listener.enterGeneral_bicycle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneral_bicycle" ):
                listener.exitGeneral_bicycle(self)


    class General_tricycleContext(General_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.General_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneral_tricycle" ):
                listener.enterGeneral_tricycle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneral_tricycle" ):
                listener.exitGeneral_tricycle(self)


    class General_carContext(General_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.General_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneral_car" ):
                listener.enterGeneral_car(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneral_car" ):
                listener.exitGeneral_car(self)


    class General_vanContext(General_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.General_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneral_van" ):
                listener.enterGeneral_van(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneral_van" ):
                listener.exitGeneral_van(self)


    class General_busContext(General_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.General_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneral_bus" ):
                listener.enterGeneral_bus(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneral_bus" ):
                listener.exitGeneral_bus(self)



    def general_type(self):

        localctx = AVScenariosParser.General_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_general_type)
        try:
            self.state = 534
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AVScenariosParser.T__20]:
                localctx = AVScenariosParser.General_carContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 527
                self.match(AVScenariosParser.T__20)
                pass
            elif token in [AVScenariosParser.T__21]:
                localctx = AVScenariosParser.General_busContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 528
                self.match(AVScenariosParser.T__21)
                pass
            elif token in [AVScenariosParser.T__22]:
                localctx = AVScenariosParser.General_vanContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 529
                self.match(AVScenariosParser.T__22)
                pass
            elif token in [AVScenariosParser.T__23]:
                localctx = AVScenariosParser.General_truckContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 530
                self.match(AVScenariosParser.T__23)
                pass
            elif token in [AVScenariosParser.T__24]:
                localctx = AVScenariosParser.General_bicycleContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 531
                self.match(AVScenariosParser.T__24)
                pass
            elif token in [AVScenariosParser.T__25]:
                localctx = AVScenariosParser.General_motorbicycleContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 532
                self.match(AVScenariosParser.T__25)
                pass
            elif token in [AVScenariosParser.T__26]:
                localctx = AVScenariosParser.General_tricycleContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 533
                self.match(AVScenariosParser.T__26)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Color_parameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_color_parameter

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Color_colorContext(Color_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Color_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def color(self):
            return self.getTypedRuleContext(AVScenariosParser.ColorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColor_color" ):
                listener.enterColor_color(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColor_color" ):
                listener.exitColor_color(self)


    class Color_varContext(Color_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Color_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColor_var" ):
                listener.enterColor_var(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColor_var" ):
                listener.exitColor_var(self)



    def color_parameter(self):

        localctx = AVScenariosParser.Color_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_color_parameter)
        try:
            self.state = 538
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AVScenariosParser.T__0, AVScenariosParser.T__4, AVScenariosParser.T__7, AVScenariosParser.T__9, AVScenariosParser.T__10, AVScenariosParser.T__11, AVScenariosParser.T__16, AVScenariosParser.T__17, AVScenariosParser.T__18, AVScenariosParser.T__19, AVScenariosParser.T__20, AVScenariosParser.T__21, AVScenariosParser.T__22, AVScenariosParser.T__23, AVScenariosParser.T__24, AVScenariosParser.T__25, AVScenariosParser.T__26, AVScenariosParser.T__32, AVScenariosParser.T__33, AVScenariosParser.T__34, AVScenariosParser.T__35, AVScenariosParser.T__36, AVScenariosParser.T__37, AVScenariosParser.T__38, AVScenariosParser.T__39, AVScenariosParser.T__40, AVScenariosParser.T__41, AVScenariosParser.T__42, AVScenariosParser.T__43, AVScenariosParser.T__44, AVScenariosParser.T__49, AVScenariosParser.T__59, AVScenariosParser.T__60, AVScenariosParser.T__63, AVScenariosParser.T__65, AVScenariosParser.T__68, AVScenariosParser.T__72, AVScenariosParser.T__73, AVScenariosParser.T__74, AVScenariosParser.T__75, AVScenariosParser.T__79, AVScenariosParser.T__80, AVScenariosParser.Variable_name]:
                localctx = AVScenariosParser.Color_varContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 536
                self.identifier()
                pass
            elif token in [AVScenariosParser.T__27, AVScenariosParser.T__28, AVScenariosParser.T__29, AVScenariosParser.T__30, AVScenariosParser.T__31, AVScenariosParser.Rgb_color]:
                localctx = AVScenariosParser.Color_colorContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 537
                self.color()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_color

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Color_color_listContext(ColorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.ColorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def color_list(self):
            return self.getTypedRuleContext(AVScenariosParser.Color_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColor_color_list" ):
                listener.enterColor_color_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColor_color_list" ):
                listener.exitColor_color_list(self)


    class Color_rgb_colorContext(ColorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.ColorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def rgb_color(self):
            return self.getTypedRuleContext(AVScenariosParser.Rgb_colorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColor_rgb_color" ):
                listener.enterColor_rgb_color(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColor_rgb_color" ):
                listener.exitColor_rgb_color(self)



    def color(self):

        localctx = AVScenariosParser.ColorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_color)
        try:
            self.state = 542
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AVScenariosParser.T__27, AVScenariosParser.T__28, AVScenariosParser.T__29, AVScenariosParser.T__30, AVScenariosParser.T__31]:
                localctx = AVScenariosParser.Color_color_listContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 540
                self.color_list()
                pass
            elif token in [AVScenariosParser.Rgb_color]:
                localctx = AVScenariosParser.Color_rgb_colorContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 541
                self.rgb_color()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Color_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_color_list

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Color_blueContext(Color_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Color_listContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColor_blue" ):
                listener.enterColor_blue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColor_blue" ):
                listener.exitColor_blue(self)


    class Color_redContext(Color_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Color_listContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColor_red" ):
                listener.enterColor_red(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColor_red" ):
                listener.exitColor_red(self)


    class Color_whiteContext(Color_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Color_listContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColor_white" ):
                listener.enterColor_white(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColor_white" ):
                listener.exitColor_white(self)


    class Color_blackContext(Color_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Color_listContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColor_black" ):
                listener.enterColor_black(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColor_black" ):
                listener.exitColor_black(self)


    class Color_greenContext(Color_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Color_listContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColor_green" ):
                listener.enterColor_green(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColor_green" ):
                listener.exitColor_green(self)



    def color_list(self):

        localctx = AVScenariosParser.Color_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_color_list)
        try:
            self.state = 549
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AVScenariosParser.T__27]:
                localctx = AVScenariosParser.Color_redContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 544
                self.match(AVScenariosParser.T__27)
                pass
            elif token in [AVScenariosParser.T__28]:
                localctx = AVScenariosParser.Color_greenContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 545
                self.match(AVScenariosParser.T__28)
                pass
            elif token in [AVScenariosParser.T__29]:
                localctx = AVScenariosParser.Color_blueContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 546
                self.match(AVScenariosParser.T__29)
                pass
            elif token in [AVScenariosParser.T__30]:
                localctx = AVScenariosParser.Color_blackContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 547
                self.match(AVScenariosParser.T__30)
                pass
            elif token in [AVScenariosParser.T__31]:
                localctx = AVScenariosParser.Color_whiteContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 548
                self.match(AVScenariosParser.T__31)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rgb_colorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_rgb_color

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Rgb_rgbContext(Rgb_colorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Rgb_colorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Rgb_color(self):
            return self.getToken(AVScenariosParser.Rgb_color, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRgb_rgb" ):
                listener.enterRgb_rgb(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRgb_rgb" ):
                listener.exitRgb_rgb(self)



    def rgb_color(self):

        localctx = AVScenariosParser.Rgb_colorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_rgb_color)
        try:
            localctx = AVScenariosParser.Rgb_rgbContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 551
            self.match(AVScenariosParser.Rgb_color)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Npc_vehiclesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_npc_vehicles

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class NpcContext(Npc_vehiclesContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Npc_vehiclesContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def multi_npc_vehicles(self):
            return self.getTypedRuleContext(AVScenariosParser.Multi_npc_vehiclesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNpc" ):
                listener.enterNpc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNpc" ):
                listener.exitNpc(self)



    def npc_vehicles(self):

        localctx = AVScenariosParser.Npc_vehiclesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_npc_vehicles)
        try:
            localctx = AVScenariosParser.NpcContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 553
            self.match(AVScenariosParser.T__1)
            self.state = 554
            self.multi_npc_vehicles(0)
            self.state = 555
            self.match(AVScenariosParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Multi_npc_vehiclesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_multi_npc_vehicles

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Multi_multi_npcContext(Multi_npc_vehiclesContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Multi_npc_vehiclesContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def multi_npc_vehicles(self):
            return self.getTypedRuleContext(AVScenariosParser.Multi_npc_vehiclesContext,0)

        def npc_vehicle_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.Npc_vehicle_parameterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMulti_multi_npc" ):
                listener.enterMulti_multi_npc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMulti_multi_npc" ):
                listener.exitMulti_multi_npc(self)


    class Multi_npcContext(Multi_npc_vehiclesContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Multi_npc_vehiclesContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def npc_vehicle_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.Npc_vehicle_parameterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMulti_npc" ):
                listener.enterMulti_npc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMulti_npc" ):
                listener.exitMulti_npc(self)



    def multi_npc_vehicles(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = AVScenariosParser.Multi_npc_vehiclesContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 84
        self.enterRecursionRule(localctx, 84, self.RULE_multi_npc_vehicles, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = AVScenariosParser.Multi_npcContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 558
            self.npc_vehicle_parameter()
            self._ctx.stop = self._input.LT(-1)
            self.state = 565
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,39,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = AVScenariosParser.Multi_multi_npcContext(self, AVScenariosParser.Multi_npc_vehiclesContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_multi_npc_vehicles)
                    self.state = 560
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 561
                    self.match(AVScenariosParser.T__8)
                    self.state = 562
                    self.npc_vehicle_parameter() 
                self.state = 567
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,39,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Npc_vehicleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_npc_vehicle

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Npc_vehicle_parContext(Npc_vehicleContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Npc_vehicleContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def parameter_list_npc(self):
            return self.getTypedRuleContext(AVScenariosParser.Parameter_list_npcContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNpc_vehicle_par" ):
                listener.enterNpc_vehicle_par(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNpc_vehicle_par" ):
                listener.exitNpc_vehicle_par(self)



    def npc_vehicle(self):

        localctx = AVScenariosParser.Npc_vehicleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_npc_vehicle)
        try:
            localctx = AVScenariosParser.Npc_vehicle_parContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 568
            self.match(AVScenariosParser.T__32)
            self.state = 569
            self.match(AVScenariosParser.T__5)
            self.state = 570
            self.parameter_list_npc()
            self.state = 571
            self.match(AVScenariosParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Npc_vehicle_parameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_npc_vehicle_parameter

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Npc_npc_vehicle_varContext(Npc_vehicle_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Npc_vehicle_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNpc_npc_vehicle_var" ):
                listener.enterNpc_npc_vehicle_var(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNpc_npc_vehicle_var" ):
                listener.exitNpc_npc_vehicle_var(self)


    class Npc_npc_vehicleContext(Npc_vehicle_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Npc_vehicle_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def npc_vehicle(self):
            return self.getTypedRuleContext(AVScenariosParser.Npc_vehicleContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNpc_npc_vehicle" ):
                listener.enterNpc_npc_vehicle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNpc_npc_vehicle" ):
                listener.exitNpc_npc_vehicle(self)



    def npc_vehicle_parameter(self):

        localctx = AVScenariosParser.Npc_vehicle_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_npc_vehicle_parameter)
        try:
            self.state = 575
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                localctx = AVScenariosParser.Npc_npc_vehicleContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 573
                self.npc_vehicle()
                pass

            elif la_ == 2:
                localctx = AVScenariosParser.Npc_npc_vehicle_varContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 574
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_list_npcContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_parameter_list_npc

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Par_npc_state_vehicleContext(Parameter_list_npcContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Parameter_list_npcContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def state_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.State_parameterContext,0)

        def vehicle_motion_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.Vehicle_motion_parameterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPar_npc_state_vehicle" ):
                listener.enterPar_npc_state_vehicle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPar_npc_state_vehicle" ):
                listener.exitPar_npc_state_vehicle(self)


    class Par_npc_stateContext(Parameter_list_npcContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Parameter_list_npcContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def state_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.State_parameterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPar_npc_state" ):
                listener.enterPar_npc_state(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPar_npc_state" ):
                listener.exitPar_npc_state(self)


    class Par_npc_state_vehicle_stateContext(Parameter_list_npcContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Parameter_list_npcContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def state_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AVScenariosParser.State_parameterContext)
            else:
                return self.getTypedRuleContext(AVScenariosParser.State_parameterContext,i)

        def vehicle_motion_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.Vehicle_motion_parameterContext,0)

        def vehicle_type_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.Vehicle_type_parameterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPar_npc_state_vehicle_state" ):
                listener.enterPar_npc_state_vehicle_state(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPar_npc_state_vehicle_state" ):
                listener.exitPar_npc_state_vehicle_state(self)



    def parameter_list_npc(self):

        localctx = AVScenariosParser.Parameter_list_npcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_parameter_list_npc)
        self._la = 0 # Token type
        try:
            self.state = 595
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                localctx = AVScenariosParser.Par_npc_stateContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 577
                self.state_parameter()
                pass

            elif la_ == 2:
                localctx = AVScenariosParser.Par_npc_state_vehicleContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 578
                self.state_parameter()
                self.state = 579
                self.match(AVScenariosParser.T__8)
                self.state = 580
                self.vehicle_motion_parameter()
                pass

            elif la_ == 3:
                localctx = AVScenariosParser.Par_npc_state_vehicle_stateContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 582
                self.state_parameter()
                self.state = 583
                self.match(AVScenariosParser.T__8)
                self.state = 585
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AVScenariosParser.T__0) | (1 << AVScenariosParser.T__4) | (1 << AVScenariosParser.T__7) | (1 << AVScenariosParser.T__9) | (1 << AVScenariosParser.T__10) | (1 << AVScenariosParser.T__11) | (1 << AVScenariosParser.T__16) | (1 << AVScenariosParser.T__17) | (1 << AVScenariosParser.T__18) | (1 << AVScenariosParser.T__19) | (1 << AVScenariosParser.T__20) | (1 << AVScenariosParser.T__21) | (1 << AVScenariosParser.T__22) | (1 << AVScenariosParser.T__23) | (1 << AVScenariosParser.T__24) | (1 << AVScenariosParser.T__25) | (1 << AVScenariosParser.T__26) | (1 << AVScenariosParser.T__32) | (1 << AVScenariosParser.T__33) | (1 << AVScenariosParser.T__34) | (1 << AVScenariosParser.T__35) | (1 << AVScenariosParser.T__36) | (1 << AVScenariosParser.T__37) | (1 << AVScenariosParser.T__38) | (1 << AVScenariosParser.T__39) | (1 << AVScenariosParser.T__40) | (1 << AVScenariosParser.T__41) | (1 << AVScenariosParser.T__42) | (1 << AVScenariosParser.T__43) | (1 << AVScenariosParser.T__44) | (1 << AVScenariosParser.T__49) | (1 << AVScenariosParser.T__59) | (1 << AVScenariosParser.T__60))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (AVScenariosParser.T__63 - 64)) | (1 << (AVScenariosParser.T__65 - 64)) | (1 << (AVScenariosParser.T__68 - 64)) | (1 << (AVScenariosParser.T__72 - 64)) | (1 << (AVScenariosParser.T__73 - 64)) | (1 << (AVScenariosParser.T__74 - 64)) | (1 << (AVScenariosParser.T__75 - 64)) | (1 << (AVScenariosParser.T__79 - 64)) | (1 << (AVScenariosParser.T__80 - 64)) | (1 << (AVScenariosParser.Variable_name - 64)))) != 0):
                    self.state = 584
                    self.vehicle_motion_parameter()


                self.state = 587
                self.match(AVScenariosParser.T__8)
                self.state = 589
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AVScenariosParser.T__0) | (1 << AVScenariosParser.T__4) | (1 << AVScenariosParser.T__5) | (1 << AVScenariosParser.T__7) | (1 << AVScenariosParser.T__9) | (1 << AVScenariosParser.T__10) | (1 << AVScenariosParser.T__11) | (1 << AVScenariosParser.T__16) | (1 << AVScenariosParser.T__17) | (1 << AVScenariosParser.T__18) | (1 << AVScenariosParser.T__19) | (1 << AVScenariosParser.T__20) | (1 << AVScenariosParser.T__21) | (1 << AVScenariosParser.T__22) | (1 << AVScenariosParser.T__23) | (1 << AVScenariosParser.T__24) | (1 << AVScenariosParser.T__25) | (1 << AVScenariosParser.T__26) | (1 << AVScenariosParser.T__32) | (1 << AVScenariosParser.T__33) | (1 << AVScenariosParser.T__34) | (1 << AVScenariosParser.T__35) | (1 << AVScenariosParser.T__36) | (1 << AVScenariosParser.T__37) | (1 << AVScenariosParser.T__38) | (1 << AVScenariosParser.T__39) | (1 << AVScenariosParser.T__40) | (1 << AVScenariosParser.T__41) | (1 << AVScenariosParser.T__42) | (1 << AVScenariosParser.T__43) | (1 << AVScenariosParser.T__44) | (1 << AVScenariosParser.T__49) | (1 << AVScenariosParser.T__59) | (1 << AVScenariosParser.T__60))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (AVScenariosParser.T__63 - 64)) | (1 << (AVScenariosParser.T__65 - 64)) | (1 << (AVScenariosParser.T__68 - 64)) | (1 << (AVScenariosParser.T__72 - 64)) | (1 << (AVScenariosParser.T__73 - 64)) | (1 << (AVScenariosParser.T__74 - 64)) | (1 << (AVScenariosParser.T__75 - 64)) | (1 << (AVScenariosParser.T__79 - 64)) | (1 << (AVScenariosParser.T__80 - 64)) | (1 << (AVScenariosParser.Variable_name - 64)))) != 0):
                    self.state = 588
                    self.state_parameter()


                self.state = 593
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AVScenariosParser.T__8:
                    self.state = 591
                    self.match(AVScenariosParser.T__8)
                    self.state = 592
                    self.vehicle_type_parameter()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vehicle_motion_parameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_vehicle_motion_parameter

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Vehicle_vehicle_motionContext(Vehicle_motion_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Vehicle_motion_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def vehicle_motion(self):
            return self.getTypedRuleContext(AVScenariosParser.Vehicle_motionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVehicle_vehicle_motion" ):
                listener.enterVehicle_vehicle_motion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVehicle_vehicle_motion" ):
                listener.exitVehicle_vehicle_motion(self)


    class Vehicle_vehicle_motion_varContext(Vehicle_motion_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Vehicle_motion_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVehicle_vehicle_motion_var" ):
                listener.enterVehicle_vehicle_motion_var(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVehicle_vehicle_motion_var" ):
                listener.exitVehicle_vehicle_motion_var(self)



    def vehicle_motion_parameter(self):

        localctx = AVScenariosParser.Vehicle_motion_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_vehicle_motion_parameter)
        try:
            self.state = 599
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                localctx = AVScenariosParser.Vehicle_vehicle_motionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 597
                self.vehicle_motion()
                pass

            elif la_ == 2:
                localctx = AVScenariosParser.Vehicle_vehicle_motion_varContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 598
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vehicle_motionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_vehicle_motion

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Vehicle_motion_uniformContext(Vehicle_motionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Vehicle_motionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def uniform_motion(self):
            return self.getTypedRuleContext(AVScenariosParser.Uniform_motionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVehicle_motion_uniform" ):
                listener.enterVehicle_motion_uniform(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVehicle_motion_uniform" ):
                listener.exitVehicle_motion_uniform(self)


    class Vehicle_motion_waypointContext(Vehicle_motionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Vehicle_motionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def waypoint_motion(self):
            return self.getTypedRuleContext(AVScenariosParser.Waypoint_motionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVehicle_motion_waypoint" ):
                listener.enterVehicle_motion_waypoint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVehicle_motion_waypoint" ):
                listener.exitVehicle_motion_waypoint(self)



    def vehicle_motion(self):

        localctx = AVScenariosParser.Vehicle_motionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_vehicle_motion)
        try:
            self.state = 603
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AVScenariosParser.T__33, AVScenariosParser.T__34, AVScenariosParser.T__35, AVScenariosParser.T__36]:
                localctx = AVScenariosParser.Vehicle_motion_uniformContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 601
                self.uniform_motion()
                pass
            elif token in [AVScenariosParser.T__37, AVScenariosParser.T__38, AVScenariosParser.T__39, AVScenariosParser.T__40, AVScenariosParser.T__41, AVScenariosParser.T__42]:
                localctx = AVScenariosParser.Vehicle_motion_waypointContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 602
                self.waypoint_motion()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Uniform_motionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_uniform_motion

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class UniformContext(Uniform_motionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Uniform_motionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def uniform_index(self):
            return self.getTypedRuleContext(AVScenariosParser.Uniform_indexContext,0)

        def state_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.State_parameterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUniform" ):
                listener.enterUniform(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUniform" ):
                listener.exitUniform(self)



    def uniform_motion(self):

        localctx = AVScenariosParser.Uniform_motionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_uniform_motion)
        try:
            localctx = AVScenariosParser.UniformContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 605
            self.uniform_index()
            self.state = 606
            self.match(AVScenariosParser.T__5)
            self.state = 607
            self.state_parameter()
            self.state = 608
            self.match(AVScenariosParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Uniform_indexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_uniform_index

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Uniform_UniformContext(Uniform_indexContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Uniform_indexContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUniform_Uniform" ):
                listener.enterUniform_Uniform(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUniform_Uniform" ):
                listener.exitUniform_Uniform(self)


    class Uniform_uniformContext(Uniform_indexContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Uniform_indexContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUniform_uniform" ):
                listener.enterUniform_uniform(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUniform_uniform" ):
                listener.exitUniform_uniform(self)


    class Uniform_UContext(Uniform_indexContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Uniform_indexContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUniform_U" ):
                listener.enterUniform_U(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUniform_U" ):
                listener.exitUniform_U(self)


    class Uniform_uContext(Uniform_indexContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Uniform_indexContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUniform_u" ):
                listener.enterUniform_u(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUniform_u" ):
                listener.exitUniform_u(self)



    def uniform_index(self):

        localctx = AVScenariosParser.Uniform_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_uniform_index)
        try:
            self.state = 614
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AVScenariosParser.T__33]:
                localctx = AVScenariosParser.Uniform_uniformContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 610
                self.match(AVScenariosParser.T__33)
                pass
            elif token in [AVScenariosParser.T__34]:
                localctx = AVScenariosParser.Uniform_UniformContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 611
                self.match(AVScenariosParser.T__34)
                pass
            elif token in [AVScenariosParser.T__35]:
                localctx = AVScenariosParser.Uniform_UContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 612
                self.match(AVScenariosParser.T__35)
                pass
            elif token in [AVScenariosParser.T__36]:
                localctx = AVScenariosParser.Uniform_uContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 613
                self.match(AVScenariosParser.T__36)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Waypoint_motionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_waypoint_motion

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class WaypointContext(Waypoint_motionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Waypoint_motionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def waypoint_index(self):
            return self.getTypedRuleContext(AVScenariosParser.Waypoint_indexContext,0)

        def state_list_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.State_list_parameterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWaypoint" ):
                listener.enterWaypoint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWaypoint" ):
                listener.exitWaypoint(self)



    def waypoint_motion(self):

        localctx = AVScenariosParser.Waypoint_motionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_waypoint_motion)
        try:
            localctx = AVScenariosParser.WaypointContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 616
            self.waypoint_index()
            self.state = 617
            self.match(AVScenariosParser.T__5)
            self.state = 618
            self.state_list_parameter()
            self.state = 619
            self.match(AVScenariosParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class State_list_parameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_state_list_parameter

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class State_state_listContext(State_list_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.State_list_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def state_list(self):
            return self.getTypedRuleContext(AVScenariosParser.State_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterState_state_list" ):
                listener.enterState_state_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitState_state_list" ):
                listener.exitState_state_list(self)


    class State_state_list_varContext(State_list_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.State_list_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterState_state_list_var" ):
                listener.enterState_state_list_var(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitState_state_list_var" ):
                listener.exitState_state_list_var(self)



    def state_list_parameter(self):

        localctx = AVScenariosParser.State_list_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_state_list_parameter)
        try:
            self.state = 623
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AVScenariosParser.T__0, AVScenariosParser.T__4, AVScenariosParser.T__7, AVScenariosParser.T__9, AVScenariosParser.T__10, AVScenariosParser.T__11, AVScenariosParser.T__16, AVScenariosParser.T__17, AVScenariosParser.T__18, AVScenariosParser.T__19, AVScenariosParser.T__20, AVScenariosParser.T__21, AVScenariosParser.T__22, AVScenariosParser.T__23, AVScenariosParser.T__24, AVScenariosParser.T__25, AVScenariosParser.T__26, AVScenariosParser.T__32, AVScenariosParser.T__33, AVScenariosParser.T__34, AVScenariosParser.T__35, AVScenariosParser.T__36, AVScenariosParser.T__37, AVScenariosParser.T__38, AVScenariosParser.T__39, AVScenariosParser.T__40, AVScenariosParser.T__41, AVScenariosParser.T__42, AVScenariosParser.T__43, AVScenariosParser.T__44, AVScenariosParser.T__49, AVScenariosParser.T__59, AVScenariosParser.T__60, AVScenariosParser.T__63, AVScenariosParser.T__65, AVScenariosParser.T__68, AVScenariosParser.T__72, AVScenariosParser.T__73, AVScenariosParser.T__74, AVScenariosParser.T__75, AVScenariosParser.T__79, AVScenariosParser.T__80, AVScenariosParser.Variable_name]:
                localctx = AVScenariosParser.State_state_list_varContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 621
                self.identifier()
                pass
            elif token in [AVScenariosParser.T__5]:
                localctx = AVScenariosParser.State_state_listContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 622
                self.state_list()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class State_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_state_list

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class State_list_multiContext(State_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.State_listContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def multi_states(self):
            return self.getTypedRuleContext(AVScenariosParser.Multi_statesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterState_list_multi" ):
                listener.enterState_list_multi(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitState_list_multi" ):
                listener.exitState_list_multi(self)



    def state_list(self):

        localctx = AVScenariosParser.State_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_state_list)
        try:
            localctx = AVScenariosParser.State_list_multiContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 625
            self.match(AVScenariosParser.T__5)
            self.state = 626
            self.multi_states(0)
            self.state = 627
            self.match(AVScenariosParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Multi_statesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_multi_states

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Multi_states_parContext(Multi_statesContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Multi_statesContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def state_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.State_parameterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMulti_states_par" ):
                listener.enterMulti_states_par(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMulti_states_par" ):
                listener.exitMulti_states_par(self)


    class Multi_states_par_stateContext(Multi_statesContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Multi_statesContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def multi_states(self):
            return self.getTypedRuleContext(AVScenariosParser.Multi_statesContext,0)

        def state_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.State_parameterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMulti_states_par_state" ):
                listener.enterMulti_states_par_state(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMulti_states_par_state" ):
                listener.exitMulti_states_par_state(self)



    def multi_states(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = AVScenariosParser.Multi_statesContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 106
        self.enterRecursionRule(localctx, 106, self.RULE_multi_states, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = AVScenariosParser.Multi_states_parContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 630
            self.state_parameter()
            self._ctx.stop = self._input.LT(-1)
            self.state = 637
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = AVScenariosParser.Multi_states_par_stateContext(self, AVScenariosParser.Multi_statesContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_multi_states)
                    self.state = 632
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 633
                    self.match(AVScenariosParser.T__8)
                    self.state = 634
                    self.state_parameter() 
                self.state = 639
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Waypoint_indexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_waypoint_index

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Waypoint_WPContext(Waypoint_indexContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Waypoint_indexContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWaypoint_WP" ):
                listener.enterWaypoint_WP(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWaypoint_WP" ):
                listener.exitWaypoint_WP(self)


    class Waypoint_wpContext(Waypoint_indexContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Waypoint_indexContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWaypoint_wp" ):
                listener.enterWaypoint_wp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWaypoint_wp" ):
                listener.exitWaypoint_wp(self)


    class Waypoint_WContext(Waypoint_indexContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Waypoint_indexContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWaypoint_W" ):
                listener.enterWaypoint_W(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWaypoint_W" ):
                listener.exitWaypoint_W(self)


    class Waypoint_wContext(Waypoint_indexContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Waypoint_indexContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWaypoint_w" ):
                listener.enterWaypoint_w(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWaypoint_w" ):
                listener.exitWaypoint_w(self)


    class Waypoint_waypointContext(Waypoint_indexContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Waypoint_indexContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWaypoint_waypoint" ):
                listener.enterWaypoint_waypoint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWaypoint_waypoint" ):
                listener.exitWaypoint_waypoint(self)


    class Waypoint_WaypointContext(Waypoint_indexContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Waypoint_indexContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWaypoint_Waypoint" ):
                listener.enterWaypoint_Waypoint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWaypoint_Waypoint" ):
                listener.exitWaypoint_Waypoint(self)



    def waypoint_index(self):

        localctx = AVScenariosParser.Waypoint_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_waypoint_index)
        try:
            self.state = 646
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AVScenariosParser.T__37]:
                localctx = AVScenariosParser.Waypoint_WaypointContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 640
                self.match(AVScenariosParser.T__37)
                pass
            elif token in [AVScenariosParser.T__38]:
                localctx = AVScenariosParser.Waypoint_WContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 641
                self.match(AVScenariosParser.T__38)
                pass
            elif token in [AVScenariosParser.T__39]:
                localctx = AVScenariosParser.Waypoint_WPContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 642
                self.match(AVScenariosParser.T__39)
                pass
            elif token in [AVScenariosParser.T__40]:
                localctx = AVScenariosParser.Waypoint_waypointContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 643
                self.match(AVScenariosParser.T__40)
                pass
            elif token in [AVScenariosParser.T__41]:
                localctx = AVScenariosParser.Waypoint_wContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 644
                self.match(AVScenariosParser.T__41)
                pass
            elif token in [AVScenariosParser.T__42]:
                localctx = AVScenariosParser.Waypoint_wpContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 645
                self.match(AVScenariosParser.T__42)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PedestriansContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_pedestrians

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Pedestrians_multiContext(PedestriansContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.PedestriansContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def multiple_pedestrians(self):
            return self.getTypedRuleContext(AVScenariosParser.Multiple_pedestriansContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPedestrians_multi" ):
                listener.enterPedestrians_multi(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPedestrians_multi" ):
                listener.exitPedestrians_multi(self)



    def pedestrians(self):

        localctx = AVScenariosParser.PedestriansContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_pedestrians)
        try:
            localctx = AVScenariosParser.Pedestrians_multiContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 648
            self.match(AVScenariosParser.T__1)
            self.state = 649
            self.multiple_pedestrians(0)
            self.state = 650
            self.match(AVScenariosParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Multiple_pedestriansContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_multiple_pedestrians

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Multi_multi_pedestrianContext(Multiple_pedestriansContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Multiple_pedestriansContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def multiple_pedestrians(self):
            return self.getTypedRuleContext(AVScenariosParser.Multiple_pedestriansContext,0)

        def pedestrian_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.Pedestrian_parameterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMulti_multi_pedestrian" ):
                listener.enterMulti_multi_pedestrian(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMulti_multi_pedestrian" ):
                listener.exitMulti_multi_pedestrian(self)


    class Multi_pedestrianContext(Multiple_pedestriansContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Multiple_pedestriansContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def pedestrian_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.Pedestrian_parameterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMulti_pedestrian" ):
                listener.enterMulti_pedestrian(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMulti_pedestrian" ):
                listener.exitMulti_pedestrian(self)



    def multiple_pedestrians(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = AVScenariosParser.Multiple_pedestriansContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 112
        self.enterRecursionRule(localctx, 112, self.RULE_multiple_pedestrians, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = AVScenariosParser.Multi_pedestrianContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 653
            self.pedestrian_parameter()
            self._ctx.stop = self._input.LT(-1)
            self.state = 660
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,51,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = AVScenariosParser.Multi_multi_pedestrianContext(self, AVScenariosParser.Multiple_pedestriansContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_multiple_pedestrians)
                    self.state = 655
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 656
                    self.match(AVScenariosParser.T__8)
                    self.state = 657
                    self.pedestrian_parameter() 
                self.state = 662
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,51,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Pedestrian_parameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_pedestrian_parameter

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Pedestrian_pedestrian_varContext(Pedestrian_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Pedestrian_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPedestrian_pedestrian_var" ):
                listener.enterPedestrian_pedestrian_var(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPedestrian_pedestrian_var" ):
                listener.exitPedestrian_pedestrian_var(self)


    class Pedestrian_pedestrianContext(Pedestrian_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Pedestrian_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def pedestrian(self):
            return self.getTypedRuleContext(AVScenariosParser.PedestrianContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPedestrian_pedestrian" ):
                listener.enterPedestrian_pedestrian(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPedestrian_pedestrian" ):
                listener.exitPedestrian_pedestrian(self)



    def pedestrian_parameter(self):

        localctx = AVScenariosParser.Pedestrian_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_pedestrian_parameter)
        try:
            self.state = 665
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                localctx = AVScenariosParser.Pedestrian_pedestrianContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 663
                self.pedestrian()
                pass

            elif la_ == 2:
                localctx = AVScenariosParser.Pedestrian_pedestrian_varContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 664
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PedestrianContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_pedestrian

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Pedestrian_parContext(PedestrianContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.PedestrianContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def parameter_list_ped(self):
            return self.getTypedRuleContext(AVScenariosParser.Parameter_list_pedContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPedestrian_par" ):
                listener.enterPedestrian_par(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPedestrian_par" ):
                listener.exitPedestrian_par(self)



    def pedestrian(self):

        localctx = AVScenariosParser.PedestrianContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_pedestrian)
        try:
            localctx = AVScenariosParser.Pedestrian_parContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 667
            self.match(AVScenariosParser.T__43)
            self.state = 668
            self.match(AVScenariosParser.T__5)
            self.state = 669
            self.parameter_list_ped()
            self.state = 670
            self.match(AVScenariosParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_list_pedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_parameter_list_ped

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Par_ped_state_ped_stateContext(Parameter_list_pedContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Parameter_list_pedContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def state_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AVScenariosParser.State_parameterContext)
            else:
                return self.getTypedRuleContext(AVScenariosParser.State_parameterContext,i)

        def pedestrian_motion_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.Pedestrian_motion_parameterContext,0)

        def pedestrian_type_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.Pedestrian_type_parameterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPar_ped_state_ped_state" ):
                listener.enterPar_ped_state_ped_state(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPar_ped_state_ped_state" ):
                listener.exitPar_ped_state_ped_state(self)


    class Par_ped_state_pedContext(Parameter_list_pedContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Parameter_list_pedContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def state_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.State_parameterContext,0)

        def pedestrian_motion_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.Pedestrian_motion_parameterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPar_ped_state_ped" ):
                listener.enterPar_ped_state_ped(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPar_ped_state_ped" ):
                listener.exitPar_ped_state_ped(self)


    class Par_ped_stateContext(Parameter_list_pedContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Parameter_list_pedContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def state_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.State_parameterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPar_ped_state" ):
                listener.enterPar_ped_state(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPar_ped_state" ):
                listener.exitPar_ped_state(self)



    def parameter_list_ped(self):

        localctx = AVScenariosParser.Parameter_list_pedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_parameter_list_ped)
        self._la = 0 # Token type
        try:
            self.state = 690
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                localctx = AVScenariosParser.Par_ped_stateContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 672
                self.state_parameter()
                pass

            elif la_ == 2:
                localctx = AVScenariosParser.Par_ped_state_pedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 673
                self.state_parameter()
                self.state = 674
                self.match(AVScenariosParser.T__8)
                self.state = 675
                self.pedestrian_motion_parameter()
                pass

            elif la_ == 3:
                localctx = AVScenariosParser.Par_ped_state_ped_stateContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 677
                self.state_parameter()
                self.state = 678
                self.match(AVScenariosParser.T__8)
                self.state = 680
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AVScenariosParser.T__0) | (1 << AVScenariosParser.T__4) | (1 << AVScenariosParser.T__7) | (1 << AVScenariosParser.T__9) | (1 << AVScenariosParser.T__10) | (1 << AVScenariosParser.T__11) | (1 << AVScenariosParser.T__16) | (1 << AVScenariosParser.T__17) | (1 << AVScenariosParser.T__18) | (1 << AVScenariosParser.T__19) | (1 << AVScenariosParser.T__20) | (1 << AVScenariosParser.T__21) | (1 << AVScenariosParser.T__22) | (1 << AVScenariosParser.T__23) | (1 << AVScenariosParser.T__24) | (1 << AVScenariosParser.T__25) | (1 << AVScenariosParser.T__26) | (1 << AVScenariosParser.T__32) | (1 << AVScenariosParser.T__33) | (1 << AVScenariosParser.T__34) | (1 << AVScenariosParser.T__35) | (1 << AVScenariosParser.T__36) | (1 << AVScenariosParser.T__37) | (1 << AVScenariosParser.T__38) | (1 << AVScenariosParser.T__39) | (1 << AVScenariosParser.T__40) | (1 << AVScenariosParser.T__41) | (1 << AVScenariosParser.T__42) | (1 << AVScenariosParser.T__43) | (1 << AVScenariosParser.T__44) | (1 << AVScenariosParser.T__49) | (1 << AVScenariosParser.T__59) | (1 << AVScenariosParser.T__60))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (AVScenariosParser.T__63 - 64)) | (1 << (AVScenariosParser.T__65 - 64)) | (1 << (AVScenariosParser.T__68 - 64)) | (1 << (AVScenariosParser.T__72 - 64)) | (1 << (AVScenariosParser.T__73 - 64)) | (1 << (AVScenariosParser.T__74 - 64)) | (1 << (AVScenariosParser.T__75 - 64)) | (1 << (AVScenariosParser.T__79 - 64)) | (1 << (AVScenariosParser.T__80 - 64)) | (1 << (AVScenariosParser.Variable_name - 64)))) != 0):
                    self.state = 679
                    self.pedestrian_motion_parameter()


                self.state = 682
                self.match(AVScenariosParser.T__8)
                self.state = 684
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AVScenariosParser.T__0) | (1 << AVScenariosParser.T__4) | (1 << AVScenariosParser.T__5) | (1 << AVScenariosParser.T__7) | (1 << AVScenariosParser.T__9) | (1 << AVScenariosParser.T__10) | (1 << AVScenariosParser.T__11) | (1 << AVScenariosParser.T__16) | (1 << AVScenariosParser.T__17) | (1 << AVScenariosParser.T__18) | (1 << AVScenariosParser.T__19) | (1 << AVScenariosParser.T__20) | (1 << AVScenariosParser.T__21) | (1 << AVScenariosParser.T__22) | (1 << AVScenariosParser.T__23) | (1 << AVScenariosParser.T__24) | (1 << AVScenariosParser.T__25) | (1 << AVScenariosParser.T__26) | (1 << AVScenariosParser.T__32) | (1 << AVScenariosParser.T__33) | (1 << AVScenariosParser.T__34) | (1 << AVScenariosParser.T__35) | (1 << AVScenariosParser.T__36) | (1 << AVScenariosParser.T__37) | (1 << AVScenariosParser.T__38) | (1 << AVScenariosParser.T__39) | (1 << AVScenariosParser.T__40) | (1 << AVScenariosParser.T__41) | (1 << AVScenariosParser.T__42) | (1 << AVScenariosParser.T__43) | (1 << AVScenariosParser.T__44) | (1 << AVScenariosParser.T__49) | (1 << AVScenariosParser.T__59) | (1 << AVScenariosParser.T__60))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (AVScenariosParser.T__63 - 64)) | (1 << (AVScenariosParser.T__65 - 64)) | (1 << (AVScenariosParser.T__68 - 64)) | (1 << (AVScenariosParser.T__72 - 64)) | (1 << (AVScenariosParser.T__73 - 64)) | (1 << (AVScenariosParser.T__74 - 64)) | (1 << (AVScenariosParser.T__75 - 64)) | (1 << (AVScenariosParser.T__79 - 64)) | (1 << (AVScenariosParser.T__80 - 64)) | (1 << (AVScenariosParser.Variable_name - 64)))) != 0):
                    self.state = 683
                    self.state_parameter()


                self.state = 688
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AVScenariosParser.T__8:
                    self.state = 686
                    self.match(AVScenariosParser.T__8)
                    self.state = 687
                    self.pedestrian_type_parameter()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pedestrian_motion_parameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_pedestrian_motion_parameter

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Pedestrian_motion_pedestrian_varContext(Pedestrian_motion_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Pedestrian_motion_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPedestrian_motion_pedestrian_var" ):
                listener.enterPedestrian_motion_pedestrian_var(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPedestrian_motion_pedestrian_var" ):
                listener.exitPedestrian_motion_pedestrian_var(self)


    class Pedestrian_motion_pedestrianContext(Pedestrian_motion_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Pedestrian_motion_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def pedestrian_motion(self):
            return self.getTypedRuleContext(AVScenariosParser.Pedestrian_motionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPedestrian_motion_pedestrian" ):
                listener.enterPedestrian_motion_pedestrian(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPedestrian_motion_pedestrian" ):
                listener.exitPedestrian_motion_pedestrian(self)



    def pedestrian_motion_parameter(self):

        localctx = AVScenariosParser.Pedestrian_motion_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_pedestrian_motion_parameter)
        try:
            self.state = 694
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                localctx = AVScenariosParser.Pedestrian_motion_pedestrianContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 692
                self.pedestrian_motion()
                pass

            elif la_ == 2:
                localctx = AVScenariosParser.Pedestrian_motion_pedestrian_varContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 693
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pedestrian_motionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_pedestrian_motion

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Pedestrian_waypointContext(Pedestrian_motionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Pedestrian_motionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def waypoint_motion(self):
            return self.getTypedRuleContext(AVScenariosParser.Waypoint_motionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPedestrian_waypoint" ):
                listener.enterPedestrian_waypoint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPedestrian_waypoint" ):
                listener.exitPedestrian_waypoint(self)


    class Pedestrian_uniformContext(Pedestrian_motionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Pedestrian_motionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def uniform_motion(self):
            return self.getTypedRuleContext(AVScenariosParser.Uniform_motionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPedestrian_uniform" ):
                listener.enterPedestrian_uniform(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPedestrian_uniform" ):
                listener.exitPedestrian_uniform(self)



    def pedestrian_motion(self):

        localctx = AVScenariosParser.Pedestrian_motionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_pedestrian_motion)
        try:
            self.state = 698
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AVScenariosParser.T__33, AVScenariosParser.T__34, AVScenariosParser.T__35, AVScenariosParser.T__36]:
                localctx = AVScenariosParser.Pedestrian_uniformContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 696
                self.uniform_motion()
                pass
            elif token in [AVScenariosParser.T__37, AVScenariosParser.T__38, AVScenariosParser.T__39, AVScenariosParser.T__40, AVScenariosParser.T__41, AVScenariosParser.T__42]:
                localctx = AVScenariosParser.Pedestrian_waypointContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 697
                self.waypoint_motion()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pedestrian_type_parameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_pedestrian_type_parameter

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Pedestrian_pedestrian_typeContext(Pedestrian_type_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Pedestrian_type_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def pedestrian_type(self):
            return self.getTypedRuleContext(AVScenariosParser.Pedestrian_typeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPedestrian_pedestrian_type" ):
                listener.enterPedestrian_pedestrian_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPedestrian_pedestrian_type" ):
                listener.exitPedestrian_pedestrian_type(self)


    class Pedestrian_pedestrian_type_varContext(Pedestrian_type_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Pedestrian_type_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPedestrian_pedestrian_type_var" ):
                listener.enterPedestrian_pedestrian_type_var(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPedestrian_pedestrian_type_var" ):
                listener.exitPedestrian_pedestrian_type_var(self)



    def pedestrian_type_parameter(self):

        localctx = AVScenariosParser.Pedestrian_type_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_pedestrian_type_parameter)
        try:
            self.state = 702
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AVScenariosParser.T__5]:
                localctx = AVScenariosParser.Pedestrian_pedestrian_typeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 700
                self.pedestrian_type()
                pass
            elif token in [AVScenariosParser.T__0, AVScenariosParser.T__4, AVScenariosParser.T__7, AVScenariosParser.T__9, AVScenariosParser.T__10, AVScenariosParser.T__11, AVScenariosParser.T__16, AVScenariosParser.T__17, AVScenariosParser.T__18, AVScenariosParser.T__19, AVScenariosParser.T__20, AVScenariosParser.T__21, AVScenariosParser.T__22, AVScenariosParser.T__23, AVScenariosParser.T__24, AVScenariosParser.T__25, AVScenariosParser.T__26, AVScenariosParser.T__32, AVScenariosParser.T__33, AVScenariosParser.T__34, AVScenariosParser.T__35, AVScenariosParser.T__36, AVScenariosParser.T__37, AVScenariosParser.T__38, AVScenariosParser.T__39, AVScenariosParser.T__40, AVScenariosParser.T__41, AVScenariosParser.T__42, AVScenariosParser.T__43, AVScenariosParser.T__44, AVScenariosParser.T__49, AVScenariosParser.T__59, AVScenariosParser.T__60, AVScenariosParser.T__63, AVScenariosParser.T__65, AVScenariosParser.T__68, AVScenariosParser.T__72, AVScenariosParser.T__73, AVScenariosParser.T__74, AVScenariosParser.T__75, AVScenariosParser.T__79, AVScenariosParser.T__80, AVScenariosParser.Variable_name]:
                localctx = AVScenariosParser.Pedestrian_pedestrian_type_varContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 701
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pedestrian_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_pedestrian_type

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Pedestrian_type_height_colorContext(Pedestrian_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Pedestrian_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def height_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.Height_parameterContext,0)

        def color_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.Color_parameterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPedestrian_type_height_color" ):
                listener.enterPedestrian_type_height_color(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPedestrian_type_height_color" ):
                listener.exitPedestrian_type_height_color(self)



    def pedestrian_type(self):

        localctx = AVScenariosParser.Pedestrian_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_pedestrian_type)
        try:
            localctx = AVScenariosParser.Pedestrian_type_height_colorContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 704
            self.match(AVScenariosParser.T__5)
            self.state = 705
            self.height_parameter()
            self.state = 706
            self.match(AVScenariosParser.T__8)
            self.state = 707
            self.color_parameter()
            self.state = 708
            self.match(AVScenariosParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Height_parameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_height_parameter

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Height_varContext(Height_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Height_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeight_var" ):
                listener.enterHeight_var(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeight_var" ):
                listener.exitHeight_var(self)


    class Height_heightContext(Height_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Height_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def height(self):
            return self.getTypedRuleContext(AVScenariosParser.HeightContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeight_height" ):
                listener.enterHeight_height(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeight_height" ):
                listener.exitHeight_height(self)



    def height_parameter(self):

        localctx = AVScenariosParser.Height_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_height_parameter)
        try:
            self.state = 712
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AVScenariosParser.T__0, AVScenariosParser.T__4, AVScenariosParser.T__7, AVScenariosParser.T__9, AVScenariosParser.T__10, AVScenariosParser.T__11, AVScenariosParser.T__16, AVScenariosParser.T__17, AVScenariosParser.T__18, AVScenariosParser.T__19, AVScenariosParser.T__20, AVScenariosParser.T__21, AVScenariosParser.T__22, AVScenariosParser.T__23, AVScenariosParser.T__24, AVScenariosParser.T__25, AVScenariosParser.T__26, AVScenariosParser.T__32, AVScenariosParser.T__33, AVScenariosParser.T__34, AVScenariosParser.T__35, AVScenariosParser.T__36, AVScenariosParser.T__37, AVScenariosParser.T__38, AVScenariosParser.T__39, AVScenariosParser.T__40, AVScenariosParser.T__41, AVScenariosParser.T__42, AVScenariosParser.T__43, AVScenariosParser.T__44, AVScenariosParser.T__49, AVScenariosParser.T__59, AVScenariosParser.T__60, AVScenariosParser.T__63, AVScenariosParser.T__65, AVScenariosParser.T__68, AVScenariosParser.T__72, AVScenariosParser.T__73, AVScenariosParser.T__74, AVScenariosParser.T__75, AVScenariosParser.T__79, AVScenariosParser.T__80, AVScenariosParser.Variable_name]:
                localctx = AVScenariosParser.Height_varContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 710
                self.identifier()
                pass
            elif token in [AVScenariosParser.T__12, AVScenariosParser.T__13, AVScenariosParser.Signal, AVScenariosParser.Non_negative_value, AVScenariosParser.Non_negative_number]:
                localctx = AVScenariosParser.Height_heightContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 711
                self.height()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HeightContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_height

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Height_rvContext(HeightContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.HeightContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def real_value(self):
            return self.getTypedRuleContext(AVScenariosParser.Real_valueContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeight_rv" ):
                listener.enterHeight_rv(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeight_rv" ):
                listener.exitHeight_rv(self)



    def height(self):

        localctx = AVScenariosParser.HeightContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_height)
        try:
            localctx = AVScenariosParser.Height_rvContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 714
            self.real_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObstaclesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_obstacles

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Obstacles_multiContext(ObstaclesContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.ObstaclesContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def multiple_obstacles(self):
            return self.getTypedRuleContext(AVScenariosParser.Multiple_obstaclesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObstacles_multi" ):
                listener.enterObstacles_multi(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObstacles_multi" ):
                listener.exitObstacles_multi(self)



    def obstacles(self):

        localctx = AVScenariosParser.ObstaclesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_obstacles)
        try:
            localctx = AVScenariosParser.Obstacles_multiContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 716
            self.match(AVScenariosParser.T__1)
            self.state = 717
            self.multiple_obstacles(0)
            self.state = 718
            self.match(AVScenariosParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Multiple_obstaclesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_multiple_obstacles

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Obstacles_obstacleContext(Multiple_obstaclesContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Multiple_obstaclesContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def obstacle_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.Obstacle_parameterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObstacles_obstacle" ):
                listener.enterObstacles_obstacle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObstacles_obstacle" ):
                listener.exitObstacles_obstacle(self)


    class Obstacles_multi_obstacleContext(Multiple_obstaclesContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Multiple_obstaclesContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def multiple_obstacles(self):
            return self.getTypedRuleContext(AVScenariosParser.Multiple_obstaclesContext,0)

        def obstacle_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.Obstacle_parameterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObstacles_multi_obstacle" ):
                listener.enterObstacles_multi_obstacle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObstacles_multi_obstacle" ):
                listener.exitObstacles_multi_obstacle(self)



    def multiple_obstacles(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = AVScenariosParser.Multiple_obstaclesContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 134
        self.enterRecursionRule(localctx, 134, self.RULE_multiple_obstacles, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = AVScenariosParser.Obstacles_obstacleContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 721
            self.obstacle_parameter()
            self._ctx.stop = self._input.LT(-1)
            self.state = 728
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,61,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = AVScenariosParser.Obstacles_multi_obstacleContext(self, AVScenariosParser.Multiple_obstaclesContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_multiple_obstacles)
                    self.state = 723
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 724
                    self.match(AVScenariosParser.T__8)
                    self.state = 725
                    self.obstacle_parameter() 
                self.state = 730
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,61,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Obstacle_parameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_obstacle_parameter

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Obstacle_obstacle_varContext(Obstacle_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Obstacle_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObstacle_obstacle_var" ):
                listener.enterObstacle_obstacle_var(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObstacle_obstacle_var" ):
                listener.exitObstacle_obstacle_var(self)


    class Obstacle_obstacleContext(Obstacle_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Obstacle_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def obstacle(self):
            return self.getTypedRuleContext(AVScenariosParser.ObstacleContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObstacle_obstacle" ):
                listener.enterObstacle_obstacle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObstacle_obstacle" ):
                listener.exitObstacle_obstacle(self)



    def obstacle_parameter(self):

        localctx = AVScenariosParser.Obstacle_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_obstacle_parameter)
        try:
            self.state = 733
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                localctx = AVScenariosParser.Obstacle_obstacleContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 731
                self.obstacle()
                pass

            elif la_ == 2:
                localctx = AVScenariosParser.Obstacle_obstacle_varContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 732
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObstacleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_obstacle

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Obstacle_paraContext(ObstacleContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.ObstacleContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def parameter_list_obs(self):
            return self.getTypedRuleContext(AVScenariosParser.Parameter_list_obsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObstacle_para" ):
                listener.enterObstacle_para(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObstacle_para" ):
                listener.exitObstacle_para(self)



    def obstacle(self):

        localctx = AVScenariosParser.ObstacleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_obstacle)
        try:
            localctx = AVScenariosParser.Obstacle_paraContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 735
            self.match(AVScenariosParser.T__44)
            self.state = 736
            self.match(AVScenariosParser.T__5)
            self.state = 737
            self.parameter_list_obs()
            self.state = 738
            self.match(AVScenariosParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_list_obsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_parameter_list_obs

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Par_position_shapeContext(Parameter_list_obsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Parameter_list_obsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def position_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.Position_parameterContext,0)

        def shape_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.Shape_parameterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPar_position_shape" ):
                listener.enterPar_position_shape(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPar_position_shape" ):
                listener.exitPar_position_shape(self)



    def parameter_list_obs(self):

        localctx = AVScenariosParser.Parameter_list_obsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_parameter_list_obs)
        self._la = 0 # Token type
        try:
            localctx = AVScenariosParser.Par_position_shapeContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 740
            self.position_parameter()
            self.state = 743
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==AVScenariosParser.T__8:
                self.state = 741
                self.match(AVScenariosParser.T__8)
                self.state = 742
                self.shape_parameter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Shape_parameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_shape_parameter

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Shape_shape_varContext(Shape_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Shape_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShape_shape_var" ):
                listener.enterShape_shape_var(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShape_shape_var" ):
                listener.exitShape_shape_var(self)


    class Shape_shapeContext(Shape_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Shape_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def shape(self):
            return self.getTypedRuleContext(AVScenariosParser.ShapeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShape_shape" ):
                listener.enterShape_shape(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShape_shape" ):
                listener.exitShape_shape(self)



    def shape_parameter(self):

        localctx = AVScenariosParser.Shape_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_shape_parameter)
        try:
            self.state = 747
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AVScenariosParser.T__0, AVScenariosParser.T__4, AVScenariosParser.T__7, AVScenariosParser.T__9, AVScenariosParser.T__10, AVScenariosParser.T__11, AVScenariosParser.T__16, AVScenariosParser.T__17, AVScenariosParser.T__18, AVScenariosParser.T__19, AVScenariosParser.T__20, AVScenariosParser.T__21, AVScenariosParser.T__22, AVScenariosParser.T__23, AVScenariosParser.T__24, AVScenariosParser.T__25, AVScenariosParser.T__26, AVScenariosParser.T__32, AVScenariosParser.T__33, AVScenariosParser.T__34, AVScenariosParser.T__35, AVScenariosParser.T__36, AVScenariosParser.T__37, AVScenariosParser.T__38, AVScenariosParser.T__39, AVScenariosParser.T__40, AVScenariosParser.T__41, AVScenariosParser.T__42, AVScenariosParser.T__43, AVScenariosParser.T__44, AVScenariosParser.T__49, AVScenariosParser.T__59, AVScenariosParser.T__60, AVScenariosParser.T__63, AVScenariosParser.T__65, AVScenariosParser.T__68, AVScenariosParser.T__72, AVScenariosParser.T__73, AVScenariosParser.T__74, AVScenariosParser.T__75, AVScenariosParser.T__79, AVScenariosParser.T__80, AVScenariosParser.Variable_name]:
                localctx = AVScenariosParser.Shape_shape_varContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 745
                self.identifier()
                pass
            elif token in [AVScenariosParser.T__5]:
                localctx = AVScenariosParser.Shape_shapeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 746
                self.shape()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShapeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_shape

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Shape_cylinderContext(ShapeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.ShapeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def cylinder(self):
            return self.getTypedRuleContext(AVScenariosParser.CylinderContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShape_cylinder" ):
                listener.enterShape_cylinder(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShape_cylinder" ):
                listener.exitShape_cylinder(self)


    class Shape_sphereContext(ShapeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.ShapeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def sphere(self):
            return self.getTypedRuleContext(AVScenariosParser.SphereContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShape_sphere" ):
                listener.enterShape_sphere(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShape_sphere" ):
                listener.exitShape_sphere(self)


    class Shape_boxContext(ShapeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.ShapeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def box(self):
            return self.getTypedRuleContext(AVScenariosParser.BoxContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShape_box" ):
                listener.enterShape_box(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShape_box" ):
                listener.exitShape_box(self)


    class Shape_coneContext(ShapeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.ShapeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def cone(self):
            return self.getTypedRuleContext(AVScenariosParser.ConeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShape_cone" ):
                listener.enterShape_cone(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShape_cone" ):
                listener.exitShape_cone(self)



    def shape(self):

        localctx = AVScenariosParser.ShapeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_shape)
        try:
            self.state = 753
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                localctx = AVScenariosParser.Shape_sphereContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 749
                self.sphere()
                pass

            elif la_ == 2:
                localctx = AVScenariosParser.Shape_boxContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 750
                self.box()
                pass

            elif la_ == 3:
                localctx = AVScenariosParser.Shape_coneContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 751
                self.cone()
                pass

            elif la_ == 4:
                localctx = AVScenariosParser.Shape_cylinderContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 752
                self.cylinder()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SphereContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_sphere

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Sphere_sphereContext(SphereContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.SphereContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def non_negative_real_value(self):
            return self.getTypedRuleContext(AVScenariosParser.Non_negative_real_valueContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSphere_sphere" ):
                listener.enterSphere_sphere(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSphere_sphere" ):
                listener.exitSphere_sphere(self)



    def sphere(self):

        localctx = AVScenariosParser.SphereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_sphere)
        try:
            localctx = AVScenariosParser.Sphere_sphereContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 755
            self.match(AVScenariosParser.T__5)
            self.state = 756
            self.match(AVScenariosParser.T__45)
            self.state = 757
            self.match(AVScenariosParser.T__8)
            self.state = 758
            self.non_negative_real_value()
            self.state = 759
            self.match(AVScenariosParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoxContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_box

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Box_boxContext(BoxContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.BoxContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def non_negative_real_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AVScenariosParser.Non_negative_real_valueContext)
            else:
                return self.getTypedRuleContext(AVScenariosParser.Non_negative_real_valueContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBox_box" ):
                listener.enterBox_box(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBox_box" ):
                listener.exitBox_box(self)



    def box(self):

        localctx = AVScenariosParser.BoxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_box)
        try:
            localctx = AVScenariosParser.Box_boxContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 761
            self.match(AVScenariosParser.T__5)
            self.state = 762
            self.match(AVScenariosParser.T__46)
            self.state = 763
            self.match(AVScenariosParser.T__8)
            self.state = 764
            self.non_negative_real_value()
            self.state = 765
            self.match(AVScenariosParser.T__8)
            self.state = 766
            self.non_negative_real_value()
            self.state = 767
            self.match(AVScenariosParser.T__8)
            self.state = 768
            self.non_negative_real_value()
            self.state = 769
            self.match(AVScenariosParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_cone

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Cone_coneContext(ConeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.ConeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def non_negative_real_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AVScenariosParser.Non_negative_real_valueContext)
            else:
                return self.getTypedRuleContext(AVScenariosParser.Non_negative_real_valueContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCone_cone" ):
                listener.enterCone_cone(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCone_cone" ):
                listener.exitCone_cone(self)



    def cone(self):

        localctx = AVScenariosParser.ConeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_cone)
        try:
            localctx = AVScenariosParser.Cone_coneContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 771
            self.match(AVScenariosParser.T__5)
            self.state = 772
            self.match(AVScenariosParser.T__47)
            self.state = 773
            self.match(AVScenariosParser.T__8)
            self.state = 774
            self.non_negative_real_value()
            self.state = 775
            self.match(AVScenariosParser.T__8)
            self.state = 776
            self.non_negative_real_value()
            self.state = 777
            self.match(AVScenariosParser.T__8)
            self.state = 778
            self.non_negative_real_value()
            self.state = 779
            self.match(AVScenariosParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CylinderContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_cylinder

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Cylinder_cylinderContext(CylinderContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.CylinderContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def non_negative_real_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AVScenariosParser.Non_negative_real_valueContext)
            else:
                return self.getTypedRuleContext(AVScenariosParser.Non_negative_real_valueContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCylinder_cylinder" ):
                listener.enterCylinder_cylinder(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCylinder_cylinder" ):
                listener.exitCylinder_cylinder(self)



    def cylinder(self):

        localctx = AVScenariosParser.CylinderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_cylinder)
        try:
            localctx = AVScenariosParser.Cylinder_cylinderContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 781
            self.match(AVScenariosParser.T__5)
            self.state = 782
            self.match(AVScenariosParser.T__48)
            self.state = 783
            self.match(AVScenariosParser.T__8)
            self.state = 784
            self.non_negative_real_value()
            self.state = 785
            self.match(AVScenariosParser.T__8)
            self.state = 786
            self.non_negative_real_value()
            self.state = 787
            self.match(AVScenariosParser.T__8)
            self.state = 788
            self.non_negative_real_value()
            self.state = 789
            self.match(AVScenariosParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Env_parameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_env_parameter

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Env_varContext(Env_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Env_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnv_var" ):
                listener.enterEnv_var(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnv_var" ):
                listener.exitEnv_var(self)


    class Env_emptyContext(Env_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Env_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnv_empty" ):
                listener.enterEnv_empty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnv_empty" ):
                listener.exitEnv_empty(self)


    class Env_envContext(Env_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Env_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def env(self):
            return self.getTypedRuleContext(AVScenariosParser.EnvContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnv_env" ):
                listener.enterEnv_env(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnv_env" ):
                listener.exitEnv_env(self)



    def env_parameter(self):

        localctx = AVScenariosParser.Env_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_env_parameter)
        try:
            self.state = 795
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                localctx = AVScenariosParser.Env_varContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 791
                self.identifier()
                pass

            elif la_ == 2:
                localctx = AVScenariosParser.Env_envContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 792
                self.env()
                pass

            elif la_ == 3:
                localctx = AVScenariosParser.Env_emptyContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 793
                self.match(AVScenariosParser.T__1)
                self.state = 794
                self.match(AVScenariosParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnvContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_env

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Env_parContext(EnvContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.EnvContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def parameter_list_env(self):
            return self.getTypedRuleContext(AVScenariosParser.Parameter_list_envContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnv_par" ):
                listener.enterEnv_par(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnv_par" ):
                listener.exitEnv_par(self)



    def env(self):

        localctx = AVScenariosParser.EnvContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_env)
        try:
            localctx = AVScenariosParser.Env_parContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 797
            self.match(AVScenariosParser.T__49)
            self.state = 798
            self.match(AVScenariosParser.T__5)
            self.state = 799
            self.parameter_list_env()
            self.state = 800
            self.match(AVScenariosParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_list_envContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_parameter_list_env

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Par_time_weatherContext(Parameter_list_envContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Parameter_list_envContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def time_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.Time_parameterContext,0)

        def weather_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.Weather_parameterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPar_time_weather" ):
                listener.enterPar_time_weather(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPar_time_weather" ):
                listener.exitPar_time_weather(self)



    def parameter_list_env(self):

        localctx = AVScenariosParser.Parameter_list_envContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_parameter_list_env)
        try:
            localctx = AVScenariosParser.Par_time_weatherContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 802
            self.time_parameter()
            self.state = 803
            self.match(AVScenariosParser.T__8)
            self.state = 804
            self.weather_parameter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Weather_parameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_weather_parameter

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Weather_varContext(Weather_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Weather_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWeather_var" ):
                listener.enterWeather_var(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWeather_var" ):
                listener.exitWeather_var(self)


    class Weather_wtrContext(Weather_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Weather_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def weather(self):
            return self.getTypedRuleContext(AVScenariosParser.WeatherContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWeather_wtr" ):
                listener.enterWeather_wtr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWeather_wtr" ):
                listener.exitWeather_wtr(self)



    def weather_parameter(self):

        localctx = AVScenariosParser.Weather_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_weather_parameter)
        try:
            self.state = 808
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AVScenariosParser.T__0, AVScenariosParser.T__4, AVScenariosParser.T__7, AVScenariosParser.T__9, AVScenariosParser.T__10, AVScenariosParser.T__11, AVScenariosParser.T__16, AVScenariosParser.T__17, AVScenariosParser.T__18, AVScenariosParser.T__19, AVScenariosParser.T__20, AVScenariosParser.T__21, AVScenariosParser.T__22, AVScenariosParser.T__23, AVScenariosParser.T__24, AVScenariosParser.T__25, AVScenariosParser.T__26, AVScenariosParser.T__32, AVScenariosParser.T__33, AVScenariosParser.T__34, AVScenariosParser.T__35, AVScenariosParser.T__36, AVScenariosParser.T__37, AVScenariosParser.T__38, AVScenariosParser.T__39, AVScenariosParser.T__40, AVScenariosParser.T__41, AVScenariosParser.T__42, AVScenariosParser.T__43, AVScenariosParser.T__44, AVScenariosParser.T__49, AVScenariosParser.T__59, AVScenariosParser.T__60, AVScenariosParser.T__63, AVScenariosParser.T__65, AVScenariosParser.T__68, AVScenariosParser.T__72, AVScenariosParser.T__73, AVScenariosParser.T__74, AVScenariosParser.T__75, AVScenariosParser.T__79, AVScenariosParser.T__80, AVScenariosParser.Variable_name]:
                localctx = AVScenariosParser.Weather_varContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 806
                self.identifier()
                pass
            elif token in [AVScenariosParser.T__1]:
                localctx = AVScenariosParser.Weather_wtrContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 807
                self.weather()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Time_parameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_time_parameter

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Time_timeContext(Time_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Time_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def time(self):
            return self.getTypedRuleContext(AVScenariosParser.TimeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTime_time" ):
                listener.enterTime_time(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTime_time" ):
                listener.exitTime_time(self)


    class Time_time_varContext(Time_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Time_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTime_time_var" ):
                listener.enterTime_time_var(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTime_time_var" ):
                listener.exitTime_time_var(self)



    def time_parameter(self):

        localctx = AVScenariosParser.Time_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_time_parameter)
        try:
            self.state = 812
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AVScenariosParser.Time]:
                localctx = AVScenariosParser.Time_timeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 810
                self.time()
                pass
            elif token in [AVScenariosParser.T__0, AVScenariosParser.T__4, AVScenariosParser.T__7, AVScenariosParser.T__9, AVScenariosParser.T__10, AVScenariosParser.T__11, AVScenariosParser.T__16, AVScenariosParser.T__17, AVScenariosParser.T__18, AVScenariosParser.T__19, AVScenariosParser.T__20, AVScenariosParser.T__21, AVScenariosParser.T__22, AVScenariosParser.T__23, AVScenariosParser.T__24, AVScenariosParser.T__25, AVScenariosParser.T__26, AVScenariosParser.T__32, AVScenariosParser.T__33, AVScenariosParser.T__34, AVScenariosParser.T__35, AVScenariosParser.T__36, AVScenariosParser.T__37, AVScenariosParser.T__38, AVScenariosParser.T__39, AVScenariosParser.T__40, AVScenariosParser.T__41, AVScenariosParser.T__42, AVScenariosParser.T__43, AVScenariosParser.T__44, AVScenariosParser.T__49, AVScenariosParser.T__59, AVScenariosParser.T__60, AVScenariosParser.T__63, AVScenariosParser.T__65, AVScenariosParser.T__68, AVScenariosParser.T__72, AVScenariosParser.T__73, AVScenariosParser.T__74, AVScenariosParser.T__75, AVScenariosParser.T__79, AVScenariosParser.T__80, AVScenariosParser.Variable_name]:
                localctx = AVScenariosParser.Time_time_varContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 811
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_time

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Time_TimeContext(TimeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.TimeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Time(self):
            return self.getToken(AVScenariosParser.Time, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTime_Time" ):
                listener.enterTime_Time(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTime_Time" ):
                listener.exitTime_Time(self)



    def time(self):

        localctx = AVScenariosParser.TimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_time)
        try:
            localctx = AVScenariosParser.Time_TimeContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 814
            self.match(AVScenariosParser.Time)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WeatherContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_weather

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class WeathersContext(WeatherContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.WeatherContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def multi_weathers(self):
            return self.getTypedRuleContext(AVScenariosParser.Multi_weathersContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWeathers" ):
                listener.enterWeathers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWeathers" ):
                listener.exitWeathers(self)



    def weather(self):

        localctx = AVScenariosParser.WeatherContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_weather)
        try:
            localctx = AVScenariosParser.WeathersContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 816
            self.match(AVScenariosParser.T__1)
            self.state = 817
            self.multi_weathers(0)
            self.state = 818
            self.match(AVScenariosParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Multi_weathersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_multi_weathers

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Weathers_multi_weatherContext(Multi_weathersContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Multi_weathersContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def multi_weathers(self):
            return self.getTypedRuleContext(AVScenariosParser.Multi_weathersContext,0)

        def weather_statement_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.Weather_statement_parameterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWeathers_multi_weather" ):
                listener.enterWeathers_multi_weather(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWeathers_multi_weather" ):
                listener.exitWeathers_multi_weather(self)


    class Weathers_weatherContext(Multi_weathersContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Multi_weathersContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def weather_statement_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.Weather_statement_parameterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWeathers_weather" ):
                listener.enterWeathers_weather(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWeathers_weather" ):
                listener.exitWeathers_weather(self)



    def multi_weathers(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = AVScenariosParser.Multi_weathersContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 168
        self.enterRecursionRule(localctx, 168, self.RULE_multi_weathers, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = AVScenariosParser.Weathers_weatherContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 821
            self.weather_statement_parameter()
            self._ctx.stop = self._input.LT(-1)
            self.state = 828
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,69,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = AVScenariosParser.Weathers_multi_weatherContext(self, AVScenariosParser.Multi_weathersContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_multi_weathers)
                    self.state = 823
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 824
                    self.match(AVScenariosParser.T__8)
                    self.state = 825
                    self.weather_statement_parameter() 
                self.state = 830
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Weather_statement_parameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_weather_statement_parameter

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Weather_weatherContext(Weather_statement_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Weather_statement_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def weather_statement(self):
            return self.getTypedRuleContext(AVScenariosParser.Weather_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWeather_weather" ):
                listener.enterWeather_weather(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWeather_weather" ):
                listener.exitWeather_weather(self)


    class Weather_weather_varContext(Weather_statement_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Weather_statement_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWeather_weather_var" ):
                listener.enterWeather_weather_var(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWeather_weather_var" ):
                listener.exitWeather_weather_var(self)



    def weather_statement_parameter(self):

        localctx = AVScenariosParser.Weather_statement_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_weather_statement_parameter)
        try:
            self.state = 833
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AVScenariosParser.T__0, AVScenariosParser.T__4, AVScenariosParser.T__7, AVScenariosParser.T__9, AVScenariosParser.T__10, AVScenariosParser.T__11, AVScenariosParser.T__16, AVScenariosParser.T__17, AVScenariosParser.T__18, AVScenariosParser.T__19, AVScenariosParser.T__20, AVScenariosParser.T__21, AVScenariosParser.T__22, AVScenariosParser.T__23, AVScenariosParser.T__24, AVScenariosParser.T__25, AVScenariosParser.T__26, AVScenariosParser.T__32, AVScenariosParser.T__33, AVScenariosParser.T__34, AVScenariosParser.T__35, AVScenariosParser.T__36, AVScenariosParser.T__37, AVScenariosParser.T__38, AVScenariosParser.T__39, AVScenariosParser.T__40, AVScenariosParser.T__41, AVScenariosParser.T__42, AVScenariosParser.T__43, AVScenariosParser.T__44, AVScenariosParser.T__49, AVScenariosParser.T__59, AVScenariosParser.T__60, AVScenariosParser.T__63, AVScenariosParser.T__65, AVScenariosParser.T__68, AVScenariosParser.T__72, AVScenariosParser.T__73, AVScenariosParser.T__74, AVScenariosParser.T__75, AVScenariosParser.T__79, AVScenariosParser.T__80, AVScenariosParser.Variable_name]:
                localctx = AVScenariosParser.Weather_weather_varContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 831
                self.identifier()
                pass
            elif token in [AVScenariosParser.T__51, AVScenariosParser.T__52, AVScenariosParser.T__53, AVScenariosParser.T__54, AVScenariosParser.T__55]:
                localctx = AVScenariosParser.Weather_weatherContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 832
                self.weather_statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Weather_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_weather_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Weather_discreteContext(Weather_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Weather_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def kind(self):
            return self.getTypedRuleContext(AVScenariosParser.KindContext,0)

        def weather_discrete_level_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.Weather_discrete_level_parameterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWeather_discrete" ):
                listener.enterWeather_discrete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWeather_discrete" ):
                listener.exitWeather_discrete(self)


    class Weather_continuousContext(Weather_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Weather_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def kind(self):
            return self.getTypedRuleContext(AVScenariosParser.KindContext,0)

        def weather_continuous_index_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.Weather_continuous_index_parameterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWeather_continuous" ):
                listener.enterWeather_continuous(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWeather_continuous" ):
                listener.exitWeather_continuous(self)



    def weather_statement(self):

        localctx = AVScenariosParser.Weather_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_weather_statement)
        try:
            self.state = 843
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                localctx = AVScenariosParser.Weather_continuousContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 835
                self.kind()
                self.state = 836
                self.match(AVScenariosParser.T__50)
                self.state = 837
                self.weather_continuous_index_parameter()
                pass

            elif la_ == 2:
                localctx = AVScenariosParser.Weather_discreteContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 839
                self.kind()
                self.state = 840
                self.match(AVScenariosParser.T__50)
                self.state = 841
                self.weather_discrete_level_parameter()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KindContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_kind

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Kind_sunnyContext(KindContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.KindContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKind_sunny" ):
                listener.enterKind_sunny(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKind_sunny" ):
                listener.exitKind_sunny(self)


    class Kind_snowContext(KindContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.KindContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKind_snow" ):
                listener.enterKind_snow(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKind_snow" ):
                listener.exitKind_snow(self)


    class Kind_rainContext(KindContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.KindContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKind_rain" ):
                listener.enterKind_rain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKind_rain" ):
                listener.exitKind_rain(self)


    class Kind_fogContext(KindContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.KindContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKind_fog" ):
                listener.enterKind_fog(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKind_fog" ):
                listener.exitKind_fog(self)


    class Kind_wetnessContext(KindContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.KindContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKind_wetness" ):
                listener.enterKind_wetness(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKind_wetness" ):
                listener.exitKind_wetness(self)



    def kind(self):

        localctx = AVScenariosParser.KindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_kind)
        try:
            self.state = 850
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AVScenariosParser.T__51]:
                localctx = AVScenariosParser.Kind_sunnyContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 845
                self.match(AVScenariosParser.T__51)
                pass
            elif token in [AVScenariosParser.T__52]:
                localctx = AVScenariosParser.Kind_rainContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 846
                self.match(AVScenariosParser.T__52)
                pass
            elif token in [AVScenariosParser.T__53]:
                localctx = AVScenariosParser.Kind_snowContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 847
                self.match(AVScenariosParser.T__53)
                pass
            elif token in [AVScenariosParser.T__54]:
                localctx = AVScenariosParser.Kind_fogContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 848
                self.match(AVScenariosParser.T__54)
                pass
            elif token in [AVScenariosParser.T__55]:
                localctx = AVScenariosParser.Kind_wetnessContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 849
                self.match(AVScenariosParser.T__55)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Weather_continuous_index_parameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_weather_continuous_index_parameter

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Weather_continuous_varContext(Weather_continuous_index_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Weather_continuous_index_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWeather_continuous_var" ):
                listener.enterWeather_continuous_var(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWeather_continuous_var" ):
                listener.exitWeather_continuous_var(self)


    class Weather_continuous_valueContext(Weather_continuous_index_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Weather_continuous_index_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def float_value(self):
            return self.getTypedRuleContext(AVScenariosParser.Float_valueContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWeather_continuous_value" ):
                listener.enterWeather_continuous_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWeather_continuous_value" ):
                listener.exitWeather_continuous_value(self)



    def weather_continuous_index_parameter(self):

        localctx = AVScenariosParser.Weather_continuous_index_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_weather_continuous_index_parameter)
        try:
            self.state = 854
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AVScenariosParser.Non_negative_value]:
                localctx = AVScenariosParser.Weather_continuous_valueContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 852
                self.float_value()
                pass
            elif token in [AVScenariosParser.T__0, AVScenariosParser.T__4, AVScenariosParser.T__7, AVScenariosParser.T__9, AVScenariosParser.T__10, AVScenariosParser.T__11, AVScenariosParser.T__16, AVScenariosParser.T__17, AVScenariosParser.T__18, AVScenariosParser.T__19, AVScenariosParser.T__20, AVScenariosParser.T__21, AVScenariosParser.T__22, AVScenariosParser.T__23, AVScenariosParser.T__24, AVScenariosParser.T__25, AVScenariosParser.T__26, AVScenariosParser.T__32, AVScenariosParser.T__33, AVScenariosParser.T__34, AVScenariosParser.T__35, AVScenariosParser.T__36, AVScenariosParser.T__37, AVScenariosParser.T__38, AVScenariosParser.T__39, AVScenariosParser.T__40, AVScenariosParser.T__41, AVScenariosParser.T__42, AVScenariosParser.T__43, AVScenariosParser.T__44, AVScenariosParser.T__49, AVScenariosParser.T__59, AVScenariosParser.T__60, AVScenariosParser.T__63, AVScenariosParser.T__65, AVScenariosParser.T__68, AVScenariosParser.T__72, AVScenariosParser.T__73, AVScenariosParser.T__74, AVScenariosParser.T__75, AVScenariosParser.T__79, AVScenariosParser.T__80, AVScenariosParser.Variable_name]:
                localctx = AVScenariosParser.Weather_continuous_varContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 853
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Weather_discrete_level_parameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_weather_discrete_level_parameter

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Weather_discrete_varContext(Weather_discrete_level_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Weather_discrete_level_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWeather_discrete_var" ):
                listener.enterWeather_discrete_var(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWeather_discrete_var" ):
                listener.exitWeather_discrete_var(self)


    class Weather_discrete_level_parContext(Weather_discrete_level_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Weather_discrete_level_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def weather_discrete_level(self):
            return self.getTypedRuleContext(AVScenariosParser.Weather_discrete_levelContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWeather_discrete_level_par" ):
                listener.enterWeather_discrete_level_par(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWeather_discrete_level_par" ):
                listener.exitWeather_discrete_level_par(self)



    def weather_discrete_level_parameter(self):

        localctx = AVScenariosParser.Weather_discrete_level_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_weather_discrete_level_parameter)
        try:
            self.state = 858
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AVScenariosParser.T__56, AVScenariosParser.T__57, AVScenariosParser.T__58]:
                localctx = AVScenariosParser.Weather_discrete_level_parContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 856
                self.weather_discrete_level()
                pass
            elif token in [AVScenariosParser.T__0, AVScenariosParser.T__4, AVScenariosParser.T__7, AVScenariosParser.T__9, AVScenariosParser.T__10, AVScenariosParser.T__11, AVScenariosParser.T__16, AVScenariosParser.T__17, AVScenariosParser.T__18, AVScenariosParser.T__19, AVScenariosParser.T__20, AVScenariosParser.T__21, AVScenariosParser.T__22, AVScenariosParser.T__23, AVScenariosParser.T__24, AVScenariosParser.T__25, AVScenariosParser.T__26, AVScenariosParser.T__32, AVScenariosParser.T__33, AVScenariosParser.T__34, AVScenariosParser.T__35, AVScenariosParser.T__36, AVScenariosParser.T__37, AVScenariosParser.T__38, AVScenariosParser.T__39, AVScenariosParser.T__40, AVScenariosParser.T__41, AVScenariosParser.T__42, AVScenariosParser.T__43, AVScenariosParser.T__44, AVScenariosParser.T__49, AVScenariosParser.T__59, AVScenariosParser.T__60, AVScenariosParser.T__63, AVScenariosParser.T__65, AVScenariosParser.T__68, AVScenariosParser.T__72, AVScenariosParser.T__73, AVScenariosParser.T__74, AVScenariosParser.T__75, AVScenariosParser.T__79, AVScenariosParser.T__80, AVScenariosParser.Variable_name]:
                localctx = AVScenariosParser.Weather_discrete_varContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 857
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Weather_discrete_levelContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_weather_discrete_level

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Weather_discrete_middleContext(Weather_discrete_levelContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Weather_discrete_levelContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWeather_discrete_middle" ):
                listener.enterWeather_discrete_middle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWeather_discrete_middle" ):
                listener.exitWeather_discrete_middle(self)


    class Weather_discrete_heavyContext(Weather_discrete_levelContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Weather_discrete_levelContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWeather_discrete_heavy" ):
                listener.enterWeather_discrete_heavy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWeather_discrete_heavy" ):
                listener.exitWeather_discrete_heavy(self)


    class Weather_discrete_lightContext(Weather_discrete_levelContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Weather_discrete_levelContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWeather_discrete_light" ):
                listener.enterWeather_discrete_light(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWeather_discrete_light" ):
                listener.exitWeather_discrete_light(self)



    def weather_discrete_level(self):

        localctx = AVScenariosParser.Weather_discrete_levelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_weather_discrete_level)
        try:
            self.state = 863
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AVScenariosParser.T__56]:
                localctx = AVScenariosParser.Weather_discrete_lightContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 860
                self.match(AVScenariosParser.T__56)
                pass
            elif token in [AVScenariosParser.T__57]:
                localctx = AVScenariosParser.Weather_discrete_middleContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 861
                self.match(AVScenariosParser.T__57)
                pass
            elif token in [AVScenariosParser.T__58]:
                localctx = AVScenariosParser.Weather_discrete_heavyContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 862
                self.match(AVScenariosParser.T__58)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrafficContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_traffic

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Traffic_trafficContext(TrafficContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.TrafficContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def traffic_statement(self):
            return self.getTypedRuleContext(AVScenariosParser.Traffic_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraffic_traffic" ):
                listener.enterTraffic_traffic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraffic_traffic" ):
                listener.exitTraffic_traffic(self)



    def traffic(self):

        localctx = AVScenariosParser.TrafficContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_traffic)
        try:
            localctx = AVScenariosParser.Traffic_trafficContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 865
            self.match(AVScenariosParser.T__1)
            self.state = 866
            self.traffic_statement()
            self.state = 867
            self.match(AVScenariosParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Traffic_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_traffic_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Traffic_stmtContext(Traffic_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Traffic_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def intersection_traffic(self):
            return self.getTypedRuleContext(AVScenariosParser.Intersection_trafficContext,0)

        def lane_traffic(self):
            return self.getTypedRuleContext(AVScenariosParser.Lane_trafficContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraffic_stmt" ):
                listener.enterTraffic_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraffic_stmt" ):
                listener.exitTraffic_stmt(self)



    def traffic_statement(self):

        localctx = AVScenariosParser.Traffic_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_traffic_statement)
        try:
            localctx = AVScenariosParser.Traffic_stmtContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 869
            self.intersection_traffic()
            self.state = 870
            self.match(AVScenariosParser.T__8)
            self.state = 871
            self.lane_traffic(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Intersection_trafficContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_intersection_traffic

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class IntersectionContext(Intersection_trafficContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Intersection_trafficContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def meta_intersection_traffic_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AVScenariosParser.Meta_intersection_traffic_parameterContext)
            else:
                return self.getTypedRuleContext(AVScenariosParser.Meta_intersection_traffic_parameterContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntersection" ):
                listener.enterIntersection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntersection" ):
                listener.exitIntersection(self)



    def intersection_traffic(self):

        localctx = AVScenariosParser.Intersection_trafficContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_intersection_traffic)
        try:
            localctx = AVScenariosParser.IntersectionContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 873
            self.meta_intersection_traffic_parameter()
            self.state = 878
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,76,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 874
                    self.match(AVScenariosParser.T__8)
                    self.state = 875
                    self.meta_intersection_traffic_parameter() 
                self.state = 880
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,76,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Meta_intersection_traffic_parameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_meta_intersection_traffic_parameter

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Meta_intersection_metaContext(Meta_intersection_traffic_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Meta_intersection_traffic_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def meta_intersection_traffic(self):
            return self.getTypedRuleContext(AVScenariosParser.Meta_intersection_trafficContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeta_intersection_meta" ):
                listener.enterMeta_intersection_meta(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeta_intersection_meta" ):
                listener.exitMeta_intersection_meta(self)


    class Meta_intersection_meta_varContext(Meta_intersection_traffic_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Meta_intersection_traffic_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeta_intersection_meta_var" ):
                listener.enterMeta_intersection_meta_var(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeta_intersection_meta_var" ):
                listener.exitMeta_intersection_meta_var(self)



    def meta_intersection_traffic_parameter(self):

        localctx = AVScenariosParser.Meta_intersection_traffic_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_meta_intersection_traffic_parameter)
        try:
            self.state = 883
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                localctx = AVScenariosParser.Meta_intersection_meta_varContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 881
                self.identifier()
                pass

            elif la_ == 2:
                localctx = AVScenariosParser.Meta_intersection_metaContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 882
                self.meta_intersection_traffic()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Meta_intersection_trafficContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_meta_intersection_traffic

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Meta_intersection_intersectionContext(Meta_intersection_trafficContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Meta_intersection_trafficContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def intersection_ID_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.Intersection_ID_parameterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeta_intersection_intersection" ):
                listener.enterMeta_intersection_intersection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeta_intersection_intersection" ):
                listener.exitMeta_intersection_intersection(self)



    def meta_intersection_traffic(self):

        localctx = AVScenariosParser.Meta_intersection_trafficContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_meta_intersection_traffic)
        self._la = 0 # Token type
        try:
            localctx = AVScenariosParser.Meta_intersection_intersectionContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 885
            self.match(AVScenariosParser.T__59)
            self.state = 886
            self.match(AVScenariosParser.T__5)
            self.state = 887
            self.intersection_ID_parameter()
            self.state = 888
            self.match(AVScenariosParser.T__8)
            self.state = 889
            _la = self._input.LA(1)
            if not(_la==AVScenariosParser.T__12 or _la==AVScenariosParser.T__13):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 890
            self.match(AVScenariosParser.T__8)
            self.state = 891
            _la = self._input.LA(1)
            if not(_la==AVScenariosParser.T__12 or _la==AVScenariosParser.T__13):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 892
            self.match(AVScenariosParser.T__8)
            self.state = 893
            _la = self._input.LA(1)
            if not(_la==AVScenariosParser.T__12 or _la==AVScenariosParser.T__13):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 894
            self.match(AVScenariosParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Intersection_ID_parameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_intersection_ID_parameter

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Intersection_intersection_varContext(Intersection_ID_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Intersection_ID_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntersection_intersection_var" ):
                listener.enterIntersection_intersection_var(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntersection_intersection_var" ):
                listener.exitIntersection_intersection_var(self)


    class Intersection_intersectionContext(Intersection_ID_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Intersection_ID_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def intersection_ID(self):
            return self.getTypedRuleContext(AVScenariosParser.Intersection_IDContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntersection_intersection" ):
                listener.enterIntersection_intersection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntersection_intersection" ):
                listener.exitIntersection_intersection(self)



    def intersection_ID_parameter(self):

        localctx = AVScenariosParser.Intersection_ID_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_intersection_ID_parameter)
        try:
            self.state = 898
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AVScenariosParser.T__12, AVScenariosParser.T__13, AVScenariosParser.Signal, AVScenariosParser.Non_negative_number]:
                localctx = AVScenariosParser.Intersection_intersectionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 896
                self.intersection_ID()
                pass
            elif token in [AVScenariosParser.T__0, AVScenariosParser.T__4, AVScenariosParser.T__7, AVScenariosParser.T__9, AVScenariosParser.T__10, AVScenariosParser.T__11, AVScenariosParser.T__16, AVScenariosParser.T__17, AVScenariosParser.T__18, AVScenariosParser.T__19, AVScenariosParser.T__20, AVScenariosParser.T__21, AVScenariosParser.T__22, AVScenariosParser.T__23, AVScenariosParser.T__24, AVScenariosParser.T__25, AVScenariosParser.T__26, AVScenariosParser.T__32, AVScenariosParser.T__33, AVScenariosParser.T__34, AVScenariosParser.T__35, AVScenariosParser.T__36, AVScenariosParser.T__37, AVScenariosParser.T__38, AVScenariosParser.T__39, AVScenariosParser.T__40, AVScenariosParser.T__41, AVScenariosParser.T__42, AVScenariosParser.T__43, AVScenariosParser.T__44, AVScenariosParser.T__49, AVScenariosParser.T__59, AVScenariosParser.T__60, AVScenariosParser.T__63, AVScenariosParser.T__65, AVScenariosParser.T__68, AVScenariosParser.T__72, AVScenariosParser.T__73, AVScenariosParser.T__74, AVScenariosParser.T__75, AVScenariosParser.T__79, AVScenariosParser.T__80, AVScenariosParser.Variable_name]:
                localctx = AVScenariosParser.Intersection_intersection_varContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 897
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Intersection_IDContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_intersection_ID

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Intersection_signalContext(Intersection_IDContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Intersection_IDContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def number_value(self):
            return self.getTypedRuleContext(AVScenariosParser.Number_valueContext,0)

        def Signal(self):
            return self.getToken(AVScenariosParser.Signal, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntersection_signal" ):
                listener.enterIntersection_signal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntersection_signal" ):
                listener.exitIntersection_signal(self)



    def intersection_ID(self):

        localctx = AVScenariosParser.Intersection_IDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_intersection_ID)
        self._la = 0 # Token type
        try:
            localctx = AVScenariosParser.Intersection_signalContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 901
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==AVScenariosParser.Signal:
                self.state = 900
                self.match(AVScenariosParser.Signal)


            self.state = 903
            self.number_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lane_trafficContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_lane_traffic

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Lane_lane_speed_limitContext(Lane_trafficContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Lane_trafficContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def lane_traffic(self):
            return self.getTypedRuleContext(AVScenariosParser.Lane_trafficContext,0)

        def speed_limitation_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.Speed_limitation_parameterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLane_lane_speed_limit" ):
                listener.enterLane_lane_speed_limit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLane_lane_speed_limit" ):
                listener.exitLane_lane_speed_limit(self)


    class Lane_speed_limitContext(Lane_trafficContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Lane_trafficContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def speed_limitation_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.Speed_limitation_parameterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLane_speed_limit" ):
                listener.enterLane_speed_limit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLane_speed_limit" ):
                listener.exitLane_speed_limit(self)



    def lane_traffic(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = AVScenariosParser.Lane_trafficContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 196
        self.enterRecursionRule(localctx, 196, self.RULE_lane_traffic, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = AVScenariosParser.Lane_speed_limitContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 906
            self.speed_limitation_parameter()
            self._ctx.stop = self._input.LT(-1)
            self.state = 913
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,80,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = AVScenariosParser.Lane_lane_speed_limitContext(self, AVScenariosParser.Lane_trafficContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_lane_traffic)
                    self.state = 908
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 909
                    self.match(AVScenariosParser.T__8)
                    self.state = 910
                    self.speed_limitation_parameter() 
                self.state = 915
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,80,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Speed_limitation_parameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_speed_limitation_parameter

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Speed_limitContext(Speed_limitation_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Speed_limitation_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def speed_limitation(self):
            return self.getTypedRuleContext(AVScenariosParser.Speed_limitationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpeed_limit" ):
                listener.enterSpeed_limit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpeed_limit" ):
                listener.exitSpeed_limit(self)


    class Speed_limit_varContext(Speed_limitation_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Speed_limitation_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpeed_limit_var" ):
                listener.enterSpeed_limit_var(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpeed_limit_var" ):
                listener.exitSpeed_limit_var(self)



    def speed_limitation_parameter(self):

        localctx = AVScenariosParser.Speed_limitation_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_speed_limitation_parameter)
        try:
            self.state = 918
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                localctx = AVScenariosParser.Speed_limitContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 916
                self.speed_limitation()
                pass

            elif la_ == 2:
                localctx = AVScenariosParser.Speed_limit_varContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 917
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Speed_limitationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_speed_limitation

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Speed_limit_speed_limitContext(Speed_limitationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Speed_limitationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def laneID_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.LaneID_parameterContext,0)

        def speed_range_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.Speed_range_parameterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpeed_limit_speed_limit" ):
                listener.enterSpeed_limit_speed_limit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpeed_limit_speed_limit" ):
                listener.exitSpeed_limit_speed_limit(self)



    def speed_limitation(self):

        localctx = AVScenariosParser.Speed_limitationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_speed_limitation)
        try:
            localctx = AVScenariosParser.Speed_limit_speed_limitContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 920
            self.match(AVScenariosParser.T__60)
            self.state = 921
            self.match(AVScenariosParser.T__5)
            self.state = 922
            self.laneID_parameter()
            self.state = 923
            self.match(AVScenariosParser.T__8)
            self.state = 924
            self.speed_range_parameter()
            self.state = 925
            self.match(AVScenariosParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Speed_range_parameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_speed_range_parameter

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Speed_range_varContext(Speed_range_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Speed_range_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpeed_range_var" ):
                listener.enterSpeed_range_var(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpeed_range_var" ):
                listener.exitSpeed_range_var(self)


    class Speed_range_speedContext(Speed_range_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Speed_range_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def speed_range(self):
            return self.getTypedRuleContext(AVScenariosParser.Speed_rangeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpeed_range_speed" ):
                listener.enterSpeed_range_speed(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpeed_range_speed" ):
                listener.exitSpeed_range_speed(self)



    def speed_range_parameter(self):

        localctx = AVScenariosParser.Speed_range_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_speed_range_parameter)
        try:
            self.state = 929
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AVScenariosParser.T__0, AVScenariosParser.T__4, AVScenariosParser.T__7, AVScenariosParser.T__9, AVScenariosParser.T__10, AVScenariosParser.T__11, AVScenariosParser.T__16, AVScenariosParser.T__17, AVScenariosParser.T__18, AVScenariosParser.T__19, AVScenariosParser.T__20, AVScenariosParser.T__21, AVScenariosParser.T__22, AVScenariosParser.T__23, AVScenariosParser.T__24, AVScenariosParser.T__25, AVScenariosParser.T__26, AVScenariosParser.T__32, AVScenariosParser.T__33, AVScenariosParser.T__34, AVScenariosParser.T__35, AVScenariosParser.T__36, AVScenariosParser.T__37, AVScenariosParser.T__38, AVScenariosParser.T__39, AVScenariosParser.T__40, AVScenariosParser.T__41, AVScenariosParser.T__42, AVScenariosParser.T__43, AVScenariosParser.T__44, AVScenariosParser.T__49, AVScenariosParser.T__59, AVScenariosParser.T__60, AVScenariosParser.T__63, AVScenariosParser.T__65, AVScenariosParser.T__68, AVScenariosParser.T__72, AVScenariosParser.T__73, AVScenariosParser.T__74, AVScenariosParser.T__75, AVScenariosParser.T__79, AVScenariosParser.T__80, AVScenariosParser.Variable_name]:
                localctx = AVScenariosParser.Speed_range_varContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 927
                self.identifier()
                pass
            elif token in [AVScenariosParser.T__5]:
                localctx = AVScenariosParser.Speed_range_speedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 928
                self.speed_range()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Speed_rangeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_speed_range

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Speed_range_valueContext(Speed_rangeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Speed_rangeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def non_negative_real_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AVScenariosParser.Non_negative_real_valueContext)
            else:
                return self.getTypedRuleContext(AVScenariosParser.Non_negative_real_valueContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpeed_range_value" ):
                listener.enterSpeed_range_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpeed_range_value" ):
                listener.exitSpeed_range_value(self)



    def speed_range(self):

        localctx = AVScenariosParser.Speed_rangeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_speed_range)
        try:
            localctx = AVScenariosParser.Speed_range_valueContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 931
            self.match(AVScenariosParser.T__5)
            self.state = 932
            self.non_negative_real_value()
            self.state = 933
            self.match(AVScenariosParser.T__8)
            self.state = 934
            self.non_negative_real_value()
            self.state = 935
            self.match(AVScenariosParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Trace_assignmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_trace_assignment

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Trace_scenarioContext(Trace_assignmentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Trace_assignmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def trace_identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.Trace_identifierContext,0)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrace_scenario" ):
                listener.enterTrace_scenario(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrace_scenario" ):
                listener.exitTrace_scenario(self)



    def trace_assignment(self):

        localctx = AVScenariosParser.Trace_assignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_trace_assignment)
        try:
            localctx = AVScenariosParser.Trace_scenarioContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 937
            self.match(AVScenariosParser.T__61)
            self.state = 938
            self.trace_identifier()
            self.state = 939
            self.match(AVScenariosParser.T__62)
            self.state = 940
            self.match(AVScenariosParser.T__63)
            self.state = 941
            self.match(AVScenariosParser.T__5)
            self.state = 942
            self.identifier()
            self.state = 943
            self.match(AVScenariosParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Trace_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_trace_identifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Trace_idContext(Trace_identifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Trace_identifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrace_id" ):
                listener.enterTrace_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrace_id" ):
                listener.exitTrace_id(self)



    def trace_identifier(self):

        localctx = AVScenariosParser.Trace_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_trace_identifier)
        try:
            localctx = AVScenariosParser.Trace_idContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 945
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Detection_assertionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_detection_assertion

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Trace_detectionContext(Detection_assertionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Detection_assertionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def trace_identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.Trace_identifierContext,0)

        def detection_statement(self):
            return self.getTypedRuleContext(AVScenariosParser.Detection_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrace_detection" ):
                listener.enterTrace_detection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrace_detection" ):
                listener.exitTrace_detection(self)



    def detection_assertion(self):

        localctx = AVScenariosParser.Detection_assertionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_detection_assertion)
        try:
            localctx = AVScenariosParser.Trace_detectionContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 947
            self.trace_identifier()
            self.state = 948
            self.match(AVScenariosParser.T__64)
            self.state = 949
            self.match(AVScenariosParser.T__65)
            self.state = 950
            self.detection_statement(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Detection_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_detection_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Detection_detection_singleContext(Detection_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Detection_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def detection_statement(self):
            return self.getTypedRuleContext(AVScenariosParser.Detection_statementContext,0)

        def single_detection(self):
            return self.getTypedRuleContext(AVScenariosParser.Single_detectionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDetection_detection_single" ):
                listener.enterDetection_detection_single(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDetection_detection_single" ):
                listener.exitDetection_detection_single(self)


    class Detection_singleContext(Detection_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Detection_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def single_detection(self):
            return self.getTypedRuleContext(AVScenariosParser.Single_detectionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDetection_single" ):
                listener.enterDetection_single(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDetection_single" ):
                listener.exitDetection_single(self)



    def detection_statement(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = AVScenariosParser.Detection_statementContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 212
        self.enterRecursionRule(localctx, 212, self.RULE_detection_statement, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = AVScenariosParser.Detection_singleContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 953
            self.single_detection()
            self._ctx.stop = self._input.LT(-1)
            self.state = 960
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,83,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = AVScenariosParser.Detection_detection_singleContext(self, AVScenariosParser.Detection_statementContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_detection_statement)
                    self.state = 955
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 956
                    self.match(AVScenariosParser.T__66)
                    self.state = 957
                    self.single_detection() 
                self.state = 962
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,83,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Single_detectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_single_detection

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Single_trafficContext(Single_detectionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Single_detectionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def traffic_detection(self):
            return self.getTypedRuleContext(AVScenariosParser.Traffic_detectionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_traffic" ):
                listener.enterSingle_traffic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_traffic" ):
                listener.exitSingle_traffic(self)


    class Single_agentContext(Single_detectionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Single_detectionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def agent_detection(self):
            return self.getTypedRuleContext(AVScenariosParser.Agent_detectionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_agent" ):
                listener.enterSingle_agent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_agent" ):
                listener.exitSingle_agent(self)



    def single_detection(self):

        localctx = AVScenariosParser.Single_detectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_single_detection)
        try:
            self.state = 965
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                localctx = AVScenariosParser.Single_agentContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 963
                self.agent_detection()
                pass

            elif la_ == 2:
                localctx = AVScenariosParser.Single_trafficContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 964
                self.traffic_detection()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Agent_detectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_agent_detection

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Agent_visibleContext(Agent_detectionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Agent_detectionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def agent_visible_statement(self):
            return self.getTypedRuleContext(AVScenariosParser.Agent_visible_statementContext,0)

        def agent_error_statement(self):
            return self.getTypedRuleContext(AVScenariosParser.Agent_error_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAgent_visible" ):
                listener.enterAgent_visible(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAgent_visible" ):
                listener.exitAgent_visible(self)



    def agent_detection(self):

        localctx = AVScenariosParser.Agent_detectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_agent_detection)
        try:
            localctx = AVScenariosParser.Agent_visibleContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 967
            self.agent_visible_statement()
            self.state = 968
            self.match(AVScenariosParser.T__66)
            self.state = 969
            self.agent_error_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Agent_visible_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_agent_visible_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Agent_visible_assertContext(Agent_visible_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Agent_visible_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def agent_ground_distance_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.Agent_ground_distance_parameterContext,0)

        def sensing_range(self):
            return self.getTypedRuleContext(AVScenariosParser.Sensing_rangeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAgent_visible_assert" ):
                listener.enterAgent_visible_assert(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAgent_visible_assert" ):
                listener.exitAgent_visible_assert(self)



    def agent_visible_statement(self):

        localctx = AVScenariosParser.Agent_visible_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_agent_visible_statement)
        try:
            localctx = AVScenariosParser.Agent_visible_assertContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 971
            self.agent_ground_distance_parameter()
            self.state = 972
            self.match(AVScenariosParser.T__67)
            self.state = 973
            self.sensing_range()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Agent_ground_distance_parameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_agent_ground_distance_parameter

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Agent_idContext(Agent_ground_distance_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Agent_ground_distance_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAgent_id" ):
                listener.enterAgent_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAgent_id" ):
                listener.exitAgent_id(self)


    class Agent_parContext(Agent_ground_distance_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Agent_ground_distance_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def agent_ground_distance(self):
            return self.getTypedRuleContext(AVScenariosParser.Agent_ground_distanceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAgent_par" ):
                listener.enterAgent_par(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAgent_par" ):
                listener.exitAgent_par(self)



    def agent_ground_distance_parameter(self):

        localctx = AVScenariosParser.Agent_ground_distance_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_agent_ground_distance_parameter)
        try:
            self.state = 977
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                localctx = AVScenariosParser.Agent_idContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 975
                self.identifier()
                pass

            elif la_ == 2:
                localctx = AVScenariosParser.Agent_parContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 976
                self.agent_ground_distance()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Agent_ground_distanceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_agent_ground_distance

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Agent_groundContext(Agent_ground_distanceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Agent_ground_distanceContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ego_state_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.Ego_state_parameterContext,0)

        def agent_ground_truth_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.Agent_ground_truth_parameterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAgent_ground" ):
                listener.enterAgent_ground(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAgent_ground" ):
                listener.exitAgent_ground(self)



    def agent_ground_distance(self):

        localctx = AVScenariosParser.Agent_ground_distanceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_agent_ground_distance)
        try:
            localctx = AVScenariosParser.Agent_groundContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 979
            self.match(AVScenariosParser.T__68)
            self.state = 980
            self.match(AVScenariosParser.T__5)
            self.state = 981
            self.ego_state_parameter()
            self.state = 982
            self.match(AVScenariosParser.T__8)
            self.state = 983
            self.agent_ground_truth_parameter()
            self.state = 984
            self.match(AVScenariosParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ego_state_parameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_ego_state_parameter

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Ego_state_idContext(Ego_state_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Ego_state_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEgo_state_id" ):
                listener.enterEgo_state_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEgo_state_id" ):
                listener.exitEgo_state_id(self)


    class Ego_state_parContext(Ego_state_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Ego_state_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ego_state(self):
            return self.getTypedRuleContext(AVScenariosParser.Ego_stateContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEgo_state_par" ):
                listener.enterEgo_state_par(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEgo_state_par" ):
                listener.exitEgo_state_par(self)



    def ego_state_parameter(self):

        localctx = AVScenariosParser.Ego_state_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_ego_state_parameter)
        try:
            self.state = 988
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                localctx = AVScenariosParser.Ego_state_idContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 986
                self.identifier()
                pass

            elif la_ == 2:
                localctx = AVScenariosParser.Ego_state_parContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 987
                self.ego_state()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ego_stateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_ego_state

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Ego_state_egoContext(Ego_stateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Ego_stateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def trace_state(self):
            return self.getTypedRuleContext(AVScenariosParser.Trace_stateContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEgo_state_ego" ):
                listener.enterEgo_state_ego(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEgo_state_ego" ):
                listener.exitEgo_state_ego(self)



    def ego_state(self):

        localctx = AVScenariosParser.Ego_stateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_ego_state)
        try:
            localctx = AVScenariosParser.Ego_state_egoContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 990
            self.trace_state()
            self.state = 991
            self.match(AVScenariosParser.T__69)
            self.state = 992
            self.match(AVScenariosParser.T__70)
            self.state = 993
            self.match(AVScenariosParser.T__71)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Agent_ground_truth_parameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_agent_ground_truth_parameter

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Agent_ground_truth_idContext(Agent_ground_truth_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Agent_ground_truth_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAgent_ground_truth_id" ):
                listener.enterAgent_ground_truth_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAgent_ground_truth_id" ):
                listener.exitAgent_ground_truth_id(self)


    class Agent_ground_truth_parContext(Agent_ground_truth_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Agent_ground_truth_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def agent_ground_truth(self):
            return self.getTypedRuleContext(AVScenariosParser.Agent_ground_truthContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAgent_ground_truth_par" ):
                listener.enterAgent_ground_truth_par(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAgent_ground_truth_par" ):
                listener.exitAgent_ground_truth_par(self)



    def agent_ground_truth_parameter(self):

        localctx = AVScenariosParser.Agent_ground_truth_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_agent_ground_truth_parameter)
        try:
            self.state = 997
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                localctx = AVScenariosParser.Agent_ground_truth_idContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 995
                self.identifier()
                pass

            elif la_ == 2:
                localctx = AVScenariosParser.Agent_ground_truth_parContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 996
                self.agent_ground_truth()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Agent_ground_truthContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_agent_ground_truth

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Agent_ground_idContext(Agent_ground_truthContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Agent_ground_truthContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def trace_state(self):
            return self.getTypedRuleContext(AVScenariosParser.Trace_stateContext,0)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAgent_ground_id" ):
                listener.enterAgent_ground_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAgent_ground_id" ):
                listener.exitAgent_ground_id(self)



    def agent_ground_truth(self):

        localctx = AVScenariosParser.Agent_ground_truthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_agent_ground_truth)
        try:
            localctx = AVScenariosParser.Agent_ground_idContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 999
            self.trace_state()
            self.state = 1000
            self.match(AVScenariosParser.T__69)
            self.state = 1001
            self.match(AVScenariosParser.T__72)
            self.state = 1002
            self.match(AVScenariosParser.T__71)
            self.state = 1003
            self.match(AVScenariosParser.T__69)
            self.state = 1004
            self.identifier()
            self.state = 1005
            self.match(AVScenariosParser.T__71)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Trace_stateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_trace_state

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Trace_numberContext(Trace_stateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Trace_stateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def trace_identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.Trace_identifierContext,0)

        def number_value(self):
            return self.getTypedRuleContext(AVScenariosParser.Number_valueContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrace_number" ):
                listener.enterTrace_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrace_number" ):
                listener.exitTrace_number(self)



    def trace_state(self):

        localctx = AVScenariosParser.Trace_stateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_trace_state)
        try:
            localctx = AVScenariosParser.Trace_numberContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 1007
            self.trace_identifier()
            self.state = 1008
            self.match(AVScenariosParser.T__69)
            self.state = 1009
            self.number_value()
            self.state = 1010
            self.match(AVScenariosParser.T__71)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sensing_rangeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_sensing_range

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Sensing_valueContext(Sensing_rangeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Sensing_rangeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def non_negative_real_value(self):
            return self.getTypedRuleContext(AVScenariosParser.Non_negative_real_valueContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSensing_value" ):
                listener.enterSensing_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSensing_value" ):
                listener.exitSensing_value(self)



    def sensing_range(self):

        localctx = AVScenariosParser.Sensing_rangeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_sensing_range)
        try:
            localctx = AVScenariosParser.Sensing_valueContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 1012
            self.non_negative_real_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Agent_error_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_agent_error_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Agent_error_assertContext(Agent_error_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Agent_error_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def agent_error_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.Agent_error_parameterContext,0)

        def error_threshold(self):
            return self.getTypedRuleContext(AVScenariosParser.Error_thresholdContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAgent_error_assert" ):
                listener.enterAgent_error_assert(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAgent_error_assert" ):
                listener.exitAgent_error_assert(self)



    def agent_error_statement(self):

        localctx = AVScenariosParser.Agent_error_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_agent_error_statement)
        try:
            localctx = AVScenariosParser.Agent_error_assertContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 1014
            self.agent_error_parameter()
            self.state = 1015
            self.match(AVScenariosParser.T__67)
            self.state = 1016
            self.error_threshold()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Error_thresholdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_error_threshold

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Error_valueContext(Error_thresholdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Error_thresholdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def non_negative_real_value(self):
            return self.getTypedRuleContext(AVScenariosParser.Non_negative_real_valueContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterError_value" ):
                listener.enterError_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitError_value" ):
                listener.exitError_value(self)



    def error_threshold(self):

        localctx = AVScenariosParser.Error_thresholdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_error_threshold)
        try:
            localctx = AVScenariosParser.Error_valueContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 1018
            self.non_negative_real_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Agent_error_parameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_agent_error_parameter

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Agent_error_parContext(Agent_error_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Agent_error_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def agent_error(self):
            return self.getTypedRuleContext(AVScenariosParser.Agent_errorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAgent_error_par" ):
                listener.enterAgent_error_par(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAgent_error_par" ):
                listener.exitAgent_error_par(self)


    class Agent_error_idContext(Agent_error_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Agent_error_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAgent_error_id" ):
                listener.enterAgent_error_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAgent_error_id" ):
                listener.exitAgent_error_id(self)



    def agent_error_parameter(self):

        localctx = AVScenariosParser.Agent_error_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_agent_error_parameter)
        try:
            self.state = 1022
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                localctx = AVScenariosParser.Agent_error_idContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1020
                self.identifier()
                pass

            elif la_ == 2:
                localctx = AVScenariosParser.Agent_error_parContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1021
                self.agent_error()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Agent_errorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_agent_error

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Agent_error_stmtContext(Agent_errorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Agent_errorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def agent_state_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.Agent_state_parameterContext,0)

        def agent_ground_truth_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.Agent_ground_truth_parameterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAgent_error_stmt" ):
                listener.enterAgent_error_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAgent_error_stmt" ):
                listener.exitAgent_error_stmt(self)



    def agent_error(self):

        localctx = AVScenariosParser.Agent_errorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_agent_error)
        try:
            localctx = AVScenariosParser.Agent_error_stmtContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 1024
            self.match(AVScenariosParser.T__73)
            self.state = 1025
            self.match(AVScenariosParser.T__5)
            self.state = 1026
            self.agent_state_parameter()
            self.state = 1027
            self.match(AVScenariosParser.T__8)
            self.state = 1028
            self.agent_ground_truth_parameter()
            self.state = 1029
            self.match(AVScenariosParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Agent_state_parameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_agent_state_parameter

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Agent_state_parContext(Agent_state_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Agent_state_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def agent_state(self):
            return self.getTypedRuleContext(AVScenariosParser.Agent_stateContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAgent_state_par" ):
                listener.enterAgent_state_par(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAgent_state_par" ):
                listener.exitAgent_state_par(self)


    class Agent_state_idContext(Agent_state_parameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Agent_state_parameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAgent_state_id" ):
                listener.enterAgent_state_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAgent_state_id" ):
                listener.exitAgent_state_id(self)



    def agent_state_parameter(self):

        localctx = AVScenariosParser.Agent_state_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_agent_state_parameter)
        try:
            self.state = 1033
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                localctx = AVScenariosParser.Agent_state_idContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1031
                self.identifier()
                pass

            elif la_ == 2:
                localctx = AVScenariosParser.Agent_state_parContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1032
                self.agent_state()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Agent_stateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_agent_state

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Agent_state_traceContext(Agent_stateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Agent_stateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def trace_state(self):
            return self.getTypedRuleContext(AVScenariosParser.Trace_stateContext,0)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAgent_state_trace" ):
                listener.enterAgent_state_trace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAgent_state_trace" ):
                listener.exitAgent_state_trace(self)



    def agent_state(self):

        localctx = AVScenariosParser.Agent_stateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_agent_state)
        try:
            localctx = AVScenariosParser.Agent_state_traceContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 1035
            self.trace_state()
            self.state = 1036
            self.match(AVScenariosParser.T__69)
            self.state = 1037
            self.match(AVScenariosParser.T__74)
            self.state = 1038
            self.match(AVScenariosParser.T__71)
            self.state = 1039
            self.match(AVScenariosParser.T__69)
            self.state = 1040
            self.identifier()
            self.state = 1041
            self.match(AVScenariosParser.T__71)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Traffic_detectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_traffic_detection

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Traffic_detection_assertContext(Traffic_detectionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Traffic_detectionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def trace_state(self):
            return self.getTypedRuleContext(AVScenariosParser.Trace_stateContext,0)

        def trace_detection_right(self):
            return self.getTypedRuleContext(AVScenariosParser.Trace_detection_rightContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraffic_detection_assert" ):
                listener.enterTraffic_detection_assert(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraffic_detection_assert" ):
                listener.exitTraffic_detection_assert(self)



    def traffic_detection(self):

        localctx = AVScenariosParser.Traffic_detectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_traffic_detection)
        try:
            localctx = AVScenariosParser.Traffic_detection_assertContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 1043
            self.trace_state()
            self.state = 1044
            self.match(AVScenariosParser.T__69)
            self.state = 1045
            self.match(AVScenariosParser.T__74)
            self.state = 1046
            self.match(AVScenariosParser.T__71)
            self.state = 1047
            self.match(AVScenariosParser.T__69)
            self.state = 1048
            self.match(AVScenariosParser.T__75)
            self.state = 1049
            self.match(AVScenariosParser.T__71)
            self.state = 1050
            self.trace_detection_right()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Trace_detection_rightContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_trace_detection_right

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Traffic_detection_assert_rightContext(Trace_detection_rightContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Trace_detection_rightContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def trace_state(self):
            return self.getTypedRuleContext(AVScenariosParser.Trace_stateContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraffic_detection_assert_right" ):
                listener.enterTraffic_detection_assert_right(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraffic_detection_assert_right" ):
                listener.exitTraffic_detection_assert_right(self)



    def trace_detection_right(self):

        localctx = AVScenariosParser.Trace_detection_rightContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_trace_detection_right)
        try:
            localctx = AVScenariosParser.Traffic_detection_assert_rightContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 1052
            self.match(AVScenariosParser.T__76)
            self.state = 1053
            self.trace_state()
            self.state = 1054
            self.match(AVScenariosParser.T__69)
            self.state = 1055
            self.match(AVScenariosParser.T__72)
            self.state = 1056
            self.match(AVScenariosParser.T__71)
            self.state = 1057
            self.match(AVScenariosParser.T__69)
            self.state = 1058
            self.match(AVScenariosParser.T__75)
            self.state = 1059
            self.match(AVScenariosParser.T__71)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Safety_assertionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_safety_assertion

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Trace_safetyContext(Safety_assertionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Safety_assertionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def trace_identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.Trace_identifierContext,0)

        def safety_statement(self):
            return self.getTypedRuleContext(AVScenariosParser.Safety_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrace_safety" ):
                listener.enterTrace_safety(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrace_safety" ):
                listener.exitTrace_safety(self)



    def safety_assertion(self):

        localctx = AVScenariosParser.Safety_assertionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_safety_assertion)
        try:
            localctx = AVScenariosParser.Trace_safetyContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 1061
            self.trace_identifier()
            self.state = 1062
            self.match(AVScenariosParser.T__64)
            self.state = 1063
            self.match(AVScenariosParser.T__65)
            self.state = 1064
            self.safety_statement(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Safety_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_safety_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Safety_singleContext(Safety_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Safety_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def single_safety_statement(self):
            return self.getTypedRuleContext(AVScenariosParser.Single_safety_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSafety_single" ):
                listener.enterSafety_single(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSafety_single" ):
                listener.exitSafety_single(self)


    class Safety_single_singleContext(Safety_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Safety_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def safety_statement(self):
            return self.getTypedRuleContext(AVScenariosParser.Safety_statementContext,0)

        def single_safety_statement(self):
            return self.getTypedRuleContext(AVScenariosParser.Single_safety_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSafety_single_single" ):
                listener.enterSafety_single_single(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSafety_single_single" ):
                listener.exitSafety_single_single(self)



    def safety_statement(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = AVScenariosParser.Safety_statementContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 254
        self.enterRecursionRule(localctx, 254, self.RULE_safety_statement, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = AVScenariosParser.Safety_singleContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1067
            self.single_safety_statement()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1074
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,90,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = AVScenariosParser.Safety_single_singleContext(self, AVScenariosParser.Safety_statementContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_safety_statement)
                    self.state = 1069
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1070
                    self.match(AVScenariosParser.T__66)
                    self.state = 1071
                    self.single_safety_statement() 
                self.state = 1076
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,90,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Single_safety_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_single_safety_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Single_safetyContext(Single_safety_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Single_safety_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def agent_detection(self):
            return self.getTypedRuleContext(AVScenariosParser.Agent_detectionContext,0)

        def agent_safety_statement(self):
            return self.getTypedRuleContext(AVScenariosParser.Agent_safety_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_safety" ):
                listener.enterSingle_safety(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_safety" ):
                listener.exitSingle_safety(self)



    def single_safety_statement(self):

        localctx = AVScenariosParser.Single_safety_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_single_safety_statement)
        try:
            localctx = AVScenariosParser.Single_safetyContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 1077
            self.agent_detection()
            self.state = 1078
            self.match(AVScenariosParser.T__66)
            self.state = 1079
            self.agent_safety_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Agent_safety_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_agent_safety_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Agent_safetyContext(Agent_safety_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Agent_safety_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ego_state_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.Ego_state_parameterContext,0)

        def agent_state_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.Agent_state_parameterContext,0)

        def safety_radius(self):
            return self.getTypedRuleContext(AVScenariosParser.Safety_radiusContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAgent_safety" ):
                listener.enterAgent_safety(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAgent_safety" ):
                listener.exitAgent_safety(self)



    def agent_safety_statement(self):

        localctx = AVScenariosParser.Agent_safety_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_agent_safety_statement)
        try:
            localctx = AVScenariosParser.Agent_safetyContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 1081
            self.match(AVScenariosParser.T__68)
            self.state = 1082
            self.match(AVScenariosParser.T__5)
            self.state = 1083
            self.ego_state_parameter()
            self.state = 1084
            self.match(AVScenariosParser.T__8)
            self.state = 1085
            self.agent_state_parameter()
            self.state = 1086
            self.match(AVScenariosParser.T__6)
            self.state = 1087
            self.match(AVScenariosParser.T__77)
            self.state = 1088
            self.safety_radius()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Safety_radiusContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_safety_radius

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Safety_radius_valueContext(Safety_radiusContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Safety_radiusContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def float_value(self):
            return self.getTypedRuleContext(AVScenariosParser.Float_valueContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSafety_radius_value" ):
                listener.enterSafety_radius_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSafety_radius_value" ):
                listener.exitSafety_radius_value(self)



    def safety_radius(self):

        localctx = AVScenariosParser.Safety_radiusContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_safety_radius)
        try:
            localctx = AVScenariosParser.Safety_radius_valueContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 1090
            self.float_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Intersection_assertionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_intersection_assertion

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Trace_intersectionContext(Intersection_assertionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Intersection_assertionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def trace_identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.Trace_identifierContext,0)

        def red_light_statement(self):
            return self.getTypedRuleContext(AVScenariosParser.Red_light_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrace_intersection" ):
                listener.enterTrace_intersection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrace_intersection" ):
                listener.exitTrace_intersection(self)



    def intersection_assertion(self):

        localctx = AVScenariosParser.Intersection_assertionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_intersection_assertion)
        try:
            localctx = AVScenariosParser.Trace_intersectionContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 1092
            self.trace_identifier()
            self.state = 1093
            self.match(AVScenariosParser.T__64)
            self.state = 1094
            self.match(AVScenariosParser.T__65)
            self.state = 1095
            self.red_light_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Red_light_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_red_light_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Red_light_stmtContext(Red_light_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Red_light_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def traffic_detection(self):
            return self.getTypedRuleContext(AVScenariosParser.Traffic_detectionContext,0)

        def red_light(self):
            return self.getTypedRuleContext(AVScenariosParser.Red_lightContext,0)

        def red_light_statement_right(self):
            return self.getTypedRuleContext(AVScenariosParser.Red_light_statement_rightContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRed_light_stmt" ):
                listener.enterRed_light_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRed_light_stmt" ):
                listener.exitRed_light_stmt(self)



    def red_light_statement(self):

        localctx = AVScenariosParser.Red_light_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_red_light_statement)
        try:
            localctx = AVScenariosParser.Red_light_stmtContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 1097
            self.match(AVScenariosParser.T__5)
            self.state = 1098
            self.traffic_detection()
            self.state = 1099
            self.match(AVScenariosParser.T__66)
            self.state = 1100
            self.red_light()
            self.state = 1101
            self.match(AVScenariosParser.T__6)
            self.state = 1102
            self.red_light_statement_right()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Red_light_statement_rightContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_red_light_statement_right

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Red_light_stmt_rightContext(Red_light_statement_rightContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Red_light_statement_rightContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ego_speed(self):
            return self.getTypedRuleContext(AVScenariosParser.Ego_speedContext,0)

        def traffic_detection(self):
            return self.getTypedRuleContext(AVScenariosParser.Traffic_detectionContext,0)

        def green_light(self):
            return self.getTypedRuleContext(AVScenariosParser.Green_lightContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRed_light_stmt_right" ):
                listener.enterRed_light_stmt_right(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRed_light_stmt_right" ):
                listener.exitRed_light_stmt_right(self)



    def red_light_statement_right(self):

        localctx = AVScenariosParser.Red_light_statement_rightContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_red_light_statement_right)
        try:
            localctx = AVScenariosParser.Red_light_stmt_rightContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 1104
            self.match(AVScenariosParser.T__14)
            self.state = 1105
            self.match(AVScenariosParser.T__5)
            self.state = 1106
            self.match(AVScenariosParser.T__78)
            self.state = 1107
            self.ego_speed()
            self.state = 1108
            self.match(AVScenariosParser.T__35)
            self.state = 1109
            self.match(AVScenariosParser.T__5)
            self.state = 1110
            self.traffic_detection()
            self.state = 1111
            self.match(AVScenariosParser.T__66)
            self.state = 1112
            self.green_light()
            self.state = 1113
            self.match(AVScenariosParser.T__6)
            self.state = 1114
            self.match(AVScenariosParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Red_lightContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_red_light

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RedContext(Red_lightContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Red_lightContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def trace_state(self):
            return self.getTypedRuleContext(AVScenariosParser.Trace_stateContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRed" ):
                listener.enterRed(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRed" ):
                listener.exitRed(self)



    def red_light(self):

        localctx = AVScenariosParser.Red_lightContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_red_light)
        try:
            localctx = AVScenariosParser.RedContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 1116
            self.trace_state()
            self.state = 1117
            self.match(AVScenariosParser.T__69)
            self.state = 1118
            self.match(AVScenariosParser.T__75)
            self.state = 1119
            self.match(AVScenariosParser.T__71)
            self.state = 1120
            self.match(AVScenariosParser.T__76)
            self.state = 1121
            self.match(AVScenariosParser.T__27)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Green_lightContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_green_light

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class GreenContext(Green_lightContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Green_lightContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def trace_state(self):
            return self.getTypedRuleContext(AVScenariosParser.Trace_stateContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGreen" ):
                listener.enterGreen(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGreen" ):
                listener.exitGreen(self)



    def green_light(self):

        localctx = AVScenariosParser.Green_lightContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_green_light)
        try:
            localctx = AVScenariosParser.GreenContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 1123
            self.trace_state()
            self.state = 1124
            self.match(AVScenariosParser.T__69)
            self.state = 1125
            self.match(AVScenariosParser.T__75)
            self.state = 1126
            self.match(AVScenariosParser.T__71)
            self.state = 1127
            self.match(AVScenariosParser.T__76)
            self.state = 1128
            self.match(AVScenariosParser.T__28)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ego_speedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_ego_speed

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Ego_speed_valueContext(Ego_speedContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Ego_speedContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ego_velocity(self):
            return self.getTypedRuleContext(AVScenariosParser.Ego_velocityContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEgo_speed_value" ):
                listener.enterEgo_speed_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEgo_speed_value" ):
                listener.exitEgo_speed_value(self)



    def ego_speed(self):

        localctx = AVScenariosParser.Ego_speedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_ego_speed)
        try:
            localctx = AVScenariosParser.Ego_speed_valueContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 1130
            self.match(AVScenariosParser.T__79)
            self.state = 1131
            self.match(AVScenariosParser.T__5)
            self.state = 1132
            self.ego_velocity()
            self.state = 1133
            self.match(AVScenariosParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ego_velocityContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_ego_velocity

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Ego_velocity_valueContext(Ego_velocityContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Ego_velocityContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def coordinate(self):
            return self.getTypedRuleContext(AVScenariosParser.CoordinateContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEgo_velocity_value" ):
                listener.enterEgo_velocity_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEgo_velocity_value" ):
                listener.exitEgo_velocity_value(self)



    def ego_velocity(self):

        localctx = AVScenariosParser.Ego_velocityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_ego_velocity)
        try:
            localctx = AVScenariosParser.Ego_velocity_valueContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 1135
            self.coordinate()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Speed_constraint_assertionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_speed_constraint_assertion

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Trace_speedContext(Speed_constraint_assertionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Speed_constraint_assertionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def trace_identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.Trace_identifierContext,0)

        def speed_statement(self):
            return self.getTypedRuleContext(AVScenariosParser.Speed_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrace_speed" ):
                listener.enterTrace_speed(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrace_speed" ):
                listener.exitTrace_speed(self)



    def speed_constraint_assertion(self):

        localctx = AVScenariosParser.Speed_constraint_assertionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_speed_constraint_assertion)
        try:
            localctx = AVScenariosParser.Trace_speedContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 1137
            self.trace_identifier()
            self.state = 1138
            self.match(AVScenariosParser.T__64)
            self.state = 1139
            self.match(AVScenariosParser.T__65)
            self.state = 1140
            self.speed_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Speed_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_speed_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Speed_assertContext(Speed_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Speed_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def traffic_detection(self):
            return self.getTypedRuleContext(AVScenariosParser.Traffic_detectionContext,0)

        def speed_limitation_checking(self):
            return self.getTypedRuleContext(AVScenariosParser.Speed_limitation_checkingContext,0)

        def speed_violation(self):
            return self.getTypedRuleContext(AVScenariosParser.Speed_violationContext,0)

        def speed_statement_right(self):
            return self.getTypedRuleContext(AVScenariosParser.Speed_statement_rightContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpeed_assert" ):
                listener.enterSpeed_assert(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpeed_assert" ):
                listener.exitSpeed_assert(self)



    def speed_statement(self):

        localctx = AVScenariosParser.Speed_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_speed_statement)
        try:
            localctx = AVScenariosParser.Speed_assertContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 1142
            self.match(AVScenariosParser.T__5)
            self.state = 1143
            self.traffic_detection()
            self.state = 1144
            self.match(AVScenariosParser.T__66)
            self.state = 1145
            self.speed_limitation_checking()
            self.state = 1146
            self.match(AVScenariosParser.T__66)
            self.state = 1147
            self.speed_violation()
            self.state = 1148
            self.match(AVScenariosParser.T__6)
            self.state = 1149
            self.speed_statement_right()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Speed_statement_rightContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_speed_statement_right

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Speed_assert_rightContext(Speed_statement_rightContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Speed_statement_rightContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def time_duration(self):
            return self.getTypedRuleContext(AVScenariosParser.Time_durationContext,0)

        def speed_violation(self):
            return self.getTypedRuleContext(AVScenariosParser.Speed_violationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpeed_assert_right" ):
                listener.enterSpeed_assert_right(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpeed_assert_right" ):
                listener.exitSpeed_assert_right(self)



    def speed_statement_right(self):

        localctx = AVScenariosParser.Speed_statement_rightContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_speed_statement_right)
        try:
            localctx = AVScenariosParser.Speed_assert_rightContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 1151
            self.match(AVScenariosParser.T__14)
            self.state = 1152
            self.match(AVScenariosParser.T__80)
            self.state = 1153
            self.match(AVScenariosParser.T__69)
            self.state = 1154
            self.match(AVScenariosParser.T__12)
            self.state = 1155
            self.match(AVScenariosParser.T__8)
            self.state = 1156
            self.time_duration()
            self.state = 1157
            self.match(AVScenariosParser.T__71)
            self.state = 1158
            self.match(AVScenariosParser.T__78)
            self.state = 1159
            self.speed_violation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Speed_limitation_checkingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_speed_limitation_checking

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Speed_checkingContext(Speed_limitation_checkingContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Speed_limitation_checkingContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def trace_state(self):
            return self.getTypedRuleContext(AVScenariosParser.Trace_stateContext,0)

        def speed_range_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.Speed_range_parameterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpeed_checking" ):
                listener.enterSpeed_checking(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpeed_checking" ):
                listener.exitSpeed_checking(self)



    def speed_limitation_checking(self):

        localctx = AVScenariosParser.Speed_limitation_checkingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_speed_limitation_checking)
        try:
            localctx = AVScenariosParser.Speed_checkingContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 1161
            self.trace_state()
            self.state = 1162
            self.match(AVScenariosParser.T__69)
            self.state = 1163
            self.match(AVScenariosParser.T__75)
            self.state = 1164
            self.match(AVScenariosParser.T__71)
            self.state = 1165
            self.match(AVScenariosParser.T__76)
            self.state = 1166
            self.speed_range_parameter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Speed_violationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_speed_violation

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Speed_violation_stmt0Context(Speed_violationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Speed_violationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def speed_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.Speed_parameterContext,0)

        def trace_state(self):
            return self.getTypedRuleContext(AVScenariosParser.Trace_stateContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpeed_violation_stmt0" ):
                listener.enterSpeed_violation_stmt0(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpeed_violation_stmt0" ):
                listener.exitSpeed_violation_stmt0(self)


    class Speed_violation_stmt1Context(Speed_violationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Speed_violationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def speed_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.Speed_parameterContext,0)

        def trace_state(self):
            return self.getTypedRuleContext(AVScenariosParser.Trace_stateContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpeed_violation_stmt1" ):
                listener.enterSpeed_violation_stmt1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpeed_violation_stmt1" ):
                listener.exitSpeed_violation_stmt1(self)



    def speed_violation(self):

        localctx = AVScenariosParser.Speed_violationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_speed_violation)
        try:
            self.state = 1188
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                localctx = AVScenariosParser.Speed_violation_stmt0Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1168
                self.speed_parameter()
                self.state = 1169
                self.match(AVScenariosParser.T__81)
                self.state = 1170
                self.trace_state()
                self.state = 1171
                self.match(AVScenariosParser.T__69)
                self.state = 1172
                self.match(AVScenariosParser.T__75)
                self.state = 1173
                self.match(AVScenariosParser.T__71)
                self.state = 1174
                self.match(AVScenariosParser.T__69)
                self.state = 1175
                self.match(AVScenariosParser.T__12)
                self.state = 1176
                self.match(AVScenariosParser.T__71)
                pass

            elif la_ == 2:
                localctx = AVScenariosParser.Speed_violation_stmt1Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1178
                self.speed_parameter()
                self.state = 1179
                self.match(AVScenariosParser.T__81)
                self.state = 1180
                self.trace_state()
                self.state = 1181
                self.match(AVScenariosParser.T__69)
                self.state = 1182
                self.match(AVScenariosParser.T__75)
                self.state = 1183
                self.match(AVScenariosParser.T__71)
                self.state = 1184
                self.match(AVScenariosParser.T__69)
                self.state = 1185
                self.match(AVScenariosParser.T__13)
                self.state = 1186
                self.match(AVScenariosParser.T__71)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Time_durationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_time_duration

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Time_duration_valueContext(Time_durationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Time_durationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def non_negative_real_value(self):
            return self.getTypedRuleContext(AVScenariosParser.Non_negative_real_valueContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTime_duration_value" ):
                listener.enterTime_duration_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTime_duration_value" ):
                listener.exitTime_duration_value(self)



    def time_duration(self):

        localctx = AVScenariosParser.Time_durationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_time_duration)
        try:
            localctx = AVScenariosParser.Time_duration_valueContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 1190
            self.non_negative_real_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assignment_statementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_assignment_statements

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AssignsContext(Assignment_statementsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Assignment_statementsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def assignment_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AVScenariosParser.Assignment_statementContext)
            else:
                return self.getTypedRuleContext(AVScenariosParser.Assignment_statementContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssigns" ):
                listener.enterAssigns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssigns" ):
                listener.exitAssigns(self)



    def assignment_statements(self):

        localctx = AVScenariosParser.Assignment_statementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_assignment_statements)
        self._la = 0 # Token type
        try:
            localctx = AVScenariosParser.AssignsContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 1197
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AVScenariosParser.T__0) | (1 << AVScenariosParser.T__4) | (1 << AVScenariosParser.T__7) | (1 << AVScenariosParser.T__9) | (1 << AVScenariosParser.T__10) | (1 << AVScenariosParser.T__11) | (1 << AVScenariosParser.T__16) | (1 << AVScenariosParser.T__17) | (1 << AVScenariosParser.T__18) | (1 << AVScenariosParser.T__19) | (1 << AVScenariosParser.T__20) | (1 << AVScenariosParser.T__21) | (1 << AVScenariosParser.T__22) | (1 << AVScenariosParser.T__23) | (1 << AVScenariosParser.T__24) | (1 << AVScenariosParser.T__25) | (1 << AVScenariosParser.T__26) | (1 << AVScenariosParser.T__32) | (1 << AVScenariosParser.T__33) | (1 << AVScenariosParser.T__34) | (1 << AVScenariosParser.T__35) | (1 << AVScenariosParser.T__36) | (1 << AVScenariosParser.T__37) | (1 << AVScenariosParser.T__38) | (1 << AVScenariosParser.T__39) | (1 << AVScenariosParser.T__40) | (1 << AVScenariosParser.T__41) | (1 << AVScenariosParser.T__42) | (1 << AVScenariosParser.T__43) | (1 << AVScenariosParser.T__44) | (1 << AVScenariosParser.T__49) | (1 << AVScenariosParser.T__59) | (1 << AVScenariosParser.T__60) | (1 << AVScenariosParser.T__61))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (AVScenariosParser.T__63 - 64)) | (1 << (AVScenariosParser.T__65 - 64)) | (1 << (AVScenariosParser.T__68 - 64)) | (1 << (AVScenariosParser.T__72 - 64)) | (1 << (AVScenariosParser.T__73 - 64)) | (1 << (AVScenariosParser.T__74 - 64)) | (1 << (AVScenariosParser.T__75 - 64)) | (1 << (AVScenariosParser.T__79 - 64)) | (1 << (AVScenariosParser.T__80 - 64)) | (1 << (AVScenariosParser.Variable_name - 64)))) != 0):
                self.state = 1192
                self.assignment_statement()
                self.state = 1193
                self.match(AVScenariosParser.T__2)
                self.state = 1199
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assignment_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AVScenariosParser.RULE_assignment_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Assign_speed_limitContext(Assignment_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Assignment_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)

        def speed_limitation(self):
            return self.getTypedRuleContext(AVScenariosParser.Speed_limitationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_speed_limit" ):
                listener.enterAssign_speed_limit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_speed_limit" ):
                listener.exitAssign_speed_limit(self)


    class Assign_obstaclesContext(Assignment_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Assignment_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)

        def obstacles(self):
            return self.getTypedRuleContext(AVScenariosParser.ObstaclesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_obstacles" ):
                listener.enterAssign_obstacles(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_obstacles" ):
                listener.exitAssign_obstacles(self)


    class Assign_npcsContext(Assignment_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Assignment_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)

        def npc_vehicles(self):
            return self.getTypedRuleContext(AVScenariosParser.Npc_vehiclesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_npcs" ):
                listener.enterAssign_npcs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_npcs" ):
                listener.exitAssign_npcs(self)


    class Assign_agent_groundContext(Assignment_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Assignment_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)

        def agent_ground_truth(self):
            return self.getTypedRuleContext(AVScenariosParser.Agent_ground_truthContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_agent_ground" ):
                listener.enterAssign_agent_ground(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_agent_ground" ):
                listener.exitAssign_agent_ground(self)


    class Assign_stateContext(Assignment_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Assignment_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)

        def state_(self):
            return self.getTypedRuleContext(AVScenariosParser.State_Context,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_state" ):
                listener.enterAssign_state(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_state" ):
                listener.exitAssign_state(self)


    class Assign_name_two_variablesContext(Assignment_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Assignment_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AVScenariosParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_name_two_variables" ):
                listener.enterAssign_name_two_variables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_name_two_variables" ):
                listener.exitAssign_name_two_variables(self)


    class Assign_name_three_variablesContext(Assignment_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Assignment_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AVScenariosParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_name_three_variables" ):
                listener.enterAssign_name_three_variables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_name_three_variables" ):
                listener.exitAssign_name_three_variables(self)


    class Assign_shapeContext(Assignment_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Assignment_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)

        def shape(self):
            return self.getTypedRuleContext(AVScenariosParser.ShapeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_shape" ):
                listener.enterAssign_shape(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_shape" ):
                listener.exitAssign_shape(self)


    class Assign_waypoint_motionContext(Assignment_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Assignment_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)

        def waypoint_motion(self):
            return self.getTypedRuleContext(AVScenariosParser.Waypoint_motionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_waypoint_motion" ):
                listener.enterAssign_waypoint_motion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_waypoint_motion" ):
                listener.exitAssign_waypoint_motion(self)


    class Assign_obsContext(Assignment_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Assignment_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)

        def obstacle(self):
            return self.getTypedRuleContext(AVScenariosParser.ObstacleContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_obs" ):
                listener.enterAssign_obs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_obs" ):
                listener.exitAssign_obs(self)


    class Assign_agent_ground_disContext(Assignment_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Assignment_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)

        def agent_ground_distance(self):
            return self.getTypedRuleContext(AVScenariosParser.Agent_ground_distanceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_agent_ground_dis" ):
                listener.enterAssign_agent_ground_dis(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_agent_ground_dis" ):
                listener.exitAssign_agent_ground_dis(self)


    class Assign_egoContext(Assignment_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Assignment_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)

        def ego_vehicle(self):
            return self.getTypedRuleContext(AVScenariosParser.Ego_vehicleContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_ego" ):
                listener.enterAssign_ego(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_ego" ):
                listener.exitAssign_ego(self)


    class Assign_rvContext(Assignment_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Assignment_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)

        def real_value(self):
            return self.getTypedRuleContext(AVScenariosParser.Real_valueContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_rv" ):
                listener.enterAssign_rv(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_rv" ):
                listener.exitAssign_rv(self)


    class Assign_pedContext(Assignment_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Assignment_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)

        def pedestrian(self):
            return self.getTypedRuleContext(AVScenariosParser.PedestrianContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_ped" ):
                listener.enterAssign_ped(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_ped" ):
                listener.exitAssign_ped(self)


    class Assign_timeContext(Assignment_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Assignment_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)

        def time(self):
            return self.getTypedRuleContext(AVScenariosParser.TimeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_time" ):
                listener.enterAssign_time(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_time" ):
                listener.exitAssign_time(self)


    class Assign_state_listContext(Assignment_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Assignment_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)

        def state_list(self):
            return self.getTypedRuleContext(AVScenariosParser.State_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_state_list" ):
                listener.enterAssign_state_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_state_list" ):
                listener.exitAssign_state_list(self)


    class Assign_traceContext(Assignment_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Assignment_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def trace_assignment(self):
            return self.getTypedRuleContext(AVScenariosParser.Trace_assignmentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_trace" ):
                listener.enterAssign_trace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_trace" ):
                listener.exitAssign_trace(self)


    class Assign_pedestrian_typeContext(Assignment_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Assignment_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)

        def pedestrian_type(self):
            return self.getTypedRuleContext(AVScenariosParser.Pedestrian_typeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_pedestrian_type" ):
                listener.enterAssign_pedestrian_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_pedestrian_type" ):
                listener.exitAssign_pedestrian_type(self)


    class Assign_detectionContext(Assignment_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Assignment_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def detection_assertion(self):
            return self.getTypedRuleContext(AVScenariosParser.Detection_assertionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_detection" ):
                listener.enterAssign_detection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_detection" ):
                listener.exitAssign_detection(self)


    class Assign_safety_idContext(Assignment_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Assignment_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)

        def safety_statement(self):
            return self.getTypedRuleContext(AVScenariosParser.Safety_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_safety_id" ):
                listener.enterAssign_safety_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_safety_id" ):
                listener.exitAssign_safety_id(self)


    class Assign_npcContext(Assignment_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Assignment_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)

        def npc_vehicle(self):
            return self.getTypedRuleContext(AVScenariosParser.Npc_vehicleContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_npc" ):
                listener.enterAssign_npc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_npc" ):
                listener.exitAssign_npc(self)


    class Assign_variableContext(Assignment_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Assignment_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AVScenariosParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_variable" ):
                listener.enterAssign_variable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_variable" ):
                listener.exitAssign_variable(self)


    class Assign_envContext(Assignment_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Assignment_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)

        def env(self):
            return self.getTypedRuleContext(AVScenariosParser.EnvContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_env" ):
                listener.enterAssign_env(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_env" ):
                listener.exitAssign_env(self)


    class Assign_assertionContext(Assignment_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Assignment_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def trace_identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.Trace_identifierContext,0)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_assertion" ):
                listener.enterAssign_assertion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_assertion" ):
                listener.exitAssign_assertion(self)


    class Assign_intersection_assertContext(Assignment_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Assignment_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def intersection_assertion(self):
            return self.getTypedRuleContext(AVScenariosParser.Intersection_assertionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_intersection_assert" ):
                listener.enterAssign_intersection_assert(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_intersection_assert" ):
                listener.exitAssign_intersection_assert(self)


    class Assign_strContext(Assignment_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Assignment_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)

        def String(self):
            return self.getToken(AVScenariosParser.String, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_str" ):
                listener.enterAssign_str(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_str" ):
                listener.exitAssign_str(self)


    class Assign_ego_stateContext(Assignment_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Assignment_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)

        def ego_state(self):
            return self.getTypedRuleContext(AVScenariosParser.Ego_stateContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_ego_state" ):
                listener.enterAssign_ego_state(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_ego_state" ):
                listener.exitAssign_ego_state(self)


    class Assign_agent_errorContext(Assignment_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Assignment_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)

        def agent_error(self):
            return self.getTypedRuleContext(AVScenariosParser.Agent_errorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_agent_error" ):
                listener.enterAssign_agent_error(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_agent_error" ):
                listener.exitAssign_agent_error(self)


    class Assign_pedestriansContext(Assignment_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Assignment_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)

        def pedestrians(self):
            return self.getTypedRuleContext(AVScenariosParser.PedestriansContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_pedestrians" ):
                listener.enterAssign_pedestrians(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_pedestrians" ):
                listener.exitAssign_pedestrians(self)


    class Assign_trafficContext(Assignment_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Assignment_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)

        def traffic(self):
            return self.getTypedRuleContext(AVScenariosParser.TrafficContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_traffic" ):
                listener.enterAssign_traffic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_traffic" ):
                listener.exitAssign_traffic(self)


    class Assign_vehicle_typeContext(Assignment_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Assignment_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)

        def vehicle_type(self):
            return self.getTypedRuleContext(AVScenariosParser.Vehicle_typeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_vehicle_type" ):
                listener.enterAssign_vehicle_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_vehicle_type" ):
                listener.exitAssign_vehicle_type(self)


    class Assign_lane_rvContext(Assignment_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Assignment_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)

        def laneID_parameter(self):
            return self.getTypedRuleContext(AVScenariosParser.LaneID_parameterContext,0)

        def real_value(self):
            return self.getTypedRuleContext(AVScenariosParser.Real_valueContext,0)

        def coordinate_frame(self):
            return self.getTypedRuleContext(AVScenariosParser.Coordinate_frameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_lane_rv" ):
                listener.enterAssign_lane_rv(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_lane_rv" ):
                listener.exitAssign_lane_rv(self)


    class Assign_weatherContext(Assignment_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Assignment_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)

        def weather(self):
            return self.getTypedRuleContext(AVScenariosParser.WeatherContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_weather" ):
                listener.enterAssign_weather(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_weather" ):
                listener.exitAssign_weather(self)


    class Assign_intersectionContext(Assignment_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Assignment_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)

        def meta_intersection_traffic(self):
            return self.getTypedRuleContext(AVScenariosParser.Meta_intersection_trafficContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_intersection" ):
                listener.enterAssign_intersection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_intersection" ):
                listener.exitAssign_intersection(self)


    class Assign_weather_stmtContext(Assignment_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Assignment_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)

        def weather_statement(self):
            return self.getTypedRuleContext(AVScenariosParser.Weather_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_weather_stmt" ):
                listener.enterAssign_weather_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_weather_stmt" ):
                listener.exitAssign_weather_stmt(self)


    class Assign_headingContext(Assignment_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Assignment_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)

        def heading(self):
            return self.getTypedRuleContext(AVScenariosParser.HeadingContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_heading" ):
                listener.enterAssign_heading(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_heading" ):
                listener.exitAssign_heading(self)


    class Assign_scenarioContext(Assignment_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Assignment_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)

        def scenario(self):
            return self.getTypedRuleContext(AVScenariosParser.ScenarioContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_scenario" ):
                listener.enterAssign_scenario(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_scenario" ):
                listener.exitAssign_scenario(self)


    class Assign_detection_idContext(Assignment_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Assignment_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)

        def detection_statement(self):
            return self.getTypedRuleContext(AVScenariosParser.Detection_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_detection_id" ):
                listener.enterAssign_detection_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_detection_id" ):
                listener.exitAssign_detection_id(self)


    class Assign_uniform_motionContext(Assignment_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Assignment_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)

        def uniform_motion(self):
            return self.getTypedRuleContext(AVScenariosParser.Uniform_motionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_uniform_motion" ):
                listener.enterAssign_uniform_motion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_uniform_motion" ):
                listener.exitAssign_uniform_motion(self)


    class Assign_intersection_assert_idContext(Assignment_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Assignment_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)

        def red_light_statement(self):
            return self.getTypedRuleContext(AVScenariosParser.Red_light_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_intersection_assert_id" ):
                listener.enterAssign_intersection_assert_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_intersection_assert_id" ):
                listener.exitAssign_intersection_assert_id(self)


    class Assign_general_typeContext(Assignment_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Assignment_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)

        def general_type(self):
            return self.getTypedRuleContext(AVScenariosParser.General_typeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_general_type" ):
                listener.enterAssign_general_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_general_type" ):
                listener.exitAssign_general_type(self)


    class Assign_variablesContext(Assignment_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Assignment_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AVScenariosParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_variables" ):
                listener.enterAssign_variables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_variables" ):
                listener.exitAssign_variables(self)


    class Assign_safetyContext(Assignment_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Assignment_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def safety_assertion(self):
            return self.getTypedRuleContext(AVScenariosParser.Safety_assertionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_safety" ):
                listener.enterAssign_safety(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_safety" ):
                listener.exitAssign_safety(self)


    class Assign_rv_rvContext(Assignment_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Assignment_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)

        def real_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AVScenariosParser.Real_valueContext)
            else:
                return self.getTypedRuleContext(AVScenariosParser.Real_valueContext,i)

        def coordinate_frame(self):
            return self.getTypedRuleContext(AVScenariosParser.Coordinate_frameContext,0)

        def Signal(self):
            return self.getToken(AVScenariosParser.Signal, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_rv_rv" ):
                listener.enterAssign_rv_rv(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_rv_rv" ):
                listener.exitAssign_rv_rv(self)


    class Assign_colorContext(Assignment_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Assignment_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)

        def color(self):
            return self.getTypedRuleContext(AVScenariosParser.ColorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_color" ):
                listener.enterAssign_color(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_color" ):
                listener.exitAssign_color(self)


    class Assign_agent_stateContext(Assignment_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Assignment_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)

        def agent_state(self):
            return self.getTypedRuleContext(AVScenariosParser.Agent_stateContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_agent_state" ):
                listener.enterAssign_agent_state(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_agent_state" ):
                listener.exitAssign_agent_state(self)


    class Assign_speed_constraintContext(Assignment_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Assignment_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def speed_constraint_assertion(self):
            return self.getTypedRuleContext(AVScenariosParser.Speed_constraint_assertionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_speed_constraint" ):
                listener.enterAssign_speed_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_speed_constraint" ):
                listener.exitAssign_speed_constraint(self)


    class Assign_speed_constraint_idContext(Assignment_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Assignment_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)

        def speed_statement(self):
            return self.getTypedRuleContext(AVScenariosParser.Speed_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_speed_constraint_id" ):
                listener.enterAssign_speed_constraint_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_speed_constraint_id" ):
                listener.exitAssign_speed_constraint_id(self)


    class Assign_weather_discreteContext(Assignment_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AVScenariosParser.Assignment_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AVScenariosParser.IdentifierContext,0)

        def weather_discrete_level(self):
            return self.getTypedRuleContext(AVScenariosParser.Weather_discrete_levelContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_weather_discrete" ):
                listener.enterAssign_weather_discrete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_weather_discrete" ):
                listener.exitAssign_weather_discrete(self)



    def assignment_statement(self):

        localctx = AVScenariosParser.Assignment_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_assignment_statement)
        self._la = 0 # Token type
        try:
            self.state = 1424
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                localctx = AVScenariosParser.Assign_scenarioContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1200
                self.identifier()
                self.state = 1201
                self.match(AVScenariosParser.T__62)
                self.state = 1202
                self.scenario()
                pass

            elif la_ == 2:
                localctx = AVScenariosParser.Assign_rvContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1204
                self.identifier()
                self.state = 1205
                self.match(AVScenariosParser.T__62)
                self.state = 1206
                self.real_value()
                pass

            elif la_ == 3:
                localctx = AVScenariosParser.Assign_strContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1208
                self.identifier()
                self.state = 1209
                self.match(AVScenariosParser.T__62)
                self.state = 1210
                self.match(AVScenariosParser.String)
                pass

            elif la_ == 4:
                localctx = AVScenariosParser.Assign_egoContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1212
                self.identifier()
                self.state = 1213
                self.match(AVScenariosParser.T__62)
                self.state = 1214
                self.ego_vehicle()
                pass

            elif la_ == 5:
                localctx = AVScenariosParser.Assign_variableContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1216
                self.identifier()
                self.state = 1217
                self.match(AVScenariosParser.T__62)
                self.state = 1218
                self.match(AVScenariosParser.T__5)
                self.state = 1219
                self.identifier()
                self.state = 1220
                self.match(AVScenariosParser.T__6)
                pass

            elif la_ == 6:
                localctx = AVScenariosParser.Assign_name_two_variablesContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1222
                self.identifier()
                self.state = 1223
                self.match(AVScenariosParser.T__62)
                self.state = 1224
                self.match(AVScenariosParser.T__5)
                self.state = 1225
                self.identifier()
                self.state = 1226
                self.match(AVScenariosParser.T__8)
                self.state = 1227
                self.identifier()
                self.state = 1228
                self.match(AVScenariosParser.T__6)
                pass

            elif la_ == 7:
                localctx = AVScenariosParser.Assign_name_three_variablesContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1230
                self.identifier()
                self.state = 1231
                self.match(AVScenariosParser.T__62)
                self.state = 1232
                self.match(AVScenariosParser.T__5)
                self.state = 1233
                self.identifier()
                self.state = 1234
                self.match(AVScenariosParser.T__8)
                self.state = 1235
                self.identifier()
                self.state = 1236
                self.match(AVScenariosParser.T__8)
                self.state = 1237
                self.identifier()
                self.state = 1238
                self.match(AVScenariosParser.T__6)
                pass

            elif la_ == 8:
                localctx = AVScenariosParser.Assign_stateContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1240
                self.identifier()
                self.state = 1241
                self.match(AVScenariosParser.T__62)
                self.state = 1242
                self.state_()
                pass

            elif la_ == 9:
                localctx = AVScenariosParser.Assign_vehicle_typeContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 1244
                self.identifier()
                self.state = 1245
                self.match(AVScenariosParser.T__62)
                self.state = 1246
                self.vehicle_type()
                pass

            elif la_ == 10:
                localctx = AVScenariosParser.Assign_state_listContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 1248
                self.identifier()
                self.state = 1249
                self.match(AVScenariosParser.T__62)
                self.state = 1250
                self.state_list()
                pass

            elif la_ == 11:
                localctx = AVScenariosParser.Assign_pedestrian_typeContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 1252
                self.identifier()
                self.state = 1253
                self.match(AVScenariosParser.T__62)
                self.state = 1254
                self.pedestrian_type()
                pass

            elif la_ == 12:
                localctx = AVScenariosParser.Assign_rv_rvContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 1256
                self.identifier()
                self.state = 1257
                self.match(AVScenariosParser.T__62)
                self.state = 1259
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AVScenariosParser.T__9) | (1 << AVScenariosParser.T__10) | (1 << AVScenariosParser.T__11))) != 0):
                    self.state = 1258
                    self.coordinate_frame()


                self.state = 1261
                self.match(AVScenariosParser.T__5)
                self.state = 1262
                self.real_value()
                self.state = 1263
                self.match(AVScenariosParser.T__8)
                self.state = 1264
                self.real_value()
                self.state = 1268
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AVScenariosParser.T__8:
                    self.state = 1265
                    self.match(AVScenariosParser.T__8)
                    self.state = 1266
                    self.match(AVScenariosParser.Signal)
                    self.state = 1267
                    self.real_value()


                self.state = 1270
                self.match(AVScenariosParser.T__6)
                pass

            elif la_ == 13:
                localctx = AVScenariosParser.Assign_lane_rvContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 1272
                self.identifier()
                self.state = 1273
                self.match(AVScenariosParser.T__62)
                self.state = 1275
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
                if la_ == 1:
                    self.state = 1274
                    self.coordinate_frame()


                self.state = 1277
                self.laneID_parameter()
                self.state = 1278
                self.match(AVScenariosParser.T__14)
                self.state = 1279
                self.real_value()
                pass

            elif la_ == 14:
                localctx = AVScenariosParser.Assign_headingContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 1281
                self.identifier()
                self.state = 1282
                self.match(AVScenariosParser.T__62)
                self.state = 1283
                self.heading()
                pass

            elif la_ == 15:
                localctx = AVScenariosParser.Assign_general_typeContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 1285
                self.identifier()
                self.state = 1286
                self.match(AVScenariosParser.T__62)
                self.state = 1287
                self.general_type()
                pass

            elif la_ == 16:
                localctx = AVScenariosParser.Assign_colorContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 1289
                self.identifier()
                self.state = 1290
                self.match(AVScenariosParser.T__62)
                self.state = 1291
                self.color()
                pass

            elif la_ == 17:
                localctx = AVScenariosParser.Assign_npcContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 1293
                self.identifier()
                self.state = 1294
                self.match(AVScenariosParser.T__62)
                self.state = 1295
                self.npc_vehicle()
                pass

            elif la_ == 18:
                localctx = AVScenariosParser.Assign_uniform_motionContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 1297
                self.identifier()
                self.state = 1298
                self.match(AVScenariosParser.T__62)
                self.state = 1299
                self.uniform_motion()
                pass

            elif la_ == 19:
                localctx = AVScenariosParser.Assign_waypoint_motionContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 1301
                self.identifier()
                self.state = 1302
                self.match(AVScenariosParser.T__62)
                self.state = 1303
                self.waypoint_motion()
                pass

            elif la_ == 20:
                localctx = AVScenariosParser.Assign_state_listContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 1305
                self.identifier()
                self.state = 1306
                self.match(AVScenariosParser.T__62)
                self.state = 1307
                self.state_list()
                pass

            elif la_ == 21:
                localctx = AVScenariosParser.Assign_variablesContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 1309
                self.identifier()
                self.state = 1310
                self.match(AVScenariosParser.T__62)
                self.state = 1311
                self.match(AVScenariosParser.T__1)
                self.state = 1312
                self.identifier()
                self.state = 1317
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==AVScenariosParser.T__8:
                    self.state = 1313
                    self.match(AVScenariosParser.T__8)
                    self.state = 1314
                    self.identifier()
                    self.state = 1319
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1320
                self.match(AVScenariosParser.T__3)
                pass

            elif la_ == 22:
                localctx = AVScenariosParser.Assign_pedestriansContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 1322
                self.identifier()
                self.state = 1323
                self.match(AVScenariosParser.T__62)
                self.state = 1324
                self.pedestrians()
                pass

            elif la_ == 23:
                localctx = AVScenariosParser.Assign_npcsContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 1326
                self.identifier()
                self.state = 1327
                self.match(AVScenariosParser.T__62)
                self.state = 1328
                self.npc_vehicles()
                pass

            elif la_ == 24:
                localctx = AVScenariosParser.Assign_obstaclesContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 1330
                self.identifier()
                self.state = 1331
                self.match(AVScenariosParser.T__62)
                self.state = 1332
                self.obstacles()
                pass

            elif la_ == 25:
                localctx = AVScenariosParser.Assign_weatherContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 1334
                self.identifier()
                self.state = 1335
                self.match(AVScenariosParser.T__62)
                self.state = 1336
                self.weather()
                pass

            elif la_ == 26:
                localctx = AVScenariosParser.Assign_trafficContext(self, localctx)
                self.enterOuterAlt(localctx, 26)
                self.state = 1338
                self.identifier()
                self.state = 1339
                self.match(AVScenariosParser.T__62)
                self.state = 1340
                self.traffic()
                pass

            elif la_ == 27:
                localctx = AVScenariosParser.Assign_pedContext(self, localctx)
                self.enterOuterAlt(localctx, 27)
                self.state = 1342
                self.identifier()
                self.state = 1343
                self.match(AVScenariosParser.T__62)
                self.state = 1344
                self.pedestrian()
                pass

            elif la_ == 28:
                localctx = AVScenariosParser.Assign_obsContext(self, localctx)
                self.enterOuterAlt(localctx, 28)
                self.state = 1346
                self.identifier()
                self.state = 1347
                self.match(AVScenariosParser.T__62)
                self.state = 1348
                self.obstacle()
                pass

            elif la_ == 29:
                localctx = AVScenariosParser.Assign_shapeContext(self, localctx)
                self.enterOuterAlt(localctx, 29)
                self.state = 1350
                self.identifier()
                self.state = 1351
                self.match(AVScenariosParser.T__62)
                self.state = 1352
                self.shape()
                pass

            elif la_ == 30:
                localctx = AVScenariosParser.Assign_envContext(self, localctx)
                self.enterOuterAlt(localctx, 30)
                self.state = 1354
                self.identifier()
                self.state = 1355
                self.match(AVScenariosParser.T__62)
                self.state = 1356
                self.env()
                pass

            elif la_ == 31:
                localctx = AVScenariosParser.Assign_timeContext(self, localctx)
                self.enterOuterAlt(localctx, 31)
                self.state = 1358
                self.identifier()
                self.state = 1359
                self.match(AVScenariosParser.T__62)
                self.state = 1360
                self.time()
                pass

            elif la_ == 32:
                localctx = AVScenariosParser.Assign_weather_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 32)
                self.state = 1362
                self.identifier()
                self.state = 1363
                self.match(AVScenariosParser.T__62)
                self.state = 1364
                self.weather_statement()
                pass

            elif la_ == 33:
                localctx = AVScenariosParser.Assign_weather_discreteContext(self, localctx)
                self.enterOuterAlt(localctx, 33)
                self.state = 1366
                self.identifier()
                self.state = 1367
                self.match(AVScenariosParser.T__62)
                self.state = 1368
                self.weather_discrete_level()
                pass

            elif la_ == 34:
                localctx = AVScenariosParser.Assign_intersectionContext(self, localctx)
                self.enterOuterAlt(localctx, 34)
                self.state = 1370
                self.identifier()
                self.state = 1371
                self.match(AVScenariosParser.T__62)
                self.state = 1372
                self.meta_intersection_traffic()
                pass

            elif la_ == 35:
                localctx = AVScenariosParser.Assign_speed_limitContext(self, localctx)
                self.enterOuterAlt(localctx, 35)
                self.state = 1374
                self.identifier()
                self.state = 1375
                self.match(AVScenariosParser.T__62)
                self.state = 1376
                self.speed_limitation()
                pass

            elif la_ == 36:
                localctx = AVScenariosParser.Assign_traceContext(self, localctx)
                self.enterOuterAlt(localctx, 36)
                self.state = 1378
                self.trace_assignment()
                pass

            elif la_ == 37:
                localctx = AVScenariosParser.Assign_assertionContext(self, localctx)
                self.enterOuterAlt(localctx, 37)
                self.state = 1379
                self.trace_identifier()
                self.state = 1380
                self.match(AVScenariosParser.T__64)
                self.state = 1381
                self.match(AVScenariosParser.T__65)
                self.state = 1382
                self.identifier()
                pass

            elif la_ == 38:
                localctx = AVScenariosParser.Assign_detectionContext(self, localctx)
                self.enterOuterAlt(localctx, 38)
                self.state = 1384
                self.detection_assertion()
                pass

            elif la_ == 39:
                localctx = AVScenariosParser.Assign_safetyContext(self, localctx)
                self.enterOuterAlt(localctx, 39)
                self.state = 1385
                self.safety_assertion()
                pass

            elif la_ == 40:
                localctx = AVScenariosParser.Assign_intersection_assertContext(self, localctx)
                self.enterOuterAlt(localctx, 40)
                self.state = 1386
                self.intersection_assertion()
                pass

            elif la_ == 41:
                localctx = AVScenariosParser.Assign_speed_constraintContext(self, localctx)
                self.enterOuterAlt(localctx, 41)
                self.state = 1387
                self.speed_constraint_assertion()
                pass

            elif la_ == 42:
                localctx = AVScenariosParser.Assign_detection_idContext(self, localctx)
                self.enterOuterAlt(localctx, 42)
                self.state = 1388
                self.identifier()
                self.state = 1389
                self.match(AVScenariosParser.T__62)
                self.state = 1390
                self.detection_statement(0)
                pass

            elif la_ == 43:
                localctx = AVScenariosParser.Assign_safety_idContext(self, localctx)
                self.enterOuterAlt(localctx, 43)
                self.state = 1392
                self.identifier()
                self.state = 1393
                self.match(AVScenariosParser.T__62)
                self.state = 1394
                self.safety_statement(0)
                pass

            elif la_ == 44:
                localctx = AVScenariosParser.Assign_intersection_assert_idContext(self, localctx)
                self.enterOuterAlt(localctx, 44)
                self.state = 1396
                self.identifier()
                self.state = 1397
                self.match(AVScenariosParser.T__62)
                self.state = 1398
                self.red_light_statement()
                pass

            elif la_ == 45:
                localctx = AVScenariosParser.Assign_speed_constraint_idContext(self, localctx)
                self.enterOuterAlt(localctx, 45)
                self.state = 1400
                self.identifier()
                self.state = 1401
                self.match(AVScenariosParser.T__62)
                self.state = 1402
                self.speed_statement()
                pass

            elif la_ == 46:
                localctx = AVScenariosParser.Assign_agent_groundContext(self, localctx)
                self.enterOuterAlt(localctx, 46)
                self.state = 1404
                self.identifier()
                self.state = 1405
                self.match(AVScenariosParser.T__62)
                self.state = 1406
                self.agent_ground_truth()
                pass

            elif la_ == 47:
                localctx = AVScenariosParser.Assign_agent_ground_disContext(self, localctx)
                self.enterOuterAlt(localctx, 47)
                self.state = 1408
                self.identifier()
                self.state = 1409
                self.match(AVScenariosParser.T__62)
                self.state = 1410
                self.agent_ground_distance()
                pass

            elif la_ == 48:
                localctx = AVScenariosParser.Assign_ego_stateContext(self, localctx)
                self.enterOuterAlt(localctx, 48)
                self.state = 1412
                self.identifier()
                self.state = 1413
                self.match(AVScenariosParser.T__62)
                self.state = 1414
                self.ego_state()
                pass

            elif la_ == 49:
                localctx = AVScenariosParser.Assign_agent_errorContext(self, localctx)
                self.enterOuterAlt(localctx, 49)
                self.state = 1416
                self.identifier()
                self.state = 1417
                self.match(AVScenariosParser.T__62)
                self.state = 1418
                self.agent_error()
                pass

            elif la_ == 50:
                localctx = AVScenariosParser.Assign_agent_stateContext(self, localctx)
                self.enterOuterAlt(localctx, 50)
                self.state = 1420
                self.identifier()
                self.state = 1421
                self.match(AVScenariosParser.T__62)
                self.state = 1422
                self.agent_state()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Variable_name(self):
            return self.getToken(AVScenariosParser.Variable_name, 0)

        def getRuleIndex(self):
            return AVScenariosParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = AVScenariosParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1426
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AVScenariosParser.T__0) | (1 << AVScenariosParser.T__4) | (1 << AVScenariosParser.T__7) | (1 << AVScenariosParser.T__9) | (1 << AVScenariosParser.T__10) | (1 << AVScenariosParser.T__11) | (1 << AVScenariosParser.T__16) | (1 << AVScenariosParser.T__17) | (1 << AVScenariosParser.T__18) | (1 << AVScenariosParser.T__19) | (1 << AVScenariosParser.T__20) | (1 << AVScenariosParser.T__21) | (1 << AVScenariosParser.T__22) | (1 << AVScenariosParser.T__23) | (1 << AVScenariosParser.T__24) | (1 << AVScenariosParser.T__25) | (1 << AVScenariosParser.T__26) | (1 << AVScenariosParser.T__32) | (1 << AVScenariosParser.T__33) | (1 << AVScenariosParser.T__34) | (1 << AVScenariosParser.T__35) | (1 << AVScenariosParser.T__36) | (1 << AVScenariosParser.T__37) | (1 << AVScenariosParser.T__38) | (1 << AVScenariosParser.T__39) | (1 << AVScenariosParser.T__40) | (1 << AVScenariosParser.T__41) | (1 << AVScenariosParser.T__42) | (1 << AVScenariosParser.T__43) | (1 << AVScenariosParser.T__44) | (1 << AVScenariosParser.T__49) | (1 << AVScenariosParser.T__59) | (1 << AVScenariosParser.T__60))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (AVScenariosParser.T__63 - 64)) | (1 << (AVScenariosParser.T__65 - 64)) | (1 << (AVScenariosParser.T__68 - 64)) | (1 << (AVScenariosParser.T__72 - 64)) | (1 << (AVScenariosParser.T__73 - 64)) | (1 << (AVScenariosParser.T__74 - 64)) | (1 << (AVScenariosParser.T__75 - 64)) | (1 << (AVScenariosParser.T__79 - 64)) | (1 << (AVScenariosParser.T__80 - 64)) | (1 << (AVScenariosParser.Variable_name - 64)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[42] = self.multi_npc_vehicles_sempred
        self._predicates[53] = self.multi_states_sempred
        self._predicates[56] = self.multiple_pedestrians_sempred
        self._predicates[67] = self.multiple_obstacles_sempred
        self._predicates[84] = self.multi_weathers_sempred
        self._predicates[98] = self.lane_traffic_sempred
        self._predicates[106] = self.detection_statement_sempred
        self._predicates[127] = self.safety_statement_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def multi_npc_vehicles_sempred(self, localctx:Multi_npc_vehiclesContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 1)
         

    def multi_states_sempred(self, localctx:Multi_statesContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 2)
         

    def multiple_pedestrians_sempred(self, localctx:Multiple_pedestriansContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 1)
         

    def multiple_obstacles_sempred(self, localctx:Multiple_obstaclesContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 1)
         

    def multi_weathers_sempred(self, localctx:Multi_weathersContext, predIndex:int):
            if predIndex == 4:
                return self.precpred(self._ctx, 1)
         

    def lane_traffic_sempred(self, localctx:Lane_trafficContext, predIndex:int):
            if predIndex == 5:
                return self.precpred(self._ctx, 1)
         

    def detection_statement_sempred(self, localctx:Detection_statementContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 1)
         

    def safety_statement_sempred(self, localctx:Safety_statementContext, predIndex:int):
            if predIndex == 7:
                return self.precpred(self._ctx, 1)
         




