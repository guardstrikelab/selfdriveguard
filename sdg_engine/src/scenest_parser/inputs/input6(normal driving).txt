// demo2.scenest demonstrates the normal driving scenario of an autonomous vehicle.
// In this script, the ego vehicle will run normally for a long time until it reaches the planned target position.

map = "Town03";

// ego car
ego_init_position = (101, 62.48); //default coordinate frame is ENU
ego_target_position = (165, 62.48); //default coordinate frame is ENU
ego_init_state = (ego_init_position);
ego_target_state = (ego_target_position);

car_model = "Lincoln MKZ 2017";
car_color = (255, 0, 0);
vehicle_type = (car_model, car_color);
ego_vehicle = AV(ego_init_state, ego_target_state, vehicle_type);

// npc car
npc1_init_state = ("52.-1"->0.0, ,0.0); // start
npc1_waypoint = ((8,40));
npc1_target_state = ("52.1"->0.0, ,0.0); // target
npc1_waypoints = (npc1_waypoint);
npc1 = Vehicle(npc1_init_state, Waypoint(npc1_waypoints), npc1_target_state);

// npc 2: move along given waypoints
npc2_init_state = ("52.-1"->5.0, ,0.0);		// start
npc2_waypoints = (("52.-1"->5.0, ,0.0), ("52.1"->2.0, ,1.0));
npc2_target_state = ("52.1"->2.0, ,0.0); 	// target
npc2 = Vehicle(npc2_init_state, Waypoint(npc2_waypoints), npc2_target_state, vehicle_type);

// npc 3: static vehicle
npc3 = Vehicle(("75.-1"->0.0, ,0.0), , ("494.-1"->1.0, ,0.0));

npcs = {npc1, npc2, npc3};

// pedestrian
pedestrian_type = (1.65, black);
pedestrian1 = Pedestrian(((-15.9, 110), ,0.5), , ((-56, 123), ,0), pedestrian_type);
pedestrian2 = Pedestrian(((101, 62), ,0.5), , ((120, 144), ,0), pedestrian_type);
pedestrians = {pedestrian1, pedestrian2};

// env
time = 10:00;
weather = {rain: 0.1};
env = Environment(time, weather);

// traffic requirements
speed_range = (0, 20);
speed_limit = SpeedLimit("52.-1", speed_range);
intersection = Intersection(1, 1, 0, 1);
traffic = {intersection, speed_limit};

scenario = CreateScenario{load(map);
			        ego_vehicle;
			        npcs;
			        pedestrians;
			        {};
			        env;
			        traffic;
};

Trace trace = EXE(scenario);

ego_state= trace[1][ego];
npc2_perception= trace[1][perception][npc2];
npc2_state= trace[1][truth][npc2];
pedestrian_truth = trace[1][perception][pedestrian1];
pedestrian_ground = trace[1][truth][pedestrian1];

distance = dis(ego_state, npc2_state);
error = diff(npc2_perception, npc2_state);
perception_detection = distance <= 3 & error <= 4;
trace |=G perception_detection;
intersection_assertion=(trace[1][perception][traffic]==trace[1][truth][traffic]
	&trace[1][traffic]==red)->(~norm((100,100))U(trace[1][perception][traffic]==trace[1][truth][traffic]
	&trace[1][traffic]==green));
trace |=G intersection_assertion;
speed_constraint_assertion=(trace[1][perception][traffic]==trace[1][truth][traffic]
	&trace[1][traffic]==(100,200)&120<trace[1][traffic][0])
	->F[0,2]~120<trace[1][traffic][0];
trace |=G speed_constraint_assertion;